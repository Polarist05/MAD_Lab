
Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004354  08004354  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800435c  0800435c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  080043c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  080043c0  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ebdd  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5b  00000000  00000000  0002ecaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  00030b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a24  00000000  00000000  000317f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b59  00000000  00000000  0003221c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9b8  00000000  00000000  00059d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb1f5  00000000  00000000  0006972d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b5c  00000000  00000000  00164924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00168480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080042e8 	.word	0x080042e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080042e8 	.word	0x080042e8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <displayNumber>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t count=0;
void displayNumber(int count){
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b089      	sub	sp, #36	; 0x24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	char a[20];
	sprintf(a,"%d:%d\r",count/60000,count/1000%60);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <displayNumber+0x5c>)
 80005f8:	fb82 1203 	smull	r1, r2, r2, r3
 80005fc:	1392      	asrs	r2, r2, #14
 80005fe:	17db      	asrs	r3, r3, #31
 8000600:	1ad4      	subs	r4, r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a11      	ldr	r2, [pc, #68]	; (800064c <displayNumber+0x60>)
 8000606:	fb82 1203 	smull	r1, r2, r2, r3
 800060a:	1192      	asrs	r2, r2, #6
 800060c:	17db      	asrs	r3, r3, #31
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <displayNumber+0x64>)
 8000612:	fb83 1302 	smull	r1, r3, r3, r2
 8000616:	4413      	add	r3, r2
 8000618:	1159      	asrs	r1, r3, #5
 800061a:	17d3      	asrs	r3, r2, #31
 800061c:	1ac9      	subs	r1, r1, r3
 800061e:	460b      	mov	r3, r1
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	1a5b      	subs	r3, r3, r1
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	1ad1      	subs	r1, r2, r3
 8000628:	f107 000c 	add.w	r0, r7, #12
 800062c:	460b      	mov	r3, r1
 800062e:	4622      	mov	r2, r4
 8000630:	4908      	ldr	r1, [pc, #32]	; (8000654 <displayNumber+0x68>)
 8000632:	f003 f9b5 	bl	80039a0 <siprintf>
	//sprintf(a,"%d\n",count);
	printValue(a);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f80c 	bl	8000658 <printValue>
}
 8000640:	bf00      	nop
 8000642:	3724      	adds	r7, #36	; 0x24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	45e7b273 	.word	0x45e7b273
 800064c:	10624dd3 	.word	0x10624dd3
 8000650:	88888889 	.word	0x88888889
 8000654:	08004300 	.word	0x08004300

08000658 <printValue>:
void printValue(char* str){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000660:	bf00      	nop
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <printValue+0x38>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066c:	2b40      	cmp	r3, #64	; 0x40
 800066e:	d1f8      	bne.n	8000662 <printValue+0xa>
	HAL_UART_Transmit(&huart3, (uint8_t*) str,strlen(str),1000);
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff fde5 	bl	8000240 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	4803      	ldr	r0, [pc, #12]	; (8000690 <printValue+0x38>)
 8000682:	f002 fcef 	bl	8003064 <HAL_UART_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000110 	.word	0x20000110

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fb21 	bl	8000cde <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800069c:	f000 f96e 	bl	800097c <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f814 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f952 	bl	800094c <MX_GPIO_Init>
  MX_TIM1_Init();
 80006a8:	f000 f87e 	bl	80007a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006ac:	f000 f8d0 	bl	8000850 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80006b0:	f000 f91c 	bl	80008ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <main+0x30>)
 80006b6:	f002 f80d 	bl	80026d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80006ba:	4803      	ldr	r0, [pc, #12]	; (80006c8 <main+0x34>)
 80006bc:	f002 f80a 	bl	80026d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x2c>
 80006c2:	bf00      	nop
 80006c4:	20000078 	.word	0x20000078
 80006c8:	200000c4 	.word	0x200000c4

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	; 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	; 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 f980 	bl	80039e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <SystemClock_Config+0xd4>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xd4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemClock_Config+0xd8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <SystemClock_Config+0xd8>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000738:	23d8      	movs	r3, #216	; 0xd8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fead 	bl	80014ac <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000758:	f000 f93c 	bl	80009d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800075c:	f000 fe56 	bl	800140c <HAL_PWREx_EnableOverDrive>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000766:	f000 f935 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2107      	movs	r1, #7
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f93d 	bl	8001a08 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000794:	f000 f91e 	bl	80009d4 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_TIM1_Init+0xa4>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007ce:	22d7      	movs	r2, #215	; 0xd7
 80007d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f2:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_TIM1_Init+0xa0>)
 80007f4:	f001 ff16 	bl	8002624 <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80007fe:	f000 f8e9 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_TIM1_Init+0xa0>)
 8000810:	f002 f8f8 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800081a:	f000 f8db 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_TIM1_Init+0xa0>)
 8000830:	f002 fb1e 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800083a:	f000 f8cb 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000078 	.word	0x20000078
 800084c:	40010000 	.word	0x40010000

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000874:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000878:	22d7      	movs	r2, #215	; 0xd7
 800087a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_TIM2_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200000-1;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <MX_TIM2_Init+0x98>)
 8000886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_TIM2_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000896:	f001 fec5 	bl	8002624 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008a0:	f000 f898 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_TIM2_Init+0x94>)
 80008b2:	f002 f8a7 	bl	8002a04 <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008bc:	f000 f88a 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_TIM2_Init+0x94>)
 80008ce:	f002 facf 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f87c 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	00030d3f 	.word	0x00030d3f

080008ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART3_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART3_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART3_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART3_UART_Init+0x58>)
 8000930:	f002 fb4a 	bl	8002fc8 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f84b 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000110 	.word	0x20000110
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_GPIO_Init+0x2c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <MX_GPIO_Init+0x2c>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_GPIO_Init+0x2c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000982:	463b      	mov	r3, r7
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800098e:	f000 fb15 	bl	8000fbc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000992:	2301      	movs	r3, #1
 8000994:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000996:	2300      	movs	r3, #0
 8000998:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800099e:	231f      	movs	r3, #31
 80009a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009a2:	2387      	movs	r3, #135	; 0x87
 80009a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009aa:	2300      	movs	r3, #0
 80009ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009ae:	2301      	movs	r3, #1
 80009b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009be:	463b      	mov	r3, r7
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fb33 	bl	800102c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009c6:	2004      	movs	r0, #4
 80009c8:	f000 fb10 	bl	8000fec <HAL_MPU_Enable>

}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x44>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x44>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x44>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x44>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x44>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a16:	2005      	movs	r0, #5
 8000a18:	f000 fa8e 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <HAL_TIM_Base_MspInit+0x78>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d114      	bne.n	8000a64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	2019      	movs	r0, #25
 8000a58:	f000 fa79 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a5c:	2019      	movs	r0, #25
 8000a5e:	f000 fa92 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a62:	e018      	b.n	8000a96 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a6c:	d113      	bne.n	8000a96 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	201c      	movs	r0, #28
 8000a8c:	f000 fa5f 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a90:	201c      	movs	r0, #28
 8000a92:	f000 fa78 	bl	8000f86 <HAL_NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010000 	.word	0x40010000
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0ae      	sub	sp, #184	; 0xb8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2290      	movs	r2, #144	; 0x90
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f002 ff89 	bl	80039e0 <memset>
  if(huart->Instance==USART3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <HAL_UART_MspInit+0xb4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d13c      	bne.n	8000b52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f974 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000af2:	f7ff ff6f 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_UART_MspInit+0xb8>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_UART_MspInit+0xb8>)
 8000afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_UART_MspInit+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b40:	2307      	movs	r3, #7
 8000b42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_UART_MspInit+0xbc>)
 8000b4e:	f000 fab1 	bl	80010b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	37b8      	adds	r7, #184	; 0xb8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f8d0 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000bc2:	f001 fdff 	bl	80027c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
	count++;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a02      	ldr	r2, [pc, #8]	; (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000bce:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000078 	.word	0x20000078
 8000bd8:	20000198 	.word	0x20000198

08000bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <TIM2_IRQHandler+0x18>)
 8000be2:	f001 fdef 	bl	80027c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	displayNumber(count);
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <TIM2_IRQHandler+0x1c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fcfe 	bl	80005ec <displayNumber>

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000c4 	.word	0x200000c4
 8000bf8:	20000198 	.word	0x20000198

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f002 fee0 	bl	80039f0 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20080000 	.word	0x20080000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	2000019c 	.word	0x2000019c
 8000c64:	200002f0 	.word	0x200002f0

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c92:	490e      	ldr	r1, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c94:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca8:	4c0b      	ldr	r4, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd7 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f002 fe9f 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fce9 	bl	8000694 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cd0:	08004364 	.word	0x08004364
  ldr r2, =_sbss
 8000cd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cd8:	200002ec 	.word	0x200002ec

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>

08000cde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f928 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f805 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fe77 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f943 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f000 f90b 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	200001a0 	.word	0x200001a0

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200001a0 	.word	0x200001a0

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	05fa0000 	.word	0x05fa0000

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff29 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff3e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff31 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000fc0:	f3bf 8f5f 	dmb	sy
}
 8000fc4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_MPU_Disable+0x28>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_MPU_Disable+0x28>)
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_MPU_Disable+0x2c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	e000ed90 	.word	0xe000ed90

08000fec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_MPU_Enable+0x38>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_MPU_Enable+0x3c>)
 8001000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001002:	4a09      	ldr	r2, [pc, #36]	; (8001028 <HAL_MPU_Enable+0x3c>)
 8001004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001008:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800100a:	f3bf 8f4f 	dsb	sy
}
 800100e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001010:	f3bf 8f6f 	isb	sy
}
 8001014:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed90 	.word	0xe000ed90
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	785a      	ldrb	r2, [r3, #1]
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_MPU_ConfigRegion+0x84>)
 800103a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d029      	beq.n	8001098 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001044:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_MPU_ConfigRegion+0x84>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7b1b      	ldrb	r3, [r3, #12]
 8001050:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7adb      	ldrb	r3, [r3, #11]
 8001056:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001058:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a9b      	ldrb	r3, [r3, #10]
 800105e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001060:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b5b      	ldrb	r3, [r3, #13]
 8001066:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001068:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7b9b      	ldrb	r3, [r3, #14]
 800106e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001070:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7bdb      	ldrb	r3, [r3, #15]
 8001076:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001078:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001080:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7a1b      	ldrb	r3, [r3, #8]
 8001086:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001088:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001092:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001094:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001096:	e005      	b.n	80010a4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_MPU_ConfigRegion+0x84>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_MPU_ConfigRegion+0x84>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed90 	.word	0xe000ed90

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e175      	b.n	80013c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8164 	bne.w	80013ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x56>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80be 	beq.w	80013ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <HAL_GPIO_Init+0x324>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a65      	ldr	r2, [pc, #404]	; (80013d8 <HAL_GPIO_Init+0x324>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_GPIO_Init+0x324>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001256:	4a61      	ldr	r2, [pc, #388]	; (80013dc <HAL_GPIO_Init+0x328>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <HAL_GPIO_Init+0x32c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d037      	beq.n	80012f2 <HAL_GPIO_Init+0x23e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_GPIO_Init+0x330>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d031      	beq.n	80012ee <HAL_GPIO_Init+0x23a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <HAL_GPIO_Init+0x334>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d02b      	beq.n	80012ea <HAL_GPIO_Init+0x236>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_GPIO_Init+0x338>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d025      	beq.n	80012e6 <HAL_GPIO_Init+0x232>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x33c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01f      	beq.n	80012e2 <HAL_GPIO_Init+0x22e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a53      	ldr	r2, [pc, #332]	; (80013f4 <HAL_GPIO_Init+0x340>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d019      	beq.n	80012de <HAL_GPIO_Init+0x22a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x344>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x226>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a51      	ldr	r2, [pc, #324]	; (80013fc <HAL_GPIO_Init+0x348>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00d      	beq.n	80012d6 <HAL_GPIO_Init+0x222>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a50      	ldr	r2, [pc, #320]	; (8001400 <HAL_GPIO_Init+0x34c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d007      	beq.n	80012d2 <HAL_GPIO_Init+0x21e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4f      	ldr	r2, [pc, #316]	; (8001404 <HAL_GPIO_Init+0x350>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_GPIO_Init+0x21a>
 80012ca:	2309      	movs	r3, #9
 80012cc:	e012      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012ce:	230a      	movs	r3, #10
 80012d0:	e010      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012d2:	2308      	movs	r3, #8
 80012d4:	e00e      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00c      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012da:	2306      	movs	r3, #6
 80012dc:	e00a      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012de:	2305      	movs	r3, #5
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x240>
 80012f2:	2300      	movs	r3, #0
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	f002 0203 	and.w	r2, r2, #3
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x328>)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_GPIO_Init+0x354>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_GPIO_Init+0x354>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <HAL_GPIO_Init+0x354>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001360:	4a29      	ldr	r2, [pc, #164]	; (8001408 <HAL_GPIO_Init+0x354>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_GPIO_Init+0x354>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138a:	4a1f      	ldr	r2, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x354>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_GPIO_Init+0x354>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_GPIO_Init+0x354>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	f67f ae86 	bls.w	80010d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3724      	adds	r7, #36	; 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40021400 	.word	0x40021400
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021c00 	.word	0x40021c00
 8001400:	40022000 	.word	0x40022000
 8001404:	40022400 	.word	0x40022400
 8001408:	40013c00 	.word	0x40013c00

0800140c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800143a:	f7ff fca1 	bl	8000d80 <HAL_GetTick>
 800143e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001440:	e009      	b.n	8001456 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001442:	f7ff fc9d 	bl	8000d80 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001450:	d901      	bls.n	8001456 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e022      	b.n	800149c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d1ee      	bne.n	8001442 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001470:	f7ff fc86 	bl	8000d80 <HAL_GetTick>
 8001474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001476:	e009      	b.n	800148c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001478:	f7ff fc82 	bl	8000d80 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001486:	d901      	bls.n	800148c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e007      	b.n	800149c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001498:	d1ee      	bne.n	8001478 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e29b      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8087 	beq.w	80015de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d0:	4b96      	ldr	r3, [pc, #600]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014dc:	4b93      	ldr	r3, [pc, #588]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
 80014e8:	4b90      	ldr	r3, [pc, #576]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f4:	d10b      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	4b8d      	ldr	r3, [pc, #564]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d06c      	beq.n	80015dc <HAL_RCC_OscConfig+0x130>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d168      	bne.n	80015dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e275      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x7a>
 8001518:	4b84      	ldr	r3, [pc, #528]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a83      	ldr	r2, [pc, #524]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x9c>
 800152e:	4b7f      	ldr	r3, [pc, #508]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7e      	ldr	r2, [pc, #504]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7c      	ldr	r3, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7b      	ldr	r2, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xc0>
 8001552:	4b76      	ldr	r3, [pc, #472]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a75      	ldr	r2, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b73      	ldr	r3, [pc, #460]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a72      	ldr	r2, [pc, #456]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 800156c:	4b6f      	ldr	r3, [pc, #444]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6e      	ldr	r2, [pc, #440]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b6c      	ldr	r3, [pc, #432]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6b      	ldr	r2, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fbf8 	bl	8000d80 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fbf4 	bl	8000d80 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e229      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b61      	ldr	r3, [pc, #388]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fbe4 	bl	8000d80 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fbe0 	bl	8000d80 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e215      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x110>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d069      	beq.n	80016be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ea:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b4d      	ldr	r3, [pc, #308]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x190>
 8001602:	4b4a      	ldr	r3, [pc, #296]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x17a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1e9      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	493d      	ldr	r1, [pc, #244]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e040      	b.n	80016be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb96 	bl	8000d80 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fb92 	bl	8000d80 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1c7      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b30      	ldr	r3, [pc, #192]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4929      	ldr	r1, [pc, #164]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
 800168a:	e018      	b.n	80016be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb72 	bl	8000d80 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb6e 	bl	8000d80 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1a3      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d038      	beq.n	800173c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d019      	beq.n	8001706 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d6:	4a15      	ldr	r2, [pc, #84]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fb4f 	bl	8000d80 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb4b 	bl	8000d80 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e180      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_RCC_OscConfig+0x280>)
 80016fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x23a>
 8001704:	e01a      	b.n	800173c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x280>)
 8001708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x280>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fb35 	bl	8000d80 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fb31 	bl	8000d80 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d903      	bls.n	8001730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e166      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
 800172c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001730:	4b92      	ldr	r3, [pc, #584]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80a4 	beq.w	8001892 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10d      	bne.n	8001772 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b89      	ldr	r3, [pc, #548]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a88      	ldr	r2, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b86      	ldr	r3, [pc, #536]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	4b83      	ldr	r3, [pc, #524]	; (8001980 <HAL_RCC_OscConfig+0x4d4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800177e:	4b80      	ldr	r3, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x4d4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7f      	ldr	r2, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x4d4>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff faf9 	bl	8000d80 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff faf5 	bl	8000d80 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b64      	cmp	r3, #100	; 0x64
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e12a      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a4:	4b76      	ldr	r3, [pc, #472]	; (8001980 <HAL_RCC_OscConfig+0x4d4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x31a>
 80017b8:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	4a6f      	ldr	r2, [pc, #444]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	; 0x70
 80017c4:	e02d      	b.n	8001822 <HAL_RCC_OscConfig+0x376>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x33c>
 80017ce:	4b6b      	ldr	r3, [pc, #428]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a6a      	ldr	r2, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4a67      	ldr	r2, [pc, #412]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	6713      	str	r3, [r2, #112]	; 0x70
 80017e6:	e01c      	b.n	8001822 <HAL_RCC_OscConfig+0x376>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x35e>
 80017f0:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a61      	ldr	r2, [pc, #388]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	4a5e      	ldr	r2, [pc, #376]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6713      	str	r3, [r2, #112]	; 0x70
 8001808:	e00b      	b.n	8001822 <HAL_RCC_OscConfig+0x376>
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a5b      	ldr	r2, [pc, #364]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d015      	beq.n	8001856 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182a:	f7ff faa9 	bl	8000d80 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	e00a      	b.n	8001848 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001832:	f7ff faa5 	bl	8000d80 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001840:	4293      	cmp	r3, r2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0d8      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ee      	beq.n	8001832 <HAL_RCC_OscConfig+0x386>
 8001854:	e014      	b.n	8001880 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fa93 	bl	8000d80 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fa8f 	bl	8000d80 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0c2      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ee      	bne.n	800185e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d105      	bne.n	8001892 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a3c      	ldr	r2, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800188c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80ae 	beq.w	80019f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d06d      	beq.n	8001984 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d14b      	bne.n	8001948 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a31      	ldr	r2, [pc, #196]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80018b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff fa60 	bl	8000d80 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fa5c 	bl	8000d80 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e091      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	4b29      	ldr	r3, [pc, #164]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	071b      	lsls	r3, r3, #28
 800190e:	491b      	ldr	r1, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001910:	4313      	orrs	r3, r2
 8001912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fa2e 	bl	8000d80 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fa2a 	bl	8000d80 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e05f      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x47c>
 8001946:	e057      	b.n	80019f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 800194e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff fa14 	bl	8000d80 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fa10 	bl	8000d80 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_RCC_OscConfig+0x4d0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x4b0>
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x54c>
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_RCC_OscConfig+0x558>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d030      	beq.n	80019f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d129      	bne.n	80019f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d122      	bne.n	80019f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019bc:	4293      	cmp	r3, r2
 80019be:	d119      	bne.n	80019f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	3b01      	subs	r3, #1
 80019ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d10f      	bne.n	80019f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0d0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	4965      	ldr	r1, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d040      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e073      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001afc:	f7ff f940 	bl	8000d80 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f93c 	bl	8000d80 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e053      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d210      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 020f 	bic.w	r2, r3, #15
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1d4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f89c 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08004308 	.word	0x08004308
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be4:	b090      	sub	sp, #64	; 0x40
 8001be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
 8001bec:	2300      	movs	r3, #0
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d00d      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x40>
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f200 80a1 	bhi.w	8001d4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c12:	e09b      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c18:	e09b      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1a:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c1e:	e098      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c2a:	4b4d      	ldr	r3, [pc, #308]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d028      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	627a      	str	r2, [r7, #36]	; 0x24
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c4c:	fb03 f201 	mul.w	r2, r3, r1
 8001c50:	2300      	movs	r3, #0
 8001c52:	fb00 f303 	mul.w	r3, r0, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c60:	460a      	mov	r2, r1
 8001c62:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	4413      	add	r3, r2
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	61fa      	str	r2, [r7, #28]
 8001c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c7a:	f7fe fb39 	bl	80002f0 <__aeabi_uldivmod>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4613      	mov	r3, r2
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c86:	e053      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	2200      	movs	r2, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	617a      	str	r2, [r7, #20]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c9a:	f04f 0b00 	mov.w	fp, #0
 8001c9e:	4652      	mov	r2, sl
 8001ca0:	465b      	mov	r3, fp
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	0159      	lsls	r1, r3, #5
 8001cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb0:	0150      	lsls	r0, r2, #5
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001cba:	eb63 090b 	sbc.w	r9, r3, fp
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cd2:	ebb2 0408 	subs.w	r4, r2, r8
 8001cd6:	eb63 0509 	sbc.w	r5, r3, r9
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	00eb      	lsls	r3, r5, #3
 8001ce4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce8:	00e2      	lsls	r2, r4, #3
 8001cea:	4614      	mov	r4, r2
 8001cec:	461d      	mov	r5, r3
 8001cee:	eb14 030a 	adds.w	r3, r4, sl
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	eb45 030b 	adc.w	r3, r5, fp
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d24:	f7fe fae4 	bl	80002f0 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3740      	adds	r7, #64	; 0x40
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	017d7840 	.word	0x017d7840

08001d6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08004318 	.word	0x08004318

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db0:	f7ff ffdc 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0b5b      	lsrs	r3, r3, #13
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08004318 	.word	0x08004318

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dfc:	4b69      	ldr	r3, [pc, #420]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e06:	6093      	str	r3, [r2, #8]
 8001e08:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	4964      	ldr	r1, [pc, #400]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d017      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	4959      	ldr	r1, [pc, #356]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d017      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	494a      	ldr	r1, [pc, #296]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e88:	d101      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 808b 	beq.w	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a34      	ldr	r2, [pc, #208]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001edc:	f7fe ff50 	bl	8000d80 <HAL_GetTick>
 8001ee0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee4:	f7fe ff4c 	bl	8000d80 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e38f      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d035      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d02e      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f20:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d114      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff14 	bl	8000d80 <HAL_GetTick>
 8001f58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff10 	bl	8000d80 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e351      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ee      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f8a:	d111      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	4901      	ldr	r1, [pc, #4]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	0ffffcff 	.word	0x0ffffcff
 8001fb0:	4bac      	ldr	r3, [pc, #688]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4aab      	ldr	r2, [pc, #684]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	4ba9      	ldr	r3, [pc, #676]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	49a6      	ldr	r1, [pc, #664]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001fda:	4ba2      	ldr	r3, [pc, #648]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe0:	4aa0      	ldr	r2, [pc, #640]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001fea:	4b9e      	ldr	r3, [pc, #632]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	499b      	ldr	r1, [pc, #620]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002008:	4b96      	ldr	r3, [pc, #600]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002016:	4993      	ldr	r1, [pc, #588]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002018:	4313      	orrs	r3, r2
 800201a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800202a:	4b8e      	ldr	r3, [pc, #568]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002038:	498a      	ldr	r1, [pc, #552]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800204c:	4b85      	ldr	r3, [pc, #532]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205a:	4982      	ldr	r1, [pc, #520]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4979      	ldr	r1, [pc, #484]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00a      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002090:	4b74      	ldr	r3, [pc, #464]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4971      	ldr	r1, [pc, #452]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f023 020c 	bic.w	r2, r3, #12
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	4968      	ldr	r1, [pc, #416]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4960      	ldr	r1, [pc, #384]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020f6:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	4957      	ldr	r1, [pc, #348]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002118:	4b52      	ldr	r3, [pc, #328]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	494f      	ldr	r1, [pc, #316]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	4946      	ldr	r1, [pc, #280]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	4935      	ldr	r1, [pc, #212]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ae:	492d      	ldr	r1, [pc, #180]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d011      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d0:	4924      	ldr	r1, [pc, #144]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e0:	d101      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002210:	4914      	ldr	r1, [pc, #80]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00f      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002258:	4902      	ldr	r1, [pc, #8]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002260:	e002      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00b      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002274:	4b8a      	ldr	r3, [pc, #552]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800227a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	4986      	ldr	r1, [pc, #536]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a8:	497d      	ldr	r1, [pc, #500]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d006      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80d6 	beq.w	8002470 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a75      	ldr	r2, [pc, #468]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d0:	f7fe fd56 	bl	8000d80 <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022d8:	f7fe fd52 	bl	8000d80 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e195      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022ea:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d021      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11d      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002318:	4b61      	ldr	r3, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800231a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231e:	0e1b      	lsrs	r3, r3, #24
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4958      	ldr	r1, [pc, #352]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002364:	2b00      	cmp	r3, #0
 8002366:	d02e      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002370:	d129      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002372:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002380:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	493e      	ldr	r1, [pc, #248]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023ae:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023b4:	f023 021f 	bic.w	r2, r3, #31
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	3b01      	subs	r3, #1
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01d      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d8:	0e1b      	lsrs	r3, r3, #24
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e6:	0f1b      	lsrs	r3, r3, #28
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	019a      	lsls	r2, r3, #6
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	4926      	ldr	r1, [pc, #152]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d011      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	019a      	lsls	r2, r3, #6
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	491a      	ldr	r1, [pc, #104]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800244a:	f7fe fc99 	bl	8000d80 <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002452:	f7fe fc95 	bl	8000d80 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	; 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0d8      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	f040 80ce 	bne.w	8002614 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800247e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002484:	f7fe fc7c 	bl	8000d80 <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800248a:	e00b      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800248c:	f7fe fc78 	bl	8000d80 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d904      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e0bb      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b0:	d0ec      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02e      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d12a      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	0f1b      	lsrs	r3, r3, #28
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	019a      	lsls	r2, r3, #6
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	431a      	orrs	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	4944      	ldr	r1, [pc, #272]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002516:	4b42      	ldr	r3, [pc, #264]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	493d      	ldr	r1, [pc, #244]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d022      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002544:	d11d      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	0e1b      	lsrs	r3, r3, #24
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	0f1b      	lsrs	r3, r3, #28
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	019a      	lsls	r2, r3, #6
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	431a      	orrs	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	071b      	lsls	r3, r3, #28
 800257a:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d028      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	0e1b      	lsrs	r3, r3, #24
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	019a      	lsls	r2, r3, #6
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	431a      	orrs	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	061b      	lsls	r3, r3, #24
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	071b      	lsls	r3, r3, #28
 80025c2:	4917      	ldr	r1, [pc, #92]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	4911      	ldr	r1, [pc, #68]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fbc8 	bl	8000d80 <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025f4:	f7fe fbc4 	bl	8000d80 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e007      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002612:	d1ef      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e049      	b.n	80026ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe f9ec 	bl	8000a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3304      	adds	r3, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f000 faca 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d001      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e054      	b.n	8002796 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a26      	ldr	r2, [pc, #152]	; (80027a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d01d      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_TIM_Base_Start_IT+0xd8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x80>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_TIM_Base_Start_IT+0xe8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d115      	bne.n	8002780 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_TIM_Base_Start_IT+0xec>)
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b06      	cmp	r3, #6
 8002764:	d015      	beq.n	8002792 <HAL_TIM_Base_Start_IT+0xbe>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d011      	beq.n	8002792 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	e008      	b.n	8002792 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e000      	b.n	8002794 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800
 80027b0:	40000c00 	.word	0x40000c00
 80027b4:	40010400 	.word	0x40010400
 80027b8:	40014000 	.word	0x40014000
 80027bc:	40001800 	.word	0x40001800
 80027c0:	00010007 	.word	0x00010007

080027c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d122      	bne.n	8002820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d11b      	bne.n	8002820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0202 	mvn.w	r2, #2
 80027f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f9da 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 800280c:	e005      	b.n	800281a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9cc 	bl	8002bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f9dd 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b04      	cmp	r3, #4
 800282c:	d122      	bne.n	8002874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b04      	cmp	r3, #4
 800283a:	d11b      	bne.n	8002874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0204 	mvn.w	r2, #4
 8002844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9b0 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 8002860:	e005      	b.n	800286e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f9a2 	bl	8002bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9b3 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b08      	cmp	r3, #8
 8002880:	d122      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b08      	cmp	r3, #8
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0208 	mvn.w	r2, #8
 8002898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2204      	movs	r2, #4
 800289e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f986 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 80028b4:	e005      	b.n	80028c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f978 	bl	8002bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f989 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0210 	mvn.w	r2, #16
 80028ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2208      	movs	r2, #8
 80028f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f95c 	bl	8002bc0 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f94e 	bl	8002bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f95f 	bl	8002bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0201 	mvn.w	r2, #1
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f928 	bl	8002b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b80      	cmp	r3, #128	; 0x80
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb16 	bl	8002fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002982:	d10e      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d107      	bne.n	80029a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fb09 	bl	8002fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d10e      	bne.n	80029ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d107      	bne.n	80029ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f90d 	bl	8002be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d10e      	bne.n	80029fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d107      	bne.n	80029fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f06f 0220 	mvn.w	r2, #32
 80029f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fac9 	bl	8002f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIM_ConfigClockSource+0x1c>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0b4      	b.n	8002b8a <HAL_TIM_ConfigClockSource+0x186>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	4b56      	ldr	r3, [pc, #344]	; (8002b94 <HAL_TIM_ConfigClockSource+0x190>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a58:	d03e      	beq.n	8002ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8002a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5e:	f200 8087 	bhi.w	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	f000 8086 	beq.w	8002b76 <HAL_TIM_ConfigClockSource+0x172>
 8002a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6e:	d87f      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b70      	cmp	r3, #112	; 0x70
 8002a72:	d01a      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0xa6>
 8002a74:	2b70      	cmp	r3, #112	; 0x70
 8002a76:	d87b      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b60      	cmp	r3, #96	; 0x60
 8002a7a:	d050      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x11a>
 8002a7c:	2b60      	cmp	r3, #96	; 0x60
 8002a7e:	d877      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a80:	2b50      	cmp	r3, #80	; 0x50
 8002a82:	d03c      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0xfa>
 8002a84:	2b50      	cmp	r3, #80	; 0x50
 8002a86:	d873      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d058      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x13a>
 8002a8c:	2b40      	cmp	r3, #64	; 0x40
 8002a8e:	d86f      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b30      	cmp	r3, #48	; 0x30
 8002a92:	d064      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002a94:	2b30      	cmp	r3, #48	; 0x30
 8002a96:	d86b      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d060      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d867      	bhi.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d05c      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d05a      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0x15a>
 8002aa8:	e062      	b.n	8002b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aba:	f000 f9b9 	bl	8002e30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	609a      	str	r2, [r3, #8]
      break;
 8002ad6:	e04f      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ae8:	f000 f9a2 	bl	8002e30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afa:	609a      	str	r2, [r3, #8]
      break;
 8002afc:	e03c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f000 f916 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2150      	movs	r1, #80	; 0x50
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f96f 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e02c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f000 f935 	bl	8002d9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2160      	movs	r1, #96	; 0x60
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f95f 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e01c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f000 f8f6 	bl	8002d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2140      	movs	r1, #64	; 0x40
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f94f 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002b5c:	e00c      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f000 f946 	bl	8002dfa <TIM_ITRx_SetConfig>
      break;
 8002b6e:	e003      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      break;
 8002b74:	e000      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	fffeff88 	.word	0xfffeff88

08002b98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3d      	ldr	r2, [pc, #244]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c5c:	d027      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d023      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d017      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a27      	ldr	r2, [pc, #156]	; (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a25      	ldr	r2, [pc, #148]	; (8002d30 <TIM_Base_SetConfig+0x134>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <TIM_Base_SetConfig+0x138>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <TIM_Base_SetConfig+0x13c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0xf8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <TIM_Base_SetConfig+0x124>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	615a      	str	r2, [r3, #20]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40000400 	.word	0x40000400
 8002d18:	40000800 	.word	0x40000800
 8002d1c:	40000c00 	.word	0x40000c00
 8002d20:	40010400 	.word	0x40010400
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800
 8002d30:	40001800 	.word	0x40001800
 8002d34:	40001c00 	.word	0x40001c00
 8002d38:	40002000 	.word	0x40002000

08002d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0201 	bic.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f023 030a 	bic.w	r3, r3, #10
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b087      	sub	sp, #28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0210 	bic.w	r2, r3, #16
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	031b      	lsls	r3, r3, #12
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	621a      	str	r2, [r3, #32]
}
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f043 0307 	orr.w	r3, r3, #7
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	021a      	lsls	r2, r3, #8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e06d      	b.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a30      	ldr	r2, [pc, #192]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ec2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d01d      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10c      	bne.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40010400 	.word	0x40010400
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40000c00 	.word	0x40000c00
 8002f84:	40014000 	.word	0x40014000
 8002f88:	40001800 	.word	0x40001800

08002f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e040      	b.n	800305c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fd5c 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8b0 	bl	800316c <UART_SetConfig>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e022      	b.n	800305c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb08 	bl	8003634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb8f 	bl	8003778 <UART_CheckIdleState>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003078:	2b20      	cmp	r3, #32
 800307a:	d171      	bne.n	8003160 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Transmit+0x24>
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e06a      	b.n	8003162 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2221      	movs	r2, #33	; 0x21
 8003098:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309a:	f7fd fe71 	bl	8000d80 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x68>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d4:	e02c      	b.n	8003130 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fb96 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e038      	b.n	8003162 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e007      	b.n	800311e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1cc      	bne.n	80030d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2200      	movs	r2, #0
 8003144:	2140      	movs	r1, #64	; 0x40
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fb63 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e005      	b.n	8003162 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4ba6      	ldr	r3, [pc, #664]	; (8003430 <UART_SetConfig+0x2c4>)
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a94      	ldr	r2, [pc, #592]	; (8003434 <UART_SetConfig+0x2c8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d120      	bne.n	800322a <UART_SetConfig+0xbe>
 80031e8:	4b93      	ldr	r3, [pc, #588]	; (8003438 <UART_SetConfig+0x2cc>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d816      	bhi.n	8003224 <UART_SetConfig+0xb8>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x90>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	08003219 	.word	0x08003219
 8003204:	08003213 	.word	0x08003213
 8003208:	0800321f 	.word	0x0800321f
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e150      	b.n	80034b4 <UART_SetConfig+0x348>
 8003212:	2302      	movs	r3, #2
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e14d      	b.n	80034b4 <UART_SetConfig+0x348>
 8003218:	2304      	movs	r3, #4
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e14a      	b.n	80034b4 <UART_SetConfig+0x348>
 800321e:	2308      	movs	r3, #8
 8003220:	77fb      	strb	r3, [r7, #31]
 8003222:	e147      	b.n	80034b4 <UART_SetConfig+0x348>
 8003224:	2310      	movs	r3, #16
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e144      	b.n	80034b4 <UART_SetConfig+0x348>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a83      	ldr	r2, [pc, #524]	; (800343c <UART_SetConfig+0x2d0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d132      	bne.n	800329a <UART_SetConfig+0x12e>
 8003234:	4b80      	ldr	r3, [pc, #512]	; (8003438 <UART_SetConfig+0x2cc>)
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d828      	bhi.n	8003294 <UART_SetConfig+0x128>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0xdc>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003295 	.word	0x08003295
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003289 	.word	0x08003289
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	08003283 	.word	0x08003283
 800326c:	08003295 	.word	0x08003295
 8003270:	08003295 	.word	0x08003295
 8003274:	08003295 	.word	0x08003295
 8003278:	0800328f 	.word	0x0800328f
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e118      	b.n	80034b4 <UART_SetConfig+0x348>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e115      	b.n	80034b4 <UART_SetConfig+0x348>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e112      	b.n	80034b4 <UART_SetConfig+0x348>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e10f      	b.n	80034b4 <UART_SetConfig+0x348>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e10c      	b.n	80034b4 <UART_SetConfig+0x348>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a68      	ldr	r2, [pc, #416]	; (8003440 <UART_SetConfig+0x2d4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d120      	bne.n	80032e6 <UART_SetConfig+0x17a>
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <UART_SetConfig+0x2cc>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ae:	2b30      	cmp	r3, #48	; 0x30
 80032b0:	d013      	beq.n	80032da <UART_SetConfig+0x16e>
 80032b2:	2b30      	cmp	r3, #48	; 0x30
 80032b4:	d814      	bhi.n	80032e0 <UART_SetConfig+0x174>
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d009      	beq.n	80032ce <UART_SetConfig+0x162>
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d810      	bhi.n	80032e0 <UART_SetConfig+0x174>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x15c>
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d006      	beq.n	80032d4 <UART_SetConfig+0x168>
 80032c6:	e00b      	b.n	80032e0 <UART_SetConfig+0x174>
 80032c8:	2300      	movs	r3, #0
 80032ca:	77fb      	strb	r3, [r7, #31]
 80032cc:	e0f2      	b.n	80034b4 <UART_SetConfig+0x348>
 80032ce:	2302      	movs	r3, #2
 80032d0:	77fb      	strb	r3, [r7, #31]
 80032d2:	e0ef      	b.n	80034b4 <UART_SetConfig+0x348>
 80032d4:	2304      	movs	r3, #4
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e0ec      	b.n	80034b4 <UART_SetConfig+0x348>
 80032da:	2308      	movs	r3, #8
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e0e9      	b.n	80034b4 <UART_SetConfig+0x348>
 80032e0:	2310      	movs	r3, #16
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e0e6      	b.n	80034b4 <UART_SetConfig+0x348>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a56      	ldr	r2, [pc, #344]	; (8003444 <UART_SetConfig+0x2d8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d120      	bne.n	8003332 <UART_SetConfig+0x1c6>
 80032f0:	4b51      	ldr	r3, [pc, #324]	; (8003438 <UART_SetConfig+0x2cc>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032fa:	2bc0      	cmp	r3, #192	; 0xc0
 80032fc:	d013      	beq.n	8003326 <UART_SetConfig+0x1ba>
 80032fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003300:	d814      	bhi.n	800332c <UART_SetConfig+0x1c0>
 8003302:	2b80      	cmp	r3, #128	; 0x80
 8003304:	d009      	beq.n	800331a <UART_SetConfig+0x1ae>
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d810      	bhi.n	800332c <UART_SetConfig+0x1c0>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <UART_SetConfig+0x1a8>
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d006      	beq.n	8003320 <UART_SetConfig+0x1b4>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x1c0>
 8003314:	2300      	movs	r3, #0
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e0cc      	b.n	80034b4 <UART_SetConfig+0x348>
 800331a:	2302      	movs	r3, #2
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	e0c9      	b.n	80034b4 <UART_SetConfig+0x348>
 8003320:	2304      	movs	r3, #4
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e0c6      	b.n	80034b4 <UART_SetConfig+0x348>
 8003326:	2308      	movs	r3, #8
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e0c3      	b.n	80034b4 <UART_SetConfig+0x348>
 800332c:	2310      	movs	r3, #16
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e0c0      	b.n	80034b4 <UART_SetConfig+0x348>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a44      	ldr	r2, [pc, #272]	; (8003448 <UART_SetConfig+0x2dc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d125      	bne.n	8003388 <UART_SetConfig+0x21c>
 800333c:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <UART_SetConfig+0x2cc>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334a:	d017      	beq.n	800337c <UART_SetConfig+0x210>
 800334c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003350:	d817      	bhi.n	8003382 <UART_SetConfig+0x216>
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d00b      	beq.n	8003370 <UART_SetConfig+0x204>
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d811      	bhi.n	8003382 <UART_SetConfig+0x216>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <UART_SetConfig+0x1fe>
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	d006      	beq.n	8003376 <UART_SetConfig+0x20a>
 8003368:	e00b      	b.n	8003382 <UART_SetConfig+0x216>
 800336a:	2300      	movs	r3, #0
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e0a1      	b.n	80034b4 <UART_SetConfig+0x348>
 8003370:	2302      	movs	r3, #2
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e09e      	b.n	80034b4 <UART_SetConfig+0x348>
 8003376:	2304      	movs	r3, #4
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e09b      	b.n	80034b4 <UART_SetConfig+0x348>
 800337c:	2308      	movs	r3, #8
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e098      	b.n	80034b4 <UART_SetConfig+0x348>
 8003382:	2310      	movs	r3, #16
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e095      	b.n	80034b4 <UART_SetConfig+0x348>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2f      	ldr	r2, [pc, #188]	; (800344c <UART_SetConfig+0x2e0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d125      	bne.n	80033de <UART_SetConfig+0x272>
 8003392:	4b29      	ldr	r3, [pc, #164]	; (8003438 <UART_SetConfig+0x2cc>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800339c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a0:	d017      	beq.n	80033d2 <UART_SetConfig+0x266>
 80033a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a6:	d817      	bhi.n	80033d8 <UART_SetConfig+0x26c>
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d00b      	beq.n	80033c6 <UART_SetConfig+0x25a>
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	d811      	bhi.n	80033d8 <UART_SetConfig+0x26c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <UART_SetConfig+0x254>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d006      	beq.n	80033cc <UART_SetConfig+0x260>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x26c>
 80033c0:	2301      	movs	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
 80033c4:	e076      	b.n	80034b4 <UART_SetConfig+0x348>
 80033c6:	2302      	movs	r3, #2
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e073      	b.n	80034b4 <UART_SetConfig+0x348>
 80033cc:	2304      	movs	r3, #4
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e070      	b.n	80034b4 <UART_SetConfig+0x348>
 80033d2:	2308      	movs	r3, #8
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e06d      	b.n	80034b4 <UART_SetConfig+0x348>
 80033d8:	2310      	movs	r3, #16
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e06a      	b.n	80034b4 <UART_SetConfig+0x348>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <UART_SetConfig+0x2e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d138      	bne.n	800345a <UART_SetConfig+0x2ee>
 80033e8:	4b13      	ldr	r3, [pc, #76]	; (8003438 <UART_SetConfig+0x2cc>)
 80033ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033f6:	d017      	beq.n	8003428 <UART_SetConfig+0x2bc>
 80033f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033fc:	d82a      	bhi.n	8003454 <UART_SetConfig+0x2e8>
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	d00b      	beq.n	800341c <UART_SetConfig+0x2b0>
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d824      	bhi.n	8003454 <UART_SetConfig+0x2e8>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <UART_SetConfig+0x2aa>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d006      	beq.n	8003422 <UART_SetConfig+0x2b6>
 8003414:	e01e      	b.n	8003454 <UART_SetConfig+0x2e8>
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e04b      	b.n	80034b4 <UART_SetConfig+0x348>
 800341c:	2302      	movs	r3, #2
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e048      	b.n	80034b4 <UART_SetConfig+0x348>
 8003422:	2304      	movs	r3, #4
 8003424:	77fb      	strb	r3, [r7, #31]
 8003426:	e045      	b.n	80034b4 <UART_SetConfig+0x348>
 8003428:	2308      	movs	r3, #8
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e042      	b.n	80034b4 <UART_SetConfig+0x348>
 800342e:	bf00      	nop
 8003430:	efff69f3 	.word	0xefff69f3
 8003434:	40011000 	.word	0x40011000
 8003438:	40023800 	.word	0x40023800
 800343c:	40004400 	.word	0x40004400
 8003440:	40004800 	.word	0x40004800
 8003444:	40004c00 	.word	0x40004c00
 8003448:	40005000 	.word	0x40005000
 800344c:	40011400 	.word	0x40011400
 8003450:	40007800 	.word	0x40007800
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e02c      	b.n	80034b4 <UART_SetConfig+0x348>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a72      	ldr	r2, [pc, #456]	; (8003628 <UART_SetConfig+0x4bc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d125      	bne.n	80034b0 <UART_SetConfig+0x344>
 8003464:	4b71      	ldr	r3, [pc, #452]	; (800362c <UART_SetConfig+0x4c0>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800346e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003472:	d017      	beq.n	80034a4 <UART_SetConfig+0x338>
 8003474:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003478:	d817      	bhi.n	80034aa <UART_SetConfig+0x33e>
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d00b      	beq.n	8003498 <UART_SetConfig+0x32c>
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	d811      	bhi.n	80034aa <UART_SetConfig+0x33e>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <UART_SetConfig+0x326>
 800348a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800348e:	d006      	beq.n	800349e <UART_SetConfig+0x332>
 8003490:	e00b      	b.n	80034aa <UART_SetConfig+0x33e>
 8003492:	2300      	movs	r3, #0
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e00d      	b.n	80034b4 <UART_SetConfig+0x348>
 8003498:	2302      	movs	r3, #2
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e00a      	b.n	80034b4 <UART_SetConfig+0x348>
 800349e:	2304      	movs	r3, #4
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e007      	b.n	80034b4 <UART_SetConfig+0x348>
 80034a4:	2308      	movs	r3, #8
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e004      	b.n	80034b4 <UART_SetConfig+0x348>
 80034aa:	2310      	movs	r3, #16
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e001      	b.n	80034b4 <UART_SetConfig+0x348>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034bc:	d15b      	bne.n	8003576 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d828      	bhi.n	8003516 <UART_SetConfig+0x3aa>
 80034c4:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0x360>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003517 	.word	0x08003517
 80034e4:	08003517 	.word	0x08003517
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fc48 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80034f4:	61b8      	str	r0, [r7, #24]
        break;
 80034f6:	e013      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7fe fc58 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 80034fc:	61b8      	str	r0, [r7, #24]
        break;
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b4b      	ldr	r3, [pc, #300]	; (8003630 <UART_SetConfig+0x4c4>)
 8003502:	61bb      	str	r3, [r7, #24]
        break;
 8003504:	e00c      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe fb6b 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 800350a:	61b8      	str	r0, [r7, #24]
        break;
 800350c:	e008      	b.n	8003520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e004      	b.n	8003520 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	77bb      	strb	r3, [r7, #30]
        break;
 800351e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d074      	beq.n	8003610 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d916      	bls.n	8003570 <UART_SetConfig+0x404>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d212      	bcs.n	8003570 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f023 030f 	bic.w	r3, r3, #15
 8003552:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	b29b      	uxth	r3, r3
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	b29a      	uxth	r2, r3
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	4313      	orrs	r3, r2
 8003564:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	89fa      	ldrh	r2, [r7, #14]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	e04f      	b.n	8003610 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	77bb      	strb	r3, [r7, #30]
 8003574:	e04c      	b.n	8003610 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d828      	bhi.n	80035ce <UART_SetConfig+0x462>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0x418>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035a9 	.word	0x080035a9
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035b9 	.word	0x080035b9
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035bf 	.word	0x080035bf
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035cf 	.word	0x080035cf
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7fe fbec 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 80035ac:	61b8      	str	r0, [r7, #24]
        break;
 80035ae:	e013      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b0:	f7fe fbfc 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 80035b4:	61b8      	str	r0, [r7, #24]
        break;
 80035b6:	e00f      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <UART_SetConfig+0x4c4>)
 80035ba:	61bb      	str	r3, [r7, #24]
        break;
 80035bc:	e00c      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fb0f 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 80035c2:	61b8      	str	r0, [r7, #24]
        break;
 80035c4:	e008      	b.n	80035d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ca:	61bb      	str	r3, [r7, #24]
        break;
 80035cc:	e004      	b.n	80035d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	77bb      	strb	r3, [r7, #30]
        break;
 80035d6:	bf00      	nop
    }

    if (pclk != 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	085a      	lsrs	r2, r3, #1
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	441a      	add	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b0f      	cmp	r3, #15
 80035f6:	d909      	bls.n	800360c <UART_SetConfig+0x4a0>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fe:	d205      	bcs.n	800360c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	e001      	b.n	8003610 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800361c:	7fbb      	ldrb	r3, [r7, #30]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40007c00 	.word	0x40007c00
 800362c:	40023800 	.word	0x40023800
 8003630:	00f42400 	.word	0x00f42400

08003634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00a      	beq.n	8003708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01a      	beq.n	800374a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003732:	d10a      	bne.n	800374a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af02      	add	r7, sp, #8
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003788:	f7fd fafa 	bl	8000d80 <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d10e      	bne.n	80037ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800379c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f831 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e027      	b.n	800380a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d10e      	bne.n	80037e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f81b 	bl	8003812 <UART_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e011      	b.n	800380a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b09c      	sub	sp, #112	; 0x70
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003822:	e0a7      	b.n	8003974 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800382a:	f000 80a3 	beq.w	8003974 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fd faa7 	bl	8000d80 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <UART_WaitOnFlagUntilTimeout+0x32>
 800383e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003840:	2b00      	cmp	r3, #0
 8003842:	d13f      	bne.n	80038c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003858:	667b      	str	r3, [r7, #100]	; 0x64
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003862:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003864:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e6      	bne.n	8003844 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3308      	adds	r3, #8
 800387c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003896:	64ba      	str	r2, [r7, #72]	; 0x48
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800389c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e068      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d050      	beq.n	8003974 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d148      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	637b      	str	r3, [r7, #52]	; 0x34
 800390c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e6      	bne.n	80038ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	613b      	str	r3, [r7, #16]
   return(result);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	66bb      	str	r3, [r7, #104]	; 0x68
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3308      	adds	r3, #8
 800393c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800393e:	623a      	str	r2, [r7, #32]
 8003940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	69f9      	ldr	r1, [r7, #28]
 8003944:	6a3a      	ldr	r2, [r7, #32]
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	61bb      	str	r3, [r7, #24]
   return(result);
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e010      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	429a      	cmp	r2, r3
 8003990:	f43f af48 	beq.w	8003824 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3770      	adds	r7, #112	; 0x70
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <siprintf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b500      	push	{lr}
 80039a4:	b09c      	sub	sp, #112	; 0x70
 80039a6:	ab1d      	add	r3, sp, #116	; 0x74
 80039a8:	9002      	str	r0, [sp, #8]
 80039aa:	9006      	str	r0, [sp, #24]
 80039ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039b0:	4809      	ldr	r0, [pc, #36]	; (80039d8 <siprintf+0x38>)
 80039b2:	9107      	str	r1, [sp, #28]
 80039b4:	9104      	str	r1, [sp, #16]
 80039b6:	4909      	ldr	r1, [pc, #36]	; (80039dc <siprintf+0x3c>)
 80039b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039bc:	9105      	str	r1, [sp, #20]
 80039be:	6800      	ldr	r0, [r0, #0]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	a902      	add	r1, sp, #8
 80039c4:	f000 f89a 	bl	8003afc <_svfiprintf_r>
 80039c8:	9b02      	ldr	r3, [sp, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	b01c      	add	sp, #112	; 0x70
 80039d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039d4:	b003      	add	sp, #12
 80039d6:	4770      	bx	lr
 80039d8:	20000058 	.word	0x20000058
 80039dc:	ffff0208 	.word	0xffff0208

080039e0 <memset>:
 80039e0:	4402      	add	r2, r0
 80039e2:	4603      	mov	r3, r0
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d100      	bne.n	80039ea <memset+0xa>
 80039e8:	4770      	bx	lr
 80039ea:	f803 1b01 	strb.w	r1, [r3], #1
 80039ee:	e7f9      	b.n	80039e4 <memset+0x4>

080039f0 <__errno>:
 80039f0:	4b01      	ldr	r3, [pc, #4]	; (80039f8 <__errno+0x8>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000058 	.word	0x20000058

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4d0d      	ldr	r5, [pc, #52]	; (8003a34 <__libc_init_array+0x38>)
 8003a00:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <__libc_init_array+0x3c>)
 8003a02:	1b64      	subs	r4, r4, r5
 8003a04:	10a4      	asrs	r4, r4, #2
 8003a06:	2600      	movs	r6, #0
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	4d0b      	ldr	r5, [pc, #44]	; (8003a3c <__libc_init_array+0x40>)
 8003a0e:	4c0c      	ldr	r4, [pc, #48]	; (8003a40 <__libc_init_array+0x44>)
 8003a10:	f000 fc6a 	bl	80042e8 <_init>
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	2600      	movs	r6, #0
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	0800435c 	.word	0x0800435c
 8003a38:	0800435c 	.word	0x0800435c
 8003a3c:	0800435c 	.word	0x0800435c
 8003a40:	08004360 	.word	0x08004360

08003a44 <__retarget_lock_acquire_recursive>:
 8003a44:	4770      	bx	lr

08003a46 <__retarget_lock_release_recursive>:
 8003a46:	4770      	bx	lr

08003a48 <__ssputs_r>:
 8003a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	688e      	ldr	r6, [r1, #8]
 8003a4e:	461f      	mov	r7, r3
 8003a50:	42be      	cmp	r6, r7
 8003a52:	680b      	ldr	r3, [r1, #0]
 8003a54:	4682      	mov	sl, r0
 8003a56:	460c      	mov	r4, r1
 8003a58:	4690      	mov	r8, r2
 8003a5a:	d82c      	bhi.n	8003ab6 <__ssputs_r+0x6e>
 8003a5c:	898a      	ldrh	r2, [r1, #12]
 8003a5e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a62:	d026      	beq.n	8003ab2 <__ssputs_r+0x6a>
 8003a64:	6965      	ldr	r5, [r4, #20]
 8003a66:	6909      	ldr	r1, [r1, #16]
 8003a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a6c:	eba3 0901 	sub.w	r9, r3, r1
 8003a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a74:	1c7b      	adds	r3, r7, #1
 8003a76:	444b      	add	r3, r9
 8003a78:	106d      	asrs	r5, r5, #1
 8003a7a:	429d      	cmp	r5, r3
 8003a7c:	bf38      	it	cc
 8003a7e:	461d      	movcc	r5, r3
 8003a80:	0553      	lsls	r3, r2, #21
 8003a82:	d527      	bpl.n	8003ad4 <__ssputs_r+0x8c>
 8003a84:	4629      	mov	r1, r5
 8003a86:	f000 f957 	bl	8003d38 <_malloc_r>
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	b360      	cbz	r0, 8003ae8 <__ssputs_r+0xa0>
 8003a8e:	6921      	ldr	r1, [r4, #16]
 8003a90:	464a      	mov	r2, r9
 8003a92:	f000 fbc7 	bl	8004224 <memcpy>
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	6126      	str	r6, [r4, #16]
 8003aa4:	6165      	str	r5, [r4, #20]
 8003aa6:	444e      	add	r6, r9
 8003aa8:	eba5 0509 	sub.w	r5, r5, r9
 8003aac:	6026      	str	r6, [r4, #0]
 8003aae:	60a5      	str	r5, [r4, #8]
 8003ab0:	463e      	mov	r6, r7
 8003ab2:	42be      	cmp	r6, r7
 8003ab4:	d900      	bls.n	8003ab8 <__ssputs_r+0x70>
 8003ab6:	463e      	mov	r6, r7
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	4632      	mov	r2, r6
 8003abc:	4641      	mov	r1, r8
 8003abe:	f000 fb86 	bl	80041ce <memmove>
 8003ac2:	68a3      	ldr	r3, [r4, #8]
 8003ac4:	1b9b      	subs	r3, r3, r6
 8003ac6:	60a3      	str	r3, [r4, #8]
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	4433      	add	r3, r6
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	2000      	movs	r0, #0
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	462a      	mov	r2, r5
 8003ad6:	f000 fb4b 	bl	8004170 <_realloc_r>
 8003ada:	4606      	mov	r6, r0
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d1e0      	bne.n	8003aa2 <__ssputs_r+0x5a>
 8003ae0:	6921      	ldr	r1, [r4, #16]
 8003ae2:	4650      	mov	r0, sl
 8003ae4:	f000 fbac 	bl	8004240 <_free_r>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	f8ca 3000 	str.w	r3, [sl]
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003af4:	81a3      	strh	r3, [r4, #12]
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003afa:	e7e9      	b.n	8003ad0 <__ssputs_r+0x88>

08003afc <_svfiprintf_r>:
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	4698      	mov	r8, r3
 8003b02:	898b      	ldrh	r3, [r1, #12]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	b09d      	sub	sp, #116	; 0x74
 8003b08:	4607      	mov	r7, r0
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	4614      	mov	r4, r2
 8003b0e:	d50e      	bpl.n	8003b2e <_svfiprintf_r+0x32>
 8003b10:	690b      	ldr	r3, [r1, #16]
 8003b12:	b963      	cbnz	r3, 8003b2e <_svfiprintf_r+0x32>
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	f000 f90f 	bl	8003d38 <_malloc_r>
 8003b1a:	6028      	str	r0, [r5, #0]
 8003b1c:	6128      	str	r0, [r5, #16]
 8003b1e:	b920      	cbnz	r0, 8003b2a <_svfiprintf_r+0x2e>
 8003b20:	230c      	movs	r3, #12
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b28:	e0d0      	b.n	8003ccc <_svfiprintf_r+0x1d0>
 8003b2a:	2340      	movs	r3, #64	; 0x40
 8003b2c:	616b      	str	r3, [r5, #20]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9309      	str	r3, [sp, #36]	; 0x24
 8003b32:	2320      	movs	r3, #32
 8003b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b3c:	2330      	movs	r3, #48	; 0x30
 8003b3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ce4 <_svfiprintf_r+0x1e8>
 8003b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b46:	f04f 0901 	mov.w	r9, #1
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	469a      	mov	sl, r3
 8003b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b52:	b10a      	cbz	r2, 8003b58 <_svfiprintf_r+0x5c>
 8003b54:	2a25      	cmp	r2, #37	; 0x25
 8003b56:	d1f9      	bne.n	8003b4c <_svfiprintf_r+0x50>
 8003b58:	ebba 0b04 	subs.w	fp, sl, r4
 8003b5c:	d00b      	beq.n	8003b76 <_svfiprintf_r+0x7a>
 8003b5e:	465b      	mov	r3, fp
 8003b60:	4622      	mov	r2, r4
 8003b62:	4629      	mov	r1, r5
 8003b64:	4638      	mov	r0, r7
 8003b66:	f7ff ff6f 	bl	8003a48 <__ssputs_r>
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f000 80a9 	beq.w	8003cc2 <_svfiprintf_r+0x1c6>
 8003b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b72:	445a      	add	r2, fp
 8003b74:	9209      	str	r2, [sp, #36]	; 0x24
 8003b76:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80a1 	beq.w	8003cc2 <_svfiprintf_r+0x1c6>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b8a:	f10a 0a01 	add.w	sl, sl, #1
 8003b8e:	9304      	str	r3, [sp, #16]
 8003b90:	9307      	str	r3, [sp, #28]
 8003b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b96:	931a      	str	r3, [sp, #104]	; 0x68
 8003b98:	4654      	mov	r4, sl
 8003b9a:	2205      	movs	r2, #5
 8003b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba0:	4850      	ldr	r0, [pc, #320]	; (8003ce4 <_svfiprintf_r+0x1e8>)
 8003ba2:	f7fc fb55 	bl	8000250 <memchr>
 8003ba6:	9a04      	ldr	r2, [sp, #16]
 8003ba8:	b9d8      	cbnz	r0, 8003be2 <_svfiprintf_r+0xe6>
 8003baa:	06d0      	lsls	r0, r2, #27
 8003bac:	bf44      	itt	mi
 8003bae:	2320      	movmi	r3, #32
 8003bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bb4:	0711      	lsls	r1, r2, #28
 8003bb6:	bf44      	itt	mi
 8003bb8:	232b      	movmi	r3, #43	; 0x2b
 8003bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003bc4:	d015      	beq.n	8003bf2 <_svfiprintf_r+0xf6>
 8003bc6:	9a07      	ldr	r2, [sp, #28]
 8003bc8:	4654      	mov	r4, sl
 8003bca:	2000      	movs	r0, #0
 8003bcc:	f04f 0c0a 	mov.w	ip, #10
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bd6:	3b30      	subs	r3, #48	; 0x30
 8003bd8:	2b09      	cmp	r3, #9
 8003bda:	d94d      	bls.n	8003c78 <_svfiprintf_r+0x17c>
 8003bdc:	b1b0      	cbz	r0, 8003c0c <_svfiprintf_r+0x110>
 8003bde:	9207      	str	r2, [sp, #28]
 8003be0:	e014      	b.n	8003c0c <_svfiprintf_r+0x110>
 8003be2:	eba0 0308 	sub.w	r3, r0, r8
 8003be6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bea:	4313      	orrs	r3, r2
 8003bec:	9304      	str	r3, [sp, #16]
 8003bee:	46a2      	mov	sl, r4
 8003bf0:	e7d2      	b.n	8003b98 <_svfiprintf_r+0x9c>
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	1d19      	adds	r1, r3, #4
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	9103      	str	r1, [sp, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bfbb      	ittet	lt
 8003bfe:	425b      	neglt	r3, r3
 8003c00:	f042 0202 	orrlt.w	r2, r2, #2
 8003c04:	9307      	strge	r3, [sp, #28]
 8003c06:	9307      	strlt	r3, [sp, #28]
 8003c08:	bfb8      	it	lt
 8003c0a:	9204      	strlt	r2, [sp, #16]
 8003c0c:	7823      	ldrb	r3, [r4, #0]
 8003c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c10:	d10c      	bne.n	8003c2c <_svfiprintf_r+0x130>
 8003c12:	7863      	ldrb	r3, [r4, #1]
 8003c14:	2b2a      	cmp	r3, #42	; 0x2a
 8003c16:	d134      	bne.n	8003c82 <_svfiprintf_r+0x186>
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	1d1a      	adds	r2, r3, #4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	9203      	str	r2, [sp, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bfb8      	it	lt
 8003c24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003c28:	3402      	adds	r4, #2
 8003c2a:	9305      	str	r3, [sp, #20]
 8003c2c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003cf4 <_svfiprintf_r+0x1f8>
 8003c30:	7821      	ldrb	r1, [r4, #0]
 8003c32:	2203      	movs	r2, #3
 8003c34:	4650      	mov	r0, sl
 8003c36:	f7fc fb0b 	bl	8000250 <memchr>
 8003c3a:	b138      	cbz	r0, 8003c4c <_svfiprintf_r+0x150>
 8003c3c:	9b04      	ldr	r3, [sp, #16]
 8003c3e:	eba0 000a 	sub.w	r0, r0, sl
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	4082      	lsls	r2, r0
 8003c46:	4313      	orrs	r3, r2
 8003c48:	3401      	adds	r4, #1
 8003c4a:	9304      	str	r3, [sp, #16]
 8003c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c50:	4825      	ldr	r0, [pc, #148]	; (8003ce8 <_svfiprintf_r+0x1ec>)
 8003c52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c56:	2206      	movs	r2, #6
 8003c58:	f7fc fafa 	bl	8000250 <memchr>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d038      	beq.n	8003cd2 <_svfiprintf_r+0x1d6>
 8003c60:	4b22      	ldr	r3, [pc, #136]	; (8003cec <_svfiprintf_r+0x1f0>)
 8003c62:	bb1b      	cbnz	r3, 8003cac <_svfiprintf_r+0x1b0>
 8003c64:	9b03      	ldr	r3, [sp, #12]
 8003c66:	3307      	adds	r3, #7
 8003c68:	f023 0307 	bic.w	r3, r3, #7
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	9303      	str	r3, [sp, #12]
 8003c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c72:	4433      	add	r3, r6
 8003c74:	9309      	str	r3, [sp, #36]	; 0x24
 8003c76:	e768      	b.n	8003b4a <_svfiprintf_r+0x4e>
 8003c78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	2001      	movs	r0, #1
 8003c80:	e7a6      	b.n	8003bd0 <_svfiprintf_r+0xd4>
 8003c82:	2300      	movs	r3, #0
 8003c84:	3401      	adds	r4, #1
 8003c86:	9305      	str	r3, [sp, #20]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 0c0a 	mov.w	ip, #10
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c94:	3a30      	subs	r2, #48	; 0x30
 8003c96:	2a09      	cmp	r2, #9
 8003c98:	d903      	bls.n	8003ca2 <_svfiprintf_r+0x1a6>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0c6      	beq.n	8003c2c <_svfiprintf_r+0x130>
 8003c9e:	9105      	str	r1, [sp, #20]
 8003ca0:	e7c4      	b.n	8003c2c <_svfiprintf_r+0x130>
 8003ca2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e7f0      	b.n	8003c8e <_svfiprintf_r+0x192>
 8003cac:	ab03      	add	r3, sp, #12
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <_svfiprintf_r+0x1f4>)
 8003cb4:	a904      	add	r1, sp, #16
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f3af 8000 	nop.w
 8003cbc:	1c42      	adds	r2, r0, #1
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	d1d6      	bne.n	8003c70 <_svfiprintf_r+0x174>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	065b      	lsls	r3, r3, #25
 8003cc6:	f53f af2d 	bmi.w	8003b24 <_svfiprintf_r+0x28>
 8003cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ccc:	b01d      	add	sp, #116	; 0x74
 8003cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd2:	ab03      	add	r3, sp, #12
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	462a      	mov	r2, r5
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <_svfiprintf_r+0x1f4>)
 8003cda:	a904      	add	r1, sp, #16
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f000 f919 	bl	8003f14 <_printf_i>
 8003ce2:	e7eb      	b.n	8003cbc <_svfiprintf_r+0x1c0>
 8003ce4:	08004320 	.word	0x08004320
 8003ce8:	0800432a 	.word	0x0800432a
 8003cec:	00000000 	.word	0x00000000
 8003cf0:	08003a49 	.word	0x08003a49
 8003cf4:	08004326 	.word	0x08004326

08003cf8 <sbrk_aligned>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4e0e      	ldr	r6, [pc, #56]	; (8003d34 <sbrk_aligned+0x3c>)
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	6831      	ldr	r1, [r6, #0]
 8003d00:	4605      	mov	r5, r0
 8003d02:	b911      	cbnz	r1, 8003d0a <sbrk_aligned+0x12>
 8003d04:	f000 fa7e 	bl	8004204 <_sbrk_r>
 8003d08:	6030      	str	r0, [r6, #0]
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f000 fa79 	bl	8004204 <_sbrk_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	d00a      	beq.n	8003d2c <sbrk_aligned+0x34>
 8003d16:	1cc4      	adds	r4, r0, #3
 8003d18:	f024 0403 	bic.w	r4, r4, #3
 8003d1c:	42a0      	cmp	r0, r4
 8003d1e:	d007      	beq.n	8003d30 <sbrk_aligned+0x38>
 8003d20:	1a21      	subs	r1, r4, r0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f000 fa6e 	bl	8004204 <_sbrk_r>
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d101      	bne.n	8003d30 <sbrk_aligned+0x38>
 8003d2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d30:	4620      	mov	r0, r4
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	200002e4 	.word	0x200002e4

08003d38 <_malloc_r>:
 8003d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	1ccd      	adds	r5, r1, #3
 8003d3e:	f025 0503 	bic.w	r5, r5, #3
 8003d42:	3508      	adds	r5, #8
 8003d44:	2d0c      	cmp	r5, #12
 8003d46:	bf38      	it	cc
 8003d48:	250c      	movcc	r5, #12
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	4607      	mov	r7, r0
 8003d4e:	db01      	blt.n	8003d54 <_malloc_r+0x1c>
 8003d50:	42a9      	cmp	r1, r5
 8003d52:	d905      	bls.n	8003d60 <_malloc_r+0x28>
 8003d54:	230c      	movs	r3, #12
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	2600      	movs	r6, #0
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e34 <_malloc_r+0xfc>
 8003d64:	f000 f9f8 	bl	8004158 <__malloc_lock>
 8003d68:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	bb5c      	cbnz	r4, 8003dc8 <_malloc_r+0x90>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4638      	mov	r0, r7
 8003d74:	f7ff ffc0 	bl	8003cf8 <sbrk_aligned>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	d155      	bne.n	8003e2a <_malloc_r+0xf2>
 8003d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8003d82:	4626      	mov	r6, r4
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	d145      	bne.n	8003e14 <_malloc_r+0xdc>
 8003d88:	2c00      	cmp	r4, #0
 8003d8a:	d048      	beq.n	8003e1e <_malloc_r+0xe6>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4638      	mov	r0, r7
 8003d92:	eb04 0903 	add.w	r9, r4, r3
 8003d96:	f000 fa35 	bl	8004204 <_sbrk_r>
 8003d9a:	4581      	cmp	r9, r0
 8003d9c:	d13f      	bne.n	8003e1e <_malloc_r+0xe6>
 8003d9e:	6821      	ldr	r1, [r4, #0]
 8003da0:	1a6d      	subs	r5, r5, r1
 8003da2:	4629      	mov	r1, r5
 8003da4:	4638      	mov	r0, r7
 8003da6:	f7ff ffa7 	bl	8003cf8 <sbrk_aligned>
 8003daa:	3001      	adds	r0, #1
 8003dac:	d037      	beq.n	8003e1e <_malloc_r+0xe6>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	442b      	add	r3, r5
 8003db2:	6023      	str	r3, [r4, #0]
 8003db4:	f8d8 3000 	ldr.w	r3, [r8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d038      	beq.n	8003e2e <_malloc_r+0xf6>
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	42a2      	cmp	r2, r4
 8003dc0:	d12b      	bne.n	8003e1a <_malloc_r+0xe2>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	e00f      	b.n	8003de8 <_malloc_r+0xb0>
 8003dc8:	6822      	ldr	r2, [r4, #0]
 8003dca:	1b52      	subs	r2, r2, r5
 8003dcc:	d41f      	bmi.n	8003e0e <_malloc_r+0xd6>
 8003dce:	2a0b      	cmp	r2, #11
 8003dd0:	d917      	bls.n	8003e02 <_malloc_r+0xca>
 8003dd2:	1961      	adds	r1, r4, r5
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	6025      	str	r5, [r4, #0]
 8003dd8:	bf18      	it	ne
 8003dda:	6059      	strne	r1, [r3, #4]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	bf08      	it	eq
 8003de0:	f8c8 1000 	streq.w	r1, [r8]
 8003de4:	5162      	str	r2, [r4, r5]
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	4638      	mov	r0, r7
 8003dea:	f104 060b 	add.w	r6, r4, #11
 8003dee:	f000 f9b9 	bl	8004164 <__malloc_unlock>
 8003df2:	f026 0607 	bic.w	r6, r6, #7
 8003df6:	1d23      	adds	r3, r4, #4
 8003df8:	1af2      	subs	r2, r6, r3
 8003dfa:	d0ae      	beq.n	8003d5a <_malloc_r+0x22>
 8003dfc:	1b9b      	subs	r3, r3, r6
 8003dfe:	50a3      	str	r3, [r4, r2]
 8003e00:	e7ab      	b.n	8003d5a <_malloc_r+0x22>
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	6862      	ldr	r2, [r4, #4]
 8003e06:	d1dd      	bne.n	8003dc4 <_malloc_r+0x8c>
 8003e08:	f8c8 2000 	str.w	r2, [r8]
 8003e0c:	e7ec      	b.n	8003de8 <_malloc_r+0xb0>
 8003e0e:	4623      	mov	r3, r4
 8003e10:	6864      	ldr	r4, [r4, #4]
 8003e12:	e7ac      	b.n	8003d6e <_malloc_r+0x36>
 8003e14:	4634      	mov	r4, r6
 8003e16:	6876      	ldr	r6, [r6, #4]
 8003e18:	e7b4      	b.n	8003d84 <_malloc_r+0x4c>
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	e7cc      	b.n	8003db8 <_malloc_r+0x80>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f000 f99e 	bl	8004164 <__malloc_unlock>
 8003e28:	e797      	b.n	8003d5a <_malloc_r+0x22>
 8003e2a:	6025      	str	r5, [r4, #0]
 8003e2c:	e7dc      	b.n	8003de8 <_malloc_r+0xb0>
 8003e2e:	605b      	str	r3, [r3, #4]
 8003e30:	deff      	udf	#255	; 0xff
 8003e32:	bf00      	nop
 8003e34:	200002e0 	.word	0x200002e0

08003e38 <_printf_common>:
 8003e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	4616      	mov	r6, r2
 8003e3e:	4699      	mov	r9, r3
 8003e40:	688a      	ldr	r2, [r1, #8]
 8003e42:	690b      	ldr	r3, [r1, #16]
 8003e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bfb8      	it	lt
 8003e4c:	4613      	movlt	r3, r2
 8003e4e:	6033      	str	r3, [r6, #0]
 8003e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e54:	4607      	mov	r7, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	b10a      	cbz	r2, 8003e5e <_printf_common+0x26>
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	6033      	str	r3, [r6, #0]
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	0699      	lsls	r1, r3, #26
 8003e62:	bf42      	ittt	mi
 8003e64:	6833      	ldrmi	r3, [r6, #0]
 8003e66:	3302      	addmi	r3, #2
 8003e68:	6033      	strmi	r3, [r6, #0]
 8003e6a:	6825      	ldr	r5, [r4, #0]
 8003e6c:	f015 0506 	ands.w	r5, r5, #6
 8003e70:	d106      	bne.n	8003e80 <_printf_common+0x48>
 8003e72:	f104 0a19 	add.w	sl, r4, #25
 8003e76:	68e3      	ldr	r3, [r4, #12]
 8003e78:	6832      	ldr	r2, [r6, #0]
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	42ab      	cmp	r3, r5
 8003e7e:	dc26      	bgt.n	8003ece <_printf_common+0x96>
 8003e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e84:	1e13      	subs	r3, r2, #0
 8003e86:	6822      	ldr	r2, [r4, #0]
 8003e88:	bf18      	it	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	0692      	lsls	r2, r2, #26
 8003e8e:	d42b      	bmi.n	8003ee8 <_printf_common+0xb0>
 8003e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e94:	4649      	mov	r1, r9
 8003e96:	4638      	mov	r0, r7
 8003e98:	47c0      	blx	r8
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d01e      	beq.n	8003edc <_printf_common+0xa4>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	6922      	ldr	r2, [r4, #16]
 8003ea2:	f003 0306 	and.w	r3, r3, #6
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	bf02      	ittt	eq
 8003eaa:	68e5      	ldreq	r5, [r4, #12]
 8003eac:	6833      	ldreq	r3, [r6, #0]
 8003eae:	1aed      	subeq	r5, r5, r3
 8003eb0:	68a3      	ldr	r3, [r4, #8]
 8003eb2:	bf0c      	ite	eq
 8003eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eb8:	2500      	movne	r5, #0
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	bfc4      	itt	gt
 8003ebe:	1a9b      	subgt	r3, r3, r2
 8003ec0:	18ed      	addgt	r5, r5, r3
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	341a      	adds	r4, #26
 8003ec6:	42b5      	cmp	r5, r6
 8003ec8:	d11a      	bne.n	8003f00 <_printf_common+0xc8>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e008      	b.n	8003ee0 <_printf_common+0xa8>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4652      	mov	r2, sl
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	47c0      	blx	r8
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d103      	bne.n	8003ee4 <_printf_common+0xac>
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee4:	3501      	adds	r5, #1
 8003ee6:	e7c6      	b.n	8003e76 <_printf_common+0x3e>
 8003ee8:	18e1      	adds	r1, r4, r3
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	2030      	movs	r0, #48	; 0x30
 8003eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef2:	4422      	add	r2, r4
 8003ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efc:	3302      	adds	r3, #2
 8003efe:	e7c7      	b.n	8003e90 <_printf_common+0x58>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4622      	mov	r2, r4
 8003f04:	4649      	mov	r1, r9
 8003f06:	4638      	mov	r0, r7
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d0e6      	beq.n	8003edc <_printf_common+0xa4>
 8003f0e:	3601      	adds	r6, #1
 8003f10:	e7d9      	b.n	8003ec6 <_printf_common+0x8e>
	...

08003f14 <_printf_i>:
 8003f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f18:	7e0f      	ldrb	r7, [r1, #24]
 8003f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f1c:	2f78      	cmp	r7, #120	; 0x78
 8003f1e:	4691      	mov	r9, r2
 8003f20:	4680      	mov	r8, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	469a      	mov	sl, r3
 8003f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f2a:	d807      	bhi.n	8003f3c <_printf_i+0x28>
 8003f2c:	2f62      	cmp	r7, #98	; 0x62
 8003f2e:	d80a      	bhi.n	8003f46 <_printf_i+0x32>
 8003f30:	2f00      	cmp	r7, #0
 8003f32:	f000 80d4 	beq.w	80040de <_printf_i+0x1ca>
 8003f36:	2f58      	cmp	r7, #88	; 0x58
 8003f38:	f000 80c0 	beq.w	80040bc <_printf_i+0x1a8>
 8003f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f44:	e03a      	b.n	8003fbc <_printf_i+0xa8>
 8003f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f4a:	2b15      	cmp	r3, #21
 8003f4c:	d8f6      	bhi.n	8003f3c <_printf_i+0x28>
 8003f4e:	a101      	add	r1, pc, #4	; (adr r1, 8003f54 <_printf_i+0x40>)
 8003f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f54:	08003fad 	.word	0x08003fad
 8003f58:	08003fc1 	.word	0x08003fc1
 8003f5c:	08003f3d 	.word	0x08003f3d
 8003f60:	08003f3d 	.word	0x08003f3d
 8003f64:	08003f3d 	.word	0x08003f3d
 8003f68:	08003f3d 	.word	0x08003f3d
 8003f6c:	08003fc1 	.word	0x08003fc1
 8003f70:	08003f3d 	.word	0x08003f3d
 8003f74:	08003f3d 	.word	0x08003f3d
 8003f78:	08003f3d 	.word	0x08003f3d
 8003f7c:	08003f3d 	.word	0x08003f3d
 8003f80:	080040c5 	.word	0x080040c5
 8003f84:	08003fed 	.word	0x08003fed
 8003f88:	0800407f 	.word	0x0800407f
 8003f8c:	08003f3d 	.word	0x08003f3d
 8003f90:	08003f3d 	.word	0x08003f3d
 8003f94:	080040e7 	.word	0x080040e7
 8003f98:	08003f3d 	.word	0x08003f3d
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003f3d 	.word	0x08003f3d
 8003fa4:	08003f3d 	.word	0x08003f3d
 8003fa8:	08004087 	.word	0x08004087
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	602a      	str	r2, [r5, #0]
 8003fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e09f      	b.n	8004100 <_printf_i+0x1ec>
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	682b      	ldr	r3, [r5, #0]
 8003fc4:	0607      	lsls	r7, r0, #24
 8003fc6:	f103 0104 	add.w	r1, r3, #4
 8003fca:	6029      	str	r1, [r5, #0]
 8003fcc:	d501      	bpl.n	8003fd2 <_printf_i+0xbe>
 8003fce:	681e      	ldr	r6, [r3, #0]
 8003fd0:	e003      	b.n	8003fda <_printf_i+0xc6>
 8003fd2:	0646      	lsls	r6, r0, #25
 8003fd4:	d5fb      	bpl.n	8003fce <_printf_i+0xba>
 8003fd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	da03      	bge.n	8003fe6 <_printf_i+0xd2>
 8003fde:	232d      	movs	r3, #45	; 0x2d
 8003fe0:	4276      	negs	r6, r6
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe6:	485a      	ldr	r0, [pc, #360]	; (8004150 <_printf_i+0x23c>)
 8003fe8:	230a      	movs	r3, #10
 8003fea:	e012      	b.n	8004012 <_printf_i+0xfe>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	1d19      	adds	r1, r3, #4
 8003ff2:	6029      	str	r1, [r5, #0]
 8003ff4:	0605      	lsls	r5, r0, #24
 8003ff6:	d501      	bpl.n	8003ffc <_printf_i+0xe8>
 8003ff8:	681e      	ldr	r6, [r3, #0]
 8003ffa:	e002      	b.n	8004002 <_printf_i+0xee>
 8003ffc:	0641      	lsls	r1, r0, #25
 8003ffe:	d5fb      	bpl.n	8003ff8 <_printf_i+0xe4>
 8004000:	881e      	ldrh	r6, [r3, #0]
 8004002:	4853      	ldr	r0, [pc, #332]	; (8004150 <_printf_i+0x23c>)
 8004004:	2f6f      	cmp	r7, #111	; 0x6f
 8004006:	bf0c      	ite	eq
 8004008:	2308      	moveq	r3, #8
 800400a:	230a      	movne	r3, #10
 800400c:	2100      	movs	r1, #0
 800400e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004012:	6865      	ldr	r5, [r4, #4]
 8004014:	60a5      	str	r5, [r4, #8]
 8004016:	2d00      	cmp	r5, #0
 8004018:	bfa2      	ittt	ge
 800401a:	6821      	ldrge	r1, [r4, #0]
 800401c:	f021 0104 	bicge.w	r1, r1, #4
 8004020:	6021      	strge	r1, [r4, #0]
 8004022:	b90e      	cbnz	r6, 8004028 <_printf_i+0x114>
 8004024:	2d00      	cmp	r5, #0
 8004026:	d04b      	beq.n	80040c0 <_printf_i+0x1ac>
 8004028:	4615      	mov	r5, r2
 800402a:	fbb6 f1f3 	udiv	r1, r6, r3
 800402e:	fb03 6711 	mls	r7, r3, r1, r6
 8004032:	5dc7      	ldrb	r7, [r0, r7]
 8004034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004038:	4637      	mov	r7, r6
 800403a:	42bb      	cmp	r3, r7
 800403c:	460e      	mov	r6, r1
 800403e:	d9f4      	bls.n	800402a <_printf_i+0x116>
 8004040:	2b08      	cmp	r3, #8
 8004042:	d10b      	bne.n	800405c <_printf_i+0x148>
 8004044:	6823      	ldr	r3, [r4, #0]
 8004046:	07de      	lsls	r6, r3, #31
 8004048:	d508      	bpl.n	800405c <_printf_i+0x148>
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	6861      	ldr	r1, [r4, #4]
 800404e:	4299      	cmp	r1, r3
 8004050:	bfde      	ittt	le
 8004052:	2330      	movle	r3, #48	; 0x30
 8004054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004058:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800405c:	1b52      	subs	r2, r2, r5
 800405e:	6122      	str	r2, [r4, #16]
 8004060:	f8cd a000 	str.w	sl, [sp]
 8004064:	464b      	mov	r3, r9
 8004066:	aa03      	add	r2, sp, #12
 8004068:	4621      	mov	r1, r4
 800406a:	4640      	mov	r0, r8
 800406c:	f7ff fee4 	bl	8003e38 <_printf_common>
 8004070:	3001      	adds	r0, #1
 8004072:	d14a      	bne.n	800410a <_printf_i+0x1f6>
 8004074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004078:	b004      	add	sp, #16
 800407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	f043 0320 	orr.w	r3, r3, #32
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	4833      	ldr	r0, [pc, #204]	; (8004154 <_printf_i+0x240>)
 8004088:	2778      	movs	r7, #120	; 0x78
 800408a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	6829      	ldr	r1, [r5, #0]
 8004092:	061f      	lsls	r7, r3, #24
 8004094:	f851 6b04 	ldr.w	r6, [r1], #4
 8004098:	d402      	bmi.n	80040a0 <_printf_i+0x18c>
 800409a:	065f      	lsls	r7, r3, #25
 800409c:	bf48      	it	mi
 800409e:	b2b6      	uxthmi	r6, r6
 80040a0:	07df      	lsls	r7, r3, #31
 80040a2:	bf48      	it	mi
 80040a4:	f043 0320 	orrmi.w	r3, r3, #32
 80040a8:	6029      	str	r1, [r5, #0]
 80040aa:	bf48      	it	mi
 80040ac:	6023      	strmi	r3, [r4, #0]
 80040ae:	b91e      	cbnz	r6, 80040b8 <_printf_i+0x1a4>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	f023 0320 	bic.w	r3, r3, #32
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	2310      	movs	r3, #16
 80040ba:	e7a7      	b.n	800400c <_printf_i+0xf8>
 80040bc:	4824      	ldr	r0, [pc, #144]	; (8004150 <_printf_i+0x23c>)
 80040be:	e7e4      	b.n	800408a <_printf_i+0x176>
 80040c0:	4615      	mov	r5, r2
 80040c2:	e7bd      	b.n	8004040 <_printf_i+0x12c>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	6826      	ldr	r6, [r4, #0]
 80040c8:	6961      	ldr	r1, [r4, #20]
 80040ca:	1d18      	adds	r0, r3, #4
 80040cc:	6028      	str	r0, [r5, #0]
 80040ce:	0635      	lsls	r5, r6, #24
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	d501      	bpl.n	80040d8 <_printf_i+0x1c4>
 80040d4:	6019      	str	r1, [r3, #0]
 80040d6:	e002      	b.n	80040de <_printf_i+0x1ca>
 80040d8:	0670      	lsls	r0, r6, #25
 80040da:	d5fb      	bpl.n	80040d4 <_printf_i+0x1c0>
 80040dc:	8019      	strh	r1, [r3, #0]
 80040de:	2300      	movs	r3, #0
 80040e0:	6123      	str	r3, [r4, #16]
 80040e2:	4615      	mov	r5, r2
 80040e4:	e7bc      	b.n	8004060 <_printf_i+0x14c>
 80040e6:	682b      	ldr	r3, [r5, #0]
 80040e8:	1d1a      	adds	r2, r3, #4
 80040ea:	602a      	str	r2, [r5, #0]
 80040ec:	681d      	ldr	r5, [r3, #0]
 80040ee:	6862      	ldr	r2, [r4, #4]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4628      	mov	r0, r5
 80040f4:	f7fc f8ac 	bl	8000250 <memchr>
 80040f8:	b108      	cbz	r0, 80040fe <_printf_i+0x1ea>
 80040fa:	1b40      	subs	r0, r0, r5
 80040fc:	6060      	str	r0, [r4, #4]
 80040fe:	6863      	ldr	r3, [r4, #4]
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	2300      	movs	r3, #0
 8004104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004108:	e7aa      	b.n	8004060 <_printf_i+0x14c>
 800410a:	6923      	ldr	r3, [r4, #16]
 800410c:	462a      	mov	r2, r5
 800410e:	4649      	mov	r1, r9
 8004110:	4640      	mov	r0, r8
 8004112:	47d0      	blx	sl
 8004114:	3001      	adds	r0, #1
 8004116:	d0ad      	beq.n	8004074 <_printf_i+0x160>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	079b      	lsls	r3, r3, #30
 800411c:	d413      	bmi.n	8004146 <_printf_i+0x232>
 800411e:	68e0      	ldr	r0, [r4, #12]
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	4298      	cmp	r0, r3
 8004124:	bfb8      	it	lt
 8004126:	4618      	movlt	r0, r3
 8004128:	e7a6      	b.n	8004078 <_printf_i+0x164>
 800412a:	2301      	movs	r3, #1
 800412c:	4632      	mov	r2, r6
 800412e:	4649      	mov	r1, r9
 8004130:	4640      	mov	r0, r8
 8004132:	47d0      	blx	sl
 8004134:	3001      	adds	r0, #1
 8004136:	d09d      	beq.n	8004074 <_printf_i+0x160>
 8004138:	3501      	adds	r5, #1
 800413a:	68e3      	ldr	r3, [r4, #12]
 800413c:	9903      	ldr	r1, [sp, #12]
 800413e:	1a5b      	subs	r3, r3, r1
 8004140:	42ab      	cmp	r3, r5
 8004142:	dcf2      	bgt.n	800412a <_printf_i+0x216>
 8004144:	e7eb      	b.n	800411e <_printf_i+0x20a>
 8004146:	2500      	movs	r5, #0
 8004148:	f104 0619 	add.w	r6, r4, #25
 800414c:	e7f5      	b.n	800413a <_printf_i+0x226>
 800414e:	bf00      	nop
 8004150:	08004331 	.word	0x08004331
 8004154:	08004342 	.word	0x08004342

08004158 <__malloc_lock>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__malloc_lock+0x8>)
 800415a:	f7ff bc73 	b.w	8003a44 <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	200002dc 	.word	0x200002dc

08004164 <__malloc_unlock>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__malloc_unlock+0x8>)
 8004166:	f7ff bc6e 	b.w	8003a46 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	200002dc 	.word	0x200002dc

08004170 <_realloc_r>:
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4680      	mov	r8, r0
 8004176:	4614      	mov	r4, r2
 8004178:	460e      	mov	r6, r1
 800417a:	b921      	cbnz	r1, 8004186 <_realloc_r+0x16>
 800417c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	4611      	mov	r1, r2
 8004182:	f7ff bdd9 	b.w	8003d38 <_malloc_r>
 8004186:	b92a      	cbnz	r2, 8004194 <_realloc_r+0x24>
 8004188:	f000 f85a 	bl	8004240 <_free_r>
 800418c:	4625      	mov	r5, r4
 800418e:	4628      	mov	r0, r5
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	f000 f8a0 	bl	80042d8 <_malloc_usable_size_r>
 8004198:	4284      	cmp	r4, r0
 800419a:	4607      	mov	r7, r0
 800419c:	d802      	bhi.n	80041a4 <_realloc_r+0x34>
 800419e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041a2:	d812      	bhi.n	80041ca <_realloc_r+0x5a>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4640      	mov	r0, r8
 80041a8:	f7ff fdc6 	bl	8003d38 <_malloc_r>
 80041ac:	4605      	mov	r5, r0
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0ed      	beq.n	800418e <_realloc_r+0x1e>
 80041b2:	42bc      	cmp	r4, r7
 80041b4:	4622      	mov	r2, r4
 80041b6:	4631      	mov	r1, r6
 80041b8:	bf28      	it	cs
 80041ba:	463a      	movcs	r2, r7
 80041bc:	f000 f832 	bl	8004224 <memcpy>
 80041c0:	4631      	mov	r1, r6
 80041c2:	4640      	mov	r0, r8
 80041c4:	f000 f83c 	bl	8004240 <_free_r>
 80041c8:	e7e1      	b.n	800418e <_realloc_r+0x1e>
 80041ca:	4635      	mov	r5, r6
 80041cc:	e7df      	b.n	800418e <_realloc_r+0x1e>

080041ce <memmove>:
 80041ce:	4288      	cmp	r0, r1
 80041d0:	b510      	push	{r4, lr}
 80041d2:	eb01 0402 	add.w	r4, r1, r2
 80041d6:	d902      	bls.n	80041de <memmove+0x10>
 80041d8:	4284      	cmp	r4, r0
 80041da:	4623      	mov	r3, r4
 80041dc:	d807      	bhi.n	80041ee <memmove+0x20>
 80041de:	1e43      	subs	r3, r0, #1
 80041e0:	42a1      	cmp	r1, r4
 80041e2:	d008      	beq.n	80041f6 <memmove+0x28>
 80041e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ec:	e7f8      	b.n	80041e0 <memmove+0x12>
 80041ee:	4402      	add	r2, r0
 80041f0:	4601      	mov	r1, r0
 80041f2:	428a      	cmp	r2, r1
 80041f4:	d100      	bne.n	80041f8 <memmove+0x2a>
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041fc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004200:	e7f7      	b.n	80041f2 <memmove+0x24>
	...

08004204 <_sbrk_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d06      	ldr	r5, [pc, #24]	; (8004220 <_sbrk_r+0x1c>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fcf4 	bl	8000bfc <_sbrk>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d102      	bne.n	800421e <_sbrk_r+0x1a>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	b103      	cbz	r3, 800421e <_sbrk_r+0x1a>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	bd38      	pop	{r3, r4, r5, pc}
 8004220:	200002e8 	.word	0x200002e8

08004224 <memcpy>:
 8004224:	440a      	add	r2, r1
 8004226:	4291      	cmp	r1, r2
 8004228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800422c:	d100      	bne.n	8004230 <memcpy+0xc>
 800422e:	4770      	bx	lr
 8004230:	b510      	push	{r4, lr}
 8004232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800423a:	4291      	cmp	r1, r2
 800423c:	d1f9      	bne.n	8004232 <memcpy+0xe>
 800423e:	bd10      	pop	{r4, pc}

08004240 <_free_r>:
 8004240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004242:	2900      	cmp	r1, #0
 8004244:	d044      	beq.n	80042d0 <_free_r+0x90>
 8004246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424a:	9001      	str	r0, [sp, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	f1a1 0404 	sub.w	r4, r1, #4
 8004252:	bfb8      	it	lt
 8004254:	18e4      	addlt	r4, r4, r3
 8004256:	f7ff ff7f 	bl	8004158 <__malloc_lock>
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <_free_r+0x94>)
 800425c:	9801      	ldr	r0, [sp, #4]
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	b933      	cbnz	r3, 8004270 <_free_r+0x30>
 8004262:	6063      	str	r3, [r4, #4]
 8004264:	6014      	str	r4, [r2, #0]
 8004266:	b003      	add	sp, #12
 8004268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800426c:	f7ff bf7a 	b.w	8004164 <__malloc_unlock>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d908      	bls.n	8004286 <_free_r+0x46>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1961      	adds	r1, r4, r5
 8004278:	428b      	cmp	r3, r1
 800427a:	bf01      	itttt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	1949      	addeq	r1, r1, r5
 8004282:	6021      	streq	r1, [r4, #0]
 8004284:	e7ed      	b.n	8004262 <_free_r+0x22>
 8004286:	461a      	mov	r2, r3
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	b10b      	cbz	r3, 8004290 <_free_r+0x50>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d9fa      	bls.n	8004286 <_free_r+0x46>
 8004290:	6811      	ldr	r1, [r2, #0]
 8004292:	1855      	adds	r5, r2, r1
 8004294:	42a5      	cmp	r5, r4
 8004296:	d10b      	bne.n	80042b0 <_free_r+0x70>
 8004298:	6824      	ldr	r4, [r4, #0]
 800429a:	4421      	add	r1, r4
 800429c:	1854      	adds	r4, r2, r1
 800429e:	42a3      	cmp	r3, r4
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	d1e0      	bne.n	8004266 <_free_r+0x26>
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	6053      	str	r3, [r2, #4]
 80042aa:	440c      	add	r4, r1
 80042ac:	6014      	str	r4, [r2, #0]
 80042ae:	e7da      	b.n	8004266 <_free_r+0x26>
 80042b0:	d902      	bls.n	80042b8 <_free_r+0x78>
 80042b2:	230c      	movs	r3, #12
 80042b4:	6003      	str	r3, [r0, #0]
 80042b6:	e7d6      	b.n	8004266 <_free_r+0x26>
 80042b8:	6825      	ldr	r5, [r4, #0]
 80042ba:	1961      	adds	r1, r4, r5
 80042bc:	428b      	cmp	r3, r1
 80042be:	bf04      	itt	eq
 80042c0:	6819      	ldreq	r1, [r3, #0]
 80042c2:	685b      	ldreq	r3, [r3, #4]
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	bf04      	itt	eq
 80042c8:	1949      	addeq	r1, r1, r5
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	6054      	str	r4, [r2, #4]
 80042ce:	e7ca      	b.n	8004266 <_free_r+0x26>
 80042d0:	b003      	add	sp, #12
 80042d2:	bd30      	pop	{r4, r5, pc}
 80042d4:	200002e0 	.word	0x200002e0

080042d8 <_malloc_usable_size_r>:
 80042d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042dc:	1f18      	subs	r0, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bfbc      	itt	lt
 80042e2:	580b      	ldrlt	r3, [r1, r0]
 80042e4:	18c0      	addlt	r0, r0, r3
 80042e6:	4770      	bx	lr

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
