
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000018  08004a90  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004a90  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f824  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200d  00000000  00000000  0002f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  00032608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fe1  00000000  00000000  00033079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001034b  00000000  00000000  0005a05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f78d3  00000000  00000000  0006a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037f4  00000000  00000000  00161c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0016546c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000018 	.word	0x20000018
 8000214:	00000000 	.word	0x00000000
 8000218:	08004a34 	.word	0x08004a34

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000001c 	.word	0x2000001c
 8000234:	08004a34 	.word	0x08004a34

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fc55 	bl	8000de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f856 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f9f8 	bl	8000934 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000544:	f000 f8c0 	bl	80006c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000548:	f000 f936 	bl	80007b8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800054c:	f000 f9c2 	bl	80008d4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000550:	2100      	movs	r1, #0
 8000552:	481f      	ldr	r0, [pc, #124]	; (80005d0 <main+0x9c>)
 8000554:	f002 f9b8 	bl	80028c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000558:	2104      	movs	r1, #4
 800055a:	481d      	ldr	r0, [pc, #116]	; (80005d0 <main+0x9c>)
 800055c:	f002 f9b4 	bl	80028c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000560:	2108      	movs	r1, #8
 8000562:	481b      	ldr	r0, [pc, #108]	; (80005d0 <main+0x9c>)
 8000564:	f002 f9b0 	bl	80028c8 <HAL_TIM_PWM_Start>
  htim3.Instance -> CCR1 = (10000-1) * rCycle;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <main+0xa0>)
 800056a:	edd3 7a00 	vldr	s15, [r3]
 800056e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80005d8 <main+0xa4>
 8000572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <main+0x9c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800057e:	ee17 2a90 	vmov	r2, s15
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance -> CCR2 = (10000-1) * gCycle;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <main+0xa8>)
 8000586:	edd3 7a00 	vldr	s15, [r3]
 800058a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80005d8 <main+0xa4>
 800058e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0x9c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800059a:	ee17 2a90 	vmov	r2, s15
 800059e:	639a      	str	r2, [r3, #56]	; 0x38
  htim3.Instance -> CCR3 = (10000-1) * bCycle;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0xac>)
 80005a2:	edd3 7a00 	vldr	s15, [r3]
 80005a6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80005d8 <main+0xa4>
 80005aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0x9c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005b6:	ee17 2a90 	vmov	r2, s15
 80005ba:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pwm = (GPIOB->IDR & GPIO_PIN_10) >>10;
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <main+0xb0>)
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	0a9b      	lsrs	r3, r3, #10
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <main+0xb4>)
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e7f5      	b.n	80005bc <main+0x88>
 80005d0:	20000080 	.word	0x20000080
 80005d4:	20000000 	.word	0x20000000
 80005d8:	461c3c00 	.word	0x461c3c00
 80005dc:	20000004 	.word	0x20000004
 80005e0:	20000008 	.word	0x20000008
 80005e4:	40020400 	.word	0x40020400
 80005e8:	20000154 	.word	0x20000154

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f9ed 	bl	80049da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <SystemClock_Config+0xd4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0xd4>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <SystemClock_Config+0xd8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <SystemClock_Config+0xd8>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000658:	23d8      	movs	r3, #216	; 0xd8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffb7 	bl	80015e0 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000678:	f000 f998 	bl	80009ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067c:	f000 ff60 	bl	8001540 <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000686:	f000 f991 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	2107      	movs	r1, #7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fa47 	bl	8001b3c <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006b4:	f000 f97a 	bl	80009ac <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08e      	sub	sp, #56	; 0x38
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <MX_TIM2_Init+0xec>)
 80006fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000704:	f240 4237 	movw	r2, #1079	; 0x437
 8000708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_TIM2_Init+0xec>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000712:	f242 720f 	movw	r2, #9999	; 0x270f
 8000716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_TIM2_Init+0xec>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000724:	4823      	ldr	r0, [pc, #140]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000726:	f002 f817 	bl	8002758 <HAL_TIM_Base_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000730:	f000 f93c 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073e:	4619      	mov	r1, r3
 8000740:	481c      	ldr	r0, [pc, #112]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000742:	f002 facf 	bl	8002ce4 <HAL_TIM_ConfigClockSource>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800074c:	f000 f92e 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000750:	4818      	ldr	r0, [pc, #96]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000752:	f002 f858 	bl	8002806 <HAL_TIM_PWM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 f926 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000770:	f002 ff40 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800077a:	f000 f917 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077e:	2360      	movs	r3, #96	; 0x60
 8000780:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000782:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000786:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2208      	movs	r2, #8
 8000794:	4619      	mov	r1, r3
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_TIM2_Init+0xec>)
 8000798:	f002 f990 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80007a2:	f000 f903 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a6:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_TIM2_Init+0xec>)
 80007a8:	f000 f95c 	bl	8000a64 <HAL_TIM_MspPostInit>

}
 80007ac:	bf00      	nop
 80007ae:	3738      	adds	r7, #56	; 0x38
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000034 	.word	0x20000034

080007b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d8:	463b      	mov	r3, r7
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
 80007e6:	615a      	str	r2, [r3, #20]
 80007e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ea:	4b38      	ldr	r3, [pc, #224]	; (80008cc <MX_TIM3_Init+0x114>)
 80007ec:	4a38      	ldr	r2, [pc, #224]	; (80008d0 <MX_TIM3_Init+0x118>)
 80007ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80007f0:	4b36      	ldr	r3, [pc, #216]	; (80008cc <MX_TIM3_Init+0x114>)
 80007f2:	f240 4237 	movw	r2, #1079	; 0x437
 80007f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <MX_TIM3_Init+0x114>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <MX_TIM3_Init+0x114>)
 8000800:	f242 720f 	movw	r2, #9999	; 0x270f
 8000804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_TIM3_Init+0x114>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_TIM3_Init+0x114>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000812:	482e      	ldr	r0, [pc, #184]	; (80008cc <MX_TIM3_Init+0x114>)
 8000814:	f001 ffa0 	bl	8002758 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800081e:	f000 f8c5 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082c:	4619      	mov	r1, r3
 800082e:	4827      	ldr	r0, [pc, #156]	; (80008cc <MX_TIM3_Init+0x114>)
 8000830:	f002 fa58 	bl	8002ce4 <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800083a:	f000 f8b7 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083e:	4823      	ldr	r0, [pc, #140]	; (80008cc <MX_TIM3_Init+0x114>)
 8000840:	f001 ffe1 	bl	8002806 <HAL_TIM_PWM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800084a:	f000 f8af 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	481b      	ldr	r0, [pc, #108]	; (80008cc <MX_TIM3_Init+0x114>)
 800085e:	f002 fec9 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000868:	f000 f8a0 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <MX_TIM3_Init+0x114>)
 8000884:	f002 f91a 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800088e:	f000 f88d 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	2204      	movs	r2, #4
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_TIM3_Init+0x114>)
 800089a:	f002 f90f 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80008a4:	f000 f882 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a8:	463b      	mov	r3, r7
 80008aa:	2208      	movs	r2, #8
 80008ac:	4619      	mov	r1, r3
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <MX_TIM3_Init+0x114>)
 80008b0:	f002 f904 	bl	8002abc <HAL_TIM_PWM_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 80008ba:	f000 f877 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008be:	4803      	ldr	r0, [pc, #12]	; (80008cc <MX_TIM3_Init+0x114>)
 80008c0:	f000 f8d0 	bl	8000a64 <HAL_TIM_MspPostInit>

}
 80008c4:	bf00      	nop
 80008c6:	3738      	adds	r7, #56	; 0x38
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000080 	.word	0x20000080
 80008d0:	40000400 	.word	0x40000400

080008d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008da:	4a15      	ldr	r2, [pc, #84]	; (8000930 <MX_USART3_UART_Init+0x5c>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_USART3_UART_Init+0x58>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_USART3_UART_Init+0x58>)
 8000918:	f002 fefa 	bl	8003710 <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000922:	f000 f843 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000cc 	.word	0x200000cc
 8000930:	40004800 	.word	0x40004800

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_GPIO_Init+0x74>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x74>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x74>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x44>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x44>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <HAL_MspInit+0x44>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <HAL_MspInit+0x44>)
 80009dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e0:	6453      	str	r3, [r2, #68]	; 0x44
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_MspInit+0x44>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a10:	d10c      	bne.n	8000a2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_TIM_Base_MspInit+0x5c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_TIM_Base_MspInit+0x5c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_TIM_Base_MspInit+0x5c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a2a:	e010      	b.n	8000a4e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_TIM_Base_MspInit+0x60>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10b      	bne.n	8000a4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_TIM_Base_MspInit+0x5c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_TIM_Base_MspInit+0x5c>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_TIM_Base_MspInit+0x5c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40000400 	.word	0x40000400

08000a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a84:	d11d      	bne.n	8000ac2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b30      	ldr	r3, [pc, #192]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a2f      	ldr	r2, [pc, #188]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4824      	ldr	r0, [pc, #144]	; (8000b4c <HAL_TIM_MspPostInit+0xe8>)
 8000abc:	f000 fb94 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ac0:	e03d      	b.n	8000b3e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <HAL_TIM_MspPostInit+0xec>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d138      	bne.n	8000b3e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_TIM_MspPostInit+0xe4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000afc:	23c0      	movs	r3, #192	; 0xc0
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480f      	ldr	r0, [pc, #60]	; (8000b54 <HAL_TIM_MspPostInit+0xf0>)
 8000b18:	f000 fb66 	bl	80011e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <HAL_TIM_MspPostInit+0xf4>)
 8000b3a:	f000 fb55 	bl	80011e8 <HAL_GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40000400 	.word	0x40000400
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020800 	.word	0x40020800

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0ae      	sub	sp, #184	; 0xb8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2290      	movs	r2, #144	; 0x90
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f003 ff2c 	bl	80049da <memset>
  if(huart->Instance==USART3)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_UART_MspInit+0xc4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d144      	bne.n	8000c16 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f001 f9b4 	bl	8001f08 <HAL_RCCEx_PeriphCLKConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ba6:	f7ff ff01 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_UART_MspInit+0xc8>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_UART_MspInit+0xc8>)
 8000bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <HAL_UART_MspInit+0xc8>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_UART_MspInit+0xc8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0xc8>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_UART_MspInit+0xc8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <HAL_UART_MspInit+0xcc>)
 8000c02:	f000 faf1 	bl	80011e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2027      	movs	r0, #39	; 0x27
 8000c0c:	f000 fa23 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c10:	2027      	movs	r0, #39	; 0x27
 8000c12:	f000 fa3c 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	37b8      	adds	r7, #184	; 0xb8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004800 	.word	0x40004800
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8f2 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	HAL_UART_Receive(&huart3,&ch,1,1000);
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4930      	ldr	r1, [pc, #192]	; (8000d50 <USART3_IRQHandler+0xd0>)
 8000c8e:	4831      	ldr	r0, [pc, #196]	; (8000d54 <USART3_IRQHandler+0xd4>)
 8000c90:	f002 fe0f 	bl	80038b2 <HAL_UART_Receive>
		float *pCycle = NULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
		uint32_t *ccr = NULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
		switch(ch){
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <USART3_IRQHandler+0xd0>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b72      	cmp	r3, #114	; 0x72
 8000ca2:	d006      	beq.n	8000cb2 <USART3_IRQHandler+0x32>
 8000ca4:	2b72      	cmp	r3, #114	; 0x72
 8000ca6:	dc19      	bgt.n	8000cdc <USART3_IRQHandler+0x5c>
 8000ca8:	2b62      	cmp	r3, #98	; 0x62
 8000caa:	d010      	beq.n	8000cce <USART3_IRQHandler+0x4e>
 8000cac:	2b67      	cmp	r3, #103	; 0x67
 8000cae:	d007      	beq.n	8000cc0 <USART3_IRQHandler+0x40>
 8000cb0:	e014      	b.n	8000cdc <USART3_IRQHandler+0x5c>
			case 'r':
				pCycle = &rCycle;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <USART3_IRQHandler+0xd8>)
 8000cb4:	607b      	str	r3, [r7, #4]
				ccr = &(htim3.Instance->CCR1);
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <USART3_IRQHandler+0xdc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3334      	adds	r3, #52	; 0x34
 8000cbc:	603b      	str	r3, [r7, #0]
				break;
 8000cbe:	e00d      	b.n	8000cdc <USART3_IRQHandler+0x5c>
			case 'g':
				pCycle = &gCycle;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <USART3_IRQHandler+0xe0>)
 8000cc2:	607b      	str	r3, [r7, #4]
				ccr = &(htim3.Instance->CCR2);
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <USART3_IRQHandler+0xdc>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3338      	adds	r3, #56	; 0x38
 8000cca:	603b      	str	r3, [r7, #0]
				break;
 8000ccc:	e006      	b.n	8000cdc <USART3_IRQHandler+0x5c>
			case 'b':
				pCycle = &bCycle;
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <USART3_IRQHandler+0xe4>)
 8000cd0:	607b      	str	r3, [r7, #4]
				ccr = &(htim3.Instance->CCR3);
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <USART3_IRQHandler+0xdc>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	333c      	adds	r3, #60	; 0x3c
 8000cd8:	603b      	str	r3, [r7, #0]
				break;
 8000cda:	bf00      	nop
		}
		if(pCycle != NULL){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d02a      	beq.n	8000d38 <USART3_IRQHandler+0xb8>
			HAL_UART_Transmit(&huart3,"\r\n",2,1000);
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	491f      	ldr	r1, [pc, #124]	; (8000d68 <USART3_IRQHandler+0xe8>)
 8000cea:	481a      	ldr	r0, [pc, #104]	; (8000d54 <USART3_IRQHandler+0xd4>)
 8000cec:	f002 fd5e 	bl	80037ac <HAL_UART_Transmit>
			*pCycle = *pCycle== 1?0:*pCycle+.2;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edd3 7a00 	vldr	s15, [r3]
 8000cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cfa:	eef4 7a47 	vcmp.f32	s15, s14
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	d00b      	beq.n	8000d1c <USART3_IRQHandler+0x9c>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 7a00 	vldr	s15, [r3]
 8000d0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000d48 <USART3_IRQHandler+0xc8>
 8000d12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d1a:	e001      	b.n	8000d20 <USART3_IRQHandler+0xa0>
 8000d1c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000d6c <USART3_IRQHandler+0xec>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	edc3 7a00 	vstr	s15, [r3]
			*ccr = *pCycle;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d30:	ee17 2a90 	vmov	r2, s15
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <USART3_IRQHandler+0xd4>)
 8000d3a:	f002 fe7f 	bl	8003a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	9999999a 	.word	0x9999999a
 8000d4c:	3fc99999 	.word	0x3fc99999
 8000d50:	20000155 	.word	0x20000155
 8000d54:	200000cc 	.word	0x200000cc
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000080 	.word	0x20000080
 8000d60:	20000004 	.word	0x20000004
 8000d64:	20000008 	.word	0x20000008
 8000d68:	08004a4c 	.word	0x08004a4c
 8000d6c:	00000000 	.word	0x00000000

08000d70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9a:	490e      	ldr	r1, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db0:	4c0b      	ldr	r4, [pc, #44]	; (8000de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd7 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fe13 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbb5 	bl	8000534 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000dd8:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 8000ddc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000de0:	2000015c 	.word	0x2000015c

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>

08000de6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f928 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df0:	200f      	movs	r0, #15
 8000df2:	f000 f805 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df6:	f7ff fddf 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f943 	bl	80010aa <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3c:	f000 f90b 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000014 	.word	0x20000014
 8000e5c:	20000010 	.word	0x20000010

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000014 	.word	0x20000014
 8000e84:	20000158 	.word	0x20000158

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000158 	.word	0x20000158

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	; (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff feda 	bl	8000e88 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d008      	beq.n	80010f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e052      	b.n	800119a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0216 	bic.w	r2, r2, #22
 8001102:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001112:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <HAL_DMA_Abort+0x62>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0208 	bic.w	r2, r2, #8
 8001132:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001144:	e013      	b.n	800116e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001146:	f7ff fe9f 	bl	8000e88 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b05      	cmp	r3, #5
 8001152:	d90c      	bls.n	800116e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e015      	b.n	800119a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e4      	bne.n	8001146 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001180:	223f      	movs	r2, #63	; 0x3f
 8001182:	409a      	lsls	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d004      	beq.n	80011c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00c      	b.n	80011da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e175      	b.n	80014f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 8164 	bne.w	80014ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d005      	beq.n	800123e <HAL_GPIO_Init+0x56>
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80be 	beq.w	80014ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_GPIO_Init+0x324>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a65      	ldr	r2, [pc, #404]	; (800150c <HAL_GPIO_Init+0x324>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_GPIO_Init+0x324>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800138a:	4a61      	ldr	r2, [pc, #388]	; (8001510 <HAL_GPIO_Init+0x328>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a58      	ldr	r2, [pc, #352]	; (8001514 <HAL_GPIO_Init+0x32c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d037      	beq.n	8001426 <HAL_GPIO_Init+0x23e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_GPIO_Init+0x330>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0x23a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a56      	ldr	r2, [pc, #344]	; (800151c <HAL_GPIO_Init+0x334>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x236>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a55      	ldr	r2, [pc, #340]	; (8001520 <HAL_GPIO_Init+0x338>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x232>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a54      	ldr	r2, [pc, #336]	; (8001524 <HAL_GPIO_Init+0x33c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x22e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a53      	ldr	r2, [pc, #332]	; (8001528 <HAL_GPIO_Init+0x340>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x22a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <HAL_GPIO_Init+0x344>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x348>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a50      	ldr	r2, [pc, #320]	; (8001534 <HAL_GPIO_Init+0x34c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <HAL_GPIO_Init+0x350>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x21a>
 80013fe:	2309      	movs	r3, #9
 8001400:	e012      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001402:	230a      	movs	r3, #10
 8001404:	e010      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001406:	2308      	movs	r3, #8
 8001408:	e00e      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140a:	2307      	movs	r3, #7
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140e:	2306      	movs	r3, #6
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001438:	4935      	ldr	r1, [pc, #212]	; (8001510 <HAL_GPIO_Init+0x328>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_GPIO_Init+0x354>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146a:	4a34      	ldr	r2, [pc, #208]	; (800153c <HAL_GPIO_Init+0x354>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_GPIO_Init+0x354>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001494:	4a29      	ldr	r2, [pc, #164]	; (800153c <HAL_GPIO_Init+0x354>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_GPIO_Init+0x354>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014be:	4a1f      	ldr	r2, [pc, #124]	; (800153c <HAL_GPIO_Init+0x354>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_GPIO_Init+0x354>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_GPIO_Init+0x354>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae86 	bls.w	8001208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40022000 	.word	0x40022000
 8001538:	40022400 	.word	0x40022400
 800153c:	40013c00 	.word	0x40013c00

08001540 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800156e:	f7ff fc8b 	bl	8000e88 <HAL_GetTick>
 8001572:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001574:	e009      	b.n	800158a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001576:	f7ff fc87 	bl	8000e88 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001584:	d901      	bls.n	800158a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e022      	b.n	80015d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d1ee      	bne.n	8001576 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff fc70 	bl	8000e88 <HAL_GetTick>
 80015a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015aa:	e009      	b.n	80015c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015ac:	f7ff fc6c 	bl	8000e88 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ba:	d901      	bls.n	80015c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e007      	b.n	80015d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015cc:	d1ee      	bne.n	80015ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e29b      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8087 	beq.w	8001712 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b96      	ldr	r3, [pc, #600]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b04      	cmp	r3, #4
 800160e:	d00c      	beq.n	800162a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001610:	4b93      	ldr	r3, [pc, #588]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d112      	bne.n	8001642 <HAL_RCC_OscConfig+0x62>
 800161c:	4b90      	ldr	r3, [pc, #576]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001628:	d10b      	bne.n	8001642 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162a:	4b8d      	ldr	r3, [pc, #564]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <HAL_RCC_OscConfig+0x130>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d168      	bne.n	8001710 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e275      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x7a>
 800164c:	4b84      	ldr	r3, [pc, #528]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a83      	ldr	r2, [pc, #524]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e02e      	b.n	80016b8 <HAL_RCC_OscConfig+0xd8>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x9c>
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7e      	ldr	r2, [pc, #504]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b7c      	ldr	r3, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7b      	ldr	r2, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01d      	b.n	80016b8 <HAL_RCC_OscConfig+0xd8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a75      	ldr	r2, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800168c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b73      	ldr	r3, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a72      	ldr	r2, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0xd8>
 80016a0:	4b6f      	ldr	r3, [pc, #444]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6e      	ldr	r2, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b6c      	ldr	r3, [pc, #432]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6b      	ldr	r2, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fbe2 	bl	8000e88 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fbde 	bl	8000e88 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e229      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b61      	ldr	r3, [pc, #388]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0xe8>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fbce 	bl	8000e88 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fbca 	bl	8000e88 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e215      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	4b57      	ldr	r3, [pc, #348]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x110>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d069      	beq.n	80017f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x190>
 8001736:	4b4a      	ldr	r3, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <HAL_RCC_OscConfig+0x17a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1e9      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b41      	ldr	r3, [pc, #260]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	493d      	ldr	r1, [pc, #244]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e040      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d023      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	4b39      	ldr	r3, [pc, #228]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fb80 	bl	8000e88 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fb7c 	bl	8000e88 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1c7      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4929      	ldr	r1, [pc, #164]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
 80017be:	e018      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb5c 	bl	8000e88 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb58 	bl	8000e88 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1a3      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d038      	beq.n	8001870 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180a:	4a15      	ldr	r2, [pc, #84]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff fb39 	bl	8000e88 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fb35 	bl	8000e88 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e180      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x23a>
 8001838:	e01a      	b.n	8001870 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_RCC_OscConfig+0x280>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fb1f 	bl	8000e88 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff fb1b 	bl	8000e88 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d903      	bls.n	8001864 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e166      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
 8001860:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	4b92      	ldr	r3, [pc, #584]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ee      	bne.n	800184e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80a4 	beq.w	80019c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b89      	ldr	r3, [pc, #548]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a88      	ldr	r2, [pc, #544]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b86      	ldr	r3, [pc, #536]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a6:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80018b2:	4b80      	ldr	r3, [pc, #512]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7f      	ldr	r2, [pc, #508]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff fae3 	bl	8000e88 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fadf 	bl	8000e88 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e12a      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x4d4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x31a>
 80018ec:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a6f      	ldr	r2, [pc, #444]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	e02d      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x33c>
 8001902:	4b6b      	ldr	r3, [pc, #428]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	4a6a      	ldr	r2, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a67      	ldr	r2, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	e01c      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x35e>
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	4a61      	ldr	r2, [pc, #388]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d015      	beq.n	800198a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff fa93 	bl	8000e88 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fa8f 	bl	8000e88 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0d8      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ee      	beq.n	8001966 <HAL_RCC_OscConfig+0x386>
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198a:	f7ff fa7d 	bl	8000e88 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff fa79 	bl	8000e88 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0c2      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80ae 	beq.w	8001b2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d06d      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d14b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 80019ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fa4a 	bl	8000e88 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff fa46 	bl	8000e88 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e091      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69da      	ldr	r2, [r3, #28]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	019b      	lsls	r3, r3, #6
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	071b      	lsls	r3, r3, #28
 8001a42:	491b      	ldr	r1, [pc, #108]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fa18 	bl	8000e88 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff fa14 	bl	8000e88 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e05f      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x47c>
 8001a7a:	e057      	b.n	8001b2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f9fe 	bl	8000e88 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f9fa 	bl	8000e88 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e045      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_RCC_OscConfig+0x4d0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4b0>
 8001aae:	e03d      	b.n	8001b2c <HAL_RCC_OscConfig+0x54c>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_OscConfig+0x558>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d030      	beq.n	8001b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d129      	bne.n	8001b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d122      	bne.n	8001b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae8:	4013      	ands	r3, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d119      	bne.n	8001b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	3b01      	subs	r3, #1
 8001b02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d10f      	bne.n	8001b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0d0      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b67      	ldr	r3, [pc, #412]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 020f 	bic.w	r2, r3, #15
 8001b6a:	4965      	ldr	r1, [pc, #404]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0b8      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b9c:	4b59      	ldr	r3, [pc, #356]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	4a52      	ldr	r2, [pc, #328]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bbe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	494d      	ldr	r1, [pc, #308]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d040      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d115      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e07f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e073      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4936      	ldr	r1, [pc, #216]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c30:	f7ff f92a 	bl	8000e88 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f926 	bl	8000e88 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e053      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d210      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 020f 	bic.w	r2, r3, #15
 8001c76:	4922      	ldr	r1, [pc, #136]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e032      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	4916      	ldr	r1, [pc, #88]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d009      	beq.n	8001cce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cba:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cce:	f000 f821 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	490a      	ldr	r1, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x1cc>)
 8001ce0:	5ccb      	ldrb	r3, [r1, r3]
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x1d0>)
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1d4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f886 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023c00 	.word	0x40023c00
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08004a50 	.word	0x08004a50
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	20000010 	.word	0x20000010

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d18:	b090      	sub	sp, #64	; 0x40
 8001d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d20:	2300      	movs	r3, #0
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d24:	2300      	movs	r3, #0
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d00d      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x40>
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	f200 80a1 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x34>
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d46:	e09b      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d4c:	e09b      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4e:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d52:	e098      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d54:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d028      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	2200      	movs	r2, #0
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	627a      	str	r2, [r7, #36]	; 0x24
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d80:	fb03 f201 	mul.w	r2, r3, r1
 8001d84:	2300      	movs	r3, #0
 8001d86:	fb00 f303 	mul.w	r3, r0, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a43      	ldr	r2, [pc, #268]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x188>)
 8001d8e:	fba0 1202 	umull	r1, r2, r0, r2
 8001d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d94:	460a      	mov	r2, r1
 8001d96:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	4413      	add	r3, r2
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da0:	2200      	movs	r2, #0
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	61fa      	str	r2, [r7, #28]
 8001da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001daa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001dae:	f7fe fa43 	bl	8000238 <__aeabi_uldivmod>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4613      	mov	r3, r2
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dba:	e053      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dce:	f04f 0b00 	mov.w	fp, #0
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	465b      	mov	r3, fp
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	0159      	lsls	r1, r3, #5
 8001de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001de4:	0150      	lsls	r0, r2, #5
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	ebb2 080a 	subs.w	r8, r2, sl
 8001dee:	eb63 090b 	sbc.w	r9, r3, fp
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dfe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e06:	ebb2 0408 	subs.w	r4, r2, r8
 8001e0a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	00eb      	lsls	r3, r5, #3
 8001e18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e1c:	00e2      	lsls	r2, r4, #3
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	eb14 030a 	adds.w	r3, r4, sl
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	eb45 030b 	adc.w	r3, r5, fp
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	028b      	lsls	r3, r1, #10
 8001e3e:	4621      	mov	r1, r4
 8001e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e44:	4621      	mov	r1, r4
 8001e46:	028a      	lsls	r2, r1, #10
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	60fa      	str	r2, [r7, #12]
 8001e54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e58:	f7fe f9ee 	bl	8000238 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	0c1b      	lsrs	r3, r3, #16
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001e74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e7e:	e002      	b.n	8001e86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3740      	adds	r7, #64	; 0x40
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	00f42400 	.word	0x00f42400
 8001e9c:	017d7840 	.word	0x017d7840

08001ea0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b03      	ldr	r3, [pc, #12]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	2000000c 	.word	0x2000000c

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff0 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0a9b      	lsrs	r3, r3, #10
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08004a60 	.word	0x08004a60

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee4:	f7ff ffdc 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	0b5b      	lsrs	r3, r3, #13
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08004a60 	.word	0x08004a60

08001f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f30:	4b69      	ldr	r3, [pc, #420]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a68      	ldr	r2, [pc, #416]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f3a:	6093      	str	r3, [r2, #8]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f44:	4964      	ldr	r1, [pc, #400]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d017      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f62:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	4959      	ldr	r1, [pc, #356]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d017      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	494a      	ldr	r1, [pc, #296]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 808b 	beq.w	8002102 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b37      	ldr	r3, [pc, #220]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7fe ff3a 	bl	8000e88 <HAL_GetTick>
 8002014:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe ff36 	bl	8000e88 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e38f      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d035      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d02e      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002054:	4b20      	ldr	r3, [pc, #128]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a1d      	ldr	r2, [pc, #116]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002074:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d114      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fefe 	bl	8000e88 <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	e00a      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7fe fefa 	bl	8000e88 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e351      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a6:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0ee      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020be:	d111      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020ce:	400b      	ands	r3, r1
 80020d0:	4901      	ldr	r1, [pc, #4]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40007000 	.word	0x40007000
 80020e0:	0ffffcff 	.word	0x0ffffcff
 80020e4:	4bac      	ldr	r3, [pc, #688]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4aab      	ldr	r2, [pc, #684]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020ee:	6093      	str	r3, [r2, #8]
 80020f0:	4ba9      	ldr	r3, [pc, #676]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	49a6      	ldr	r1, [pc, #664]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800210e:	4ba2      	ldr	r3, [pc, #648]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002114:	4aa0      	ldr	r2, [pc, #640]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800211e:	4b9e      	ldr	r3, [pc, #632]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002120:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	499b      	ldr	r1, [pc, #620]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800213c:	4b96      	ldr	r3, [pc, #600]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214a:	4993      	ldr	r1, [pc, #588]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800215e:	4b8e      	ldr	r3, [pc, #568]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216c:	498a      	ldr	r1, [pc, #552]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002180:	4b85      	ldr	r3, [pc, #532]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002186:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	4982      	ldr	r1, [pc, #520]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021a2:	4b7d      	ldr	r3, [pc, #500]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4979      	ldr	r1, [pc, #484]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c4:	4b74      	ldr	r3, [pc, #464]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4971      	ldr	r1, [pc, #452]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e6:	4b6c      	ldr	r3, [pc, #432]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f023 020c 	bic.w	r2, r3, #12
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f4:	4968      	ldr	r1, [pc, #416]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002208:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	4960      	ldr	r1, [pc, #384]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002238:	4957      	ldr	r1, [pc, #348]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	494f      	ldr	r1, [pc, #316]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4946      	ldr	r1, [pc, #280]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002290:	4b41      	ldr	r3, [pc, #260]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	493e      	ldr	r1, [pc, #248]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022b2:	4b39      	ldr	r3, [pc, #228]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	4935      	ldr	r1, [pc, #212]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022d4:	4b30      	ldr	r3, [pc, #192]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022e2:	492d      	ldr	r1, [pc, #180]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d011      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002304:	4924      	ldr	r1, [pc, #144]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002314:	d101      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	4914      	ldr	r1, [pc, #80]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00b      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002368:	490b      	ldr	r1, [pc, #44]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00f      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238c:	4902      	ldr	r1, [pc, #8]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002394:	e002      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023a8:	4b8a      	ldr	r3, [pc, #552]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b8:	4986      	ldr	r1, [pc, #536]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023cc:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	497d      	ldr	r1, [pc, #500]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d006      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80d6 	beq.w	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023f8:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a75      	ldr	r2, [pc, #468]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002404:	f7fe fd40 	bl	8000e88 <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800240c:	f7fe fd3c 	bl	8000e88 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e195      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800241e:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d021      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11d      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002444:	0c1b      	lsrs	r3, r3, #16
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800244c:	4b61      	ldr	r3, [pc, #388]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800244e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002452:	0e1b      	lsrs	r3, r3, #24
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	019a      	lsls	r2, r3, #6
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	041b      	lsls	r3, r3, #16
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	061b      	lsls	r3, r3, #24
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	071b      	lsls	r3, r3, #28
 8002472:	4958      	ldr	r1, [pc, #352]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02e      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a4:	d129      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024a6:	4b4b      	ldr	r3, [pc, #300]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ba:	0f1b      	lsrs	r3, r3, #28
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	019a      	lsls	r2, r3, #6
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	071b      	lsls	r3, r3, #28
 80024da:	493e      	ldr	r1, [pc, #248]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80024e2:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e8:	f023 021f 	bic.w	r2, r3, #31
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	3b01      	subs	r3, #1
 80024f2:	4938      	ldr	r1, [pc, #224]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d01d      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002506:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250c:	0e1b      	lsrs	r3, r3, #24
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251a:	0f1b      	lsrs	r3, r3, #28
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	019a      	lsls	r2, r3, #6
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431a      	orrs	r2, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	431a      	orrs	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	071b      	lsls	r3, r3, #28
 800253a:	4926      	ldr	r1, [pc, #152]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d011      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	019a      	lsls	r2, r3, #6
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	491a      	ldr	r1, [pc, #104]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800257c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257e:	f7fe fc83 	bl	8000e88 <HAL_GetTick>
 8002582:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002586:	f7fe fc7f 	bl	8000e88 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0d8      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	f040 80ce 	bne.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7fe fc66 	bl	8000e88 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025be:	e00b      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025c0:	f7fe fc62 	bl	8000e88 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d904      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0bb      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025d8:	4b5e      	ldr	r3, [pc, #376]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e4:	d0ec      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02e      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d12a      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800260e:	4b51      	ldr	r3, [pc, #324]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800261c:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	0f1b      	lsrs	r3, r3, #28
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	019a      	lsls	r2, r3, #6
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	061b      	lsls	r3, r3, #24
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	4944      	ldr	r1, [pc, #272]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800264c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002650:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	3b01      	subs	r3, #1
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	493d      	ldr	r1, [pc, #244]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d022      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002678:	d11d      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	0e1b      	lsrs	r3, r3, #24
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002688:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	0f1b      	lsrs	r3, r3, #28
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	019a      	lsls	r2, r3, #6
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	4929      	ldr	r1, [pc, #164]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d028      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c8:	0e1b      	lsrs	r3, r3, #24
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	019a      	lsls	r2, r3, #6
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	071b      	lsls	r3, r3, #28
 80026f6:	4917      	ldr	r1, [pc, #92]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	4911      	ldr	r1, [pc, #68]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe fbb2 	bl	8000e88 <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002728:	f7fe fbae 	bl	8000e88 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e007      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002746:	d1ef      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e049      	b.n	80027fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f93e 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f000 fb6e 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e049      	b.n	80028ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f841 	bl	80028b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f000 fb17 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_TIM_PWM_Start+0x24>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e03c      	b.n	8002966 <HAL_TIM_PWM_Start+0x9e>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d109      	bne.n	8002906 <HAL_TIM_PWM_Start+0x3e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e02f      	b.n	8002966 <HAL_TIM_PWM_Start+0x9e>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d109      	bne.n	8002920 <HAL_TIM_PWM_Start+0x58>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e022      	b.n	8002966 <HAL_TIM_PWM_Start+0x9e>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d109      	bne.n	800293a <HAL_TIM_PWM_Start+0x72>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b01      	cmp	r3, #1
 8002930:	bf14      	ite	ne
 8002932:	2301      	movne	r3, #1
 8002934:	2300      	moveq	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	e015      	b.n	8002966 <HAL_TIM_PWM_Start+0x9e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d109      	bne.n	8002954 <HAL_TIM_PWM_Start+0x8c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e008      	b.n	8002966 <HAL_TIM_PWM_Start+0x9e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e092      	b.n	8002a94 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d104      	bne.n	800297e <HAL_TIM_PWM_Start+0xb6>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297c:	e023      	b.n	80029c6 <HAL_TIM_PWM_Start+0xfe>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d104      	bne.n	800298e <HAL_TIM_PWM_Start+0xc6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298c:	e01b      	b.n	80029c6 <HAL_TIM_PWM_Start+0xfe>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d104      	bne.n	800299e <HAL_TIM_PWM_Start+0xd6>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	e013      	b.n	80029c6 <HAL_TIM_PWM_Start+0xfe>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_PWM_Start+0xe6>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029ac:	e00b      	b.n	80029c6 <HAL_TIM_PWM_Start+0xfe>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0xf6>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029bc:	e003      	b.n	80029c6 <HAL_TIM_PWM_Start+0xfe>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fdea 	bl	80035a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a30      	ldr	r2, [pc, #192]	; (8002a9c <HAL_TIM_PWM_Start+0x1d4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_PWM_Start+0x120>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <HAL_TIM_PWM_Start+0x1d8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_PWM_Start+0x124>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_TIM_PWM_Start+0x126>
 80029ec:	2300      	movs	r3, #0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_TIM_PWM_Start+0x1d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d01d      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_TIM_PWM_Start+0x1dc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d018      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_TIM_PWM_Start+0x1e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <HAL_TIM_PWM_Start+0x1e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <HAL_TIM_PWM_Start+0x1d8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_TIM_PWM_Start+0x1e8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x18a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_TIM_PWM_Start+0x1ec>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d115      	bne.n	8002a7e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <HAL_TIM_PWM_Start+0x1f0>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d015      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x1c8>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6a:	d011      	beq.n	8002a90 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7c:	e008      	b.n	8002a90 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e000      	b.n	8002a92 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010400 	.word	0x40010400
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800
 8002aac:	40000c00 	.word	0x40000c00
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40001800 	.word	0x40001800
 8002ab8:	00010007 	.word	0x00010007

08002abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e0ff      	b.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b14      	cmp	r3, #20
 8002ae6:	f200 80f0 	bhi.w	8002cca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002ccb 	.word	0x08002ccb
 8002af8:	08002ccb 	.word	0x08002ccb
 8002afc:	08002ccb 	.word	0x08002ccb
 8002b00:	08002b85 	.word	0x08002b85
 8002b04:	08002ccb 	.word	0x08002ccb
 8002b08:	08002ccb 	.word	0x08002ccb
 8002b0c:	08002ccb 	.word	0x08002ccb
 8002b10:	08002bc7 	.word	0x08002bc7
 8002b14:	08002ccb 	.word	0x08002ccb
 8002b18:	08002ccb 	.word	0x08002ccb
 8002b1c:	08002ccb 	.word	0x08002ccb
 8002b20:	08002c07 	.word	0x08002c07
 8002b24:	08002ccb 	.word	0x08002ccb
 8002b28:	08002ccb 	.word	0x08002ccb
 8002b2c:	08002ccb 	.word	0x08002ccb
 8002b30:	08002c49 	.word	0x08002c49
 8002b34:	08002ccb 	.word	0x08002ccb
 8002b38:	08002ccb 	.word	0x08002ccb
 8002b3c:	08002ccb 	.word	0x08002ccb
 8002b40:	08002c89 	.word	0x08002c89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fa34 	bl	8002fb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6999      	ldr	r1, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	619a      	str	r2, [r3, #24]
      break;
 8002b82:	e0a5      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fa86 	bl	800309c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	619a      	str	r2, [r3, #24]
      break;
 8002bc4:	e084      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fadd 	bl	800318c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0208 	orr.w	r2, r2, #8
 8002be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0204 	bic.w	r2, r2, #4
 8002bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69d9      	ldr	r1, [r3, #28]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]
      break;
 8002c04:	e064      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fb33 	bl	8003278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69d9      	ldr	r1, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	021a      	lsls	r2, r3, #8
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	61da      	str	r2, [r3, #28]
      break;
 8002c46:	e043      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fb6a 	bl	8003328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0208 	orr.w	r2, r2, #8
 8002c62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0204 	bic.w	r2, r2, #4
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c86:	e023      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fb9c 	bl	80033cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ca2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	021a      	lsls	r2, r3, #8
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cc8:	e002      	b.n	8002cd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8002cce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIM_ConfigClockSource+0x1c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e0b4      	b.n	8002e6a <HAL_TIM_ConfigClockSource+0x186>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_TIM_ConfigClockSource+0x190>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d38:	d03e      	beq.n	8002db8 <HAL_TIM_ConfigClockSource+0xd4>
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3e:	f200 8087 	bhi.w	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d46:	f000 8086 	beq.w	8002e56 <HAL_TIM_ConfigClockSource+0x172>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	d87f      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b70      	cmp	r3, #112	; 0x70
 8002d52:	d01a      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0xa6>
 8002d54:	2b70      	cmp	r3, #112	; 0x70
 8002d56:	d87b      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b60      	cmp	r3, #96	; 0x60
 8002d5a:	d050      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x11a>
 8002d5c:	2b60      	cmp	r3, #96	; 0x60
 8002d5e:	d877      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b50      	cmp	r3, #80	; 0x50
 8002d62:	d03c      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0xfa>
 8002d64:	2b50      	cmp	r3, #80	; 0x50
 8002d66:	d873      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d058      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x13a>
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d86f      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	d064      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d74:	2b30      	cmp	r3, #48	; 0x30
 8002d76:	d86b      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d060      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d867      	bhi.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05c      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d05a      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	e062      	b.n	8002e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d9a:	f000 fbe5 	bl	8003568 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
      break;
 8002db6:	e04f      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc8:	f000 fbce 	bl	8003568 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dda:	609a      	str	r2, [r3, #8]
      break;
 8002ddc:	e03c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 fb42 	bl	8003474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2150      	movs	r1, #80	; 0x50
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fb9b 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e02c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fb61 	bl	80034d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2160      	movs	r1, #96	; 0x60
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fb8b 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e01c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 fb22 	bl	8003474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fb7b 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e00c      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4610      	mov	r0, r2
 8002e4a:	f000 fb72 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002e4e:	e003      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e000      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	fffeff88 	.word	0xfffeff88

08002e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <TIM_Base_SetConfig+0x114>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d00f      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a3d      	ldr	r2, [pc, #244]	; (8002f90 <TIM_Base_SetConfig+0x118>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00b      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <TIM_Base_SetConfig+0x11c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d007      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <TIM_Base_SetConfig+0x120>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_Base_SetConfig+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <TIM_Base_SetConfig+0x124>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d108      	bne.n	8002eca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <TIM_Base_SetConfig+0x114>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02b      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d027      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <TIM_Base_SetConfig+0x118>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d023      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <TIM_Base_SetConfig+0x11c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <TIM_Base_SetConfig+0x120>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01b      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	; (8002f9c <TIM_Base_SetConfig+0x124>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d017      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <TIM_Base_SetConfig+0x128>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <TIM_Base_SetConfig+0x12c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00f      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <TIM_Base_SetConfig+0x130>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a25      	ldr	r2, [pc, #148]	; (8002fac <TIM_Base_SetConfig+0x134>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d007      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a24      	ldr	r2, [pc, #144]	; (8002fb0 <TIM_Base_SetConfig+0x138>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <TIM_Base_SetConfig+0x13c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <TIM_Base_SetConfig+0x114>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0xf8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <TIM_Base_SetConfig+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40010400 	.word	0x40010400
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400
 8002fa8:	40014800 	.word	0x40014800
 8002fac:	40001800 	.word	0x40001800
 8002fb0:	40001c00 	.word	0x40001c00
 8002fb4:	40002000 	.word	0x40002000

08002fb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <TIM_OC1_SetConfig+0xd8>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f023 0302 	bic.w	r3, r3, #2
 8003000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <TIM_OC1_SetConfig+0xdc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_OC1_SetConfig+0x64>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a20      	ldr	r2, [pc, #128]	; (8003098 <TIM_OC1_SetConfig+0xe0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10c      	bne.n	8003036 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0308 	bic.w	r3, r3, #8
 8003022:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a16      	ldr	r2, [pc, #88]	; (8003094 <TIM_OC1_SetConfig+0xdc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_OC1_SetConfig+0x8e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <TIM_OC1_SetConfig+0xe0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d111      	bne.n	800306a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	fffeff8f 	.word	0xfffeff8f
 8003094:	40010000 	.word	0x40010000
 8003098:	40010400 	.word	0x40010400

0800309c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0210 	bic.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4b2e      	ldr	r3, [pc, #184]	; (8003180 <TIM_OC2_SetConfig+0xe4>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a23      	ldr	r2, [pc, #140]	; (8003184 <TIM_OC2_SetConfig+0xe8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_OC2_SetConfig+0x68>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a22      	ldr	r2, [pc, #136]	; (8003188 <TIM_OC2_SetConfig+0xec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10d      	bne.n	8003120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800310a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <TIM_OC2_SetConfig+0xe8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_OC2_SetConfig+0x94>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <TIM_OC2_SetConfig+0xec>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d113      	bne.n	8003158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	feff8fff 	.word	0xfeff8fff
 8003184:	40010000 	.word	0x40010000
 8003188:	40010400 	.word	0x40010400

0800318c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <TIM_OC3_SetConfig+0xe0>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <TIM_OC3_SetConfig+0xe4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_OC3_SetConfig+0x66>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a21      	ldr	r2, [pc, #132]	; (8003274 <TIM_OC3_SetConfig+0xe8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10d      	bne.n	800320e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a17      	ldr	r2, [pc, #92]	; (8003270 <TIM_OC3_SetConfig+0xe4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d003      	beq.n	800321e <TIM_OC3_SetConfig+0x92>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a16      	ldr	r2, [pc, #88]	; (8003274 <TIM_OC3_SetConfig+0xe8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d113      	bne.n	8003246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800322c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	fffeff8f 	.word	0xfffeff8f
 8003270:	40010000 	.word	0x40010000
 8003274:	40010400 	.word	0x40010400

08003278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <TIM_OC4_SetConfig+0xa4>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	031b      	lsls	r3, r3, #12
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <TIM_OC4_SetConfig+0xa8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_OC4_SetConfig+0x68>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <TIM_OC4_SetConfig+0xac>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d109      	bne.n	80032f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	feff8fff 	.word	0xfeff8fff
 8003320:	40010000 	.word	0x40010000
 8003324:	40010400 	.word	0x40010400

08003328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <TIM_OC5_SetConfig+0x98>)
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003368:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	041b      	lsls	r3, r3, #16
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <TIM_OC5_SetConfig+0x9c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d003      	beq.n	8003386 <TIM_OC5_SetConfig+0x5e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <TIM_OC5_SetConfig+0xa0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d109      	bne.n	800339a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	fffeff8f 	.word	0xfffeff8f
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40010400 	.word	0x40010400

080033cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <TIM_OC6_SetConfig+0x9c>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800340e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	051b      	lsls	r3, r3, #20
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <TIM_OC6_SetConfig+0xa0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_OC6_SetConfig+0x60>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <TIM_OC6_SetConfig+0xa4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d109      	bne.n	8003440 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003432:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	029b      	lsls	r3, r3, #10
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	feff8fff 	.word	0xfeff8fff
 800346c:	40010000 	.word	0x40010000
 8003470:	40010400 	.word	0x40010400

08003474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0201 	bic.w	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 030a 	bic.w	r3, r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0210 	bic.w	r2, r3, #16
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800350e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	f043 0307 	orr.w	r3, r3, #7
 8003554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021a      	lsls	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	431a      	orrs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e06d      	b.n	80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2f      	ldr	r2, [pc, #188]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d108      	bne.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003646:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003658:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d01d      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a16      	ldr	r2, [pc, #88]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a15      	ldr	r2, [pc, #84]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d10c      	bne.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40010400 	.word	0x40010400
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40014000 	.word	0x40014000
 800370c:	40001800 	.word	0x40001800

08003710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e040      	b.n	80037a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd fa12 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	; 0x24
 800373c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fc86 	bl	8004060 <UART_SetConfig>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e022      	b.n	80037a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fede 	bl	8004528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 ff65 	bl	800466c <UART_CheckIdleState>
 80037a2:	4603      	mov	r3, r0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d171      	bne.n	80038a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_UART_Transmit+0x24>
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e06a      	b.n	80038aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2221      	movs	r2, #33	; 0x21
 80037e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037e2:	f7fd fb51 	bl	8000e88 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	88fa      	ldrh	r2, [r7, #6]
 80037f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d108      	bne.n	8003814 <HAL_UART_Transmit+0x68>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e003      	b.n	800381c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800381c:	e02c      	b.n	8003878 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 ff6c 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e038      	b.n	80038aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	3302      	adds	r3, #2
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	e007      	b.n	8003866 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1cc      	bne.n	800381e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	2140      	movs	r1, #64	; 0x40
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 ff39 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e005      	b.n	80038aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08a      	sub	sp, #40	; 0x28
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	f040 80b1 	bne.w	8003a30 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_UART_Receive+0x28>
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0a9      	b.n	8003a32 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2222      	movs	r2, #34	; 0x22
 80038ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f4:	f7fd fac8 	bl	8000e88 <HAL_GetTick>
 80038f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d10e      	bne.n	8003932 <HAL_UART_Receive+0x80>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_UART_Receive+0x76>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003922:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003926:	e02d      	b.n	8003984 <HAL_UART_Receive+0xd2>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003930:	e028      	b.n	8003984 <HAL_UART_Receive+0xd2>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <HAL_UART_Receive+0xa4>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Receive+0x9a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800394a:	e01b      	b.n	8003984 <HAL_UART_Receive+0xd2>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	227f      	movs	r2, #127	; 0x7f
 8003950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003954:	e016      	b.n	8003984 <HAL_UART_Receive+0xd2>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395e:	d10d      	bne.n	800397c <HAL_UART_Receive+0xca>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <HAL_UART_Receive+0xc0>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	227f      	movs	r2, #127	; 0x7f
 800396c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003970:	e008      	b.n	8003984 <HAL_UART_Receive+0xd2>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	223f      	movs	r2, #63	; 0x3f
 8003976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800397a:	e003      	b.n	8003984 <HAL_UART_Receive+0xd2>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800398a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Receive+0xf6>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039b0:	e032      	b.n	8003a18 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2120      	movs	r1, #32
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fea2 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e032      	b.n	8003a32 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b29a      	uxth	r2, r3
 80039da:	8a7b      	ldrh	r3, [r7, #18]
 80039dc:	4013      	ands	r3, r2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	3302      	adds	r3, #2
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	e00c      	b.n	8003a06 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	8a7b      	ldrh	r3, [r7, #18]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4013      	ands	r3, r2
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1c6      	bne.n	80039b2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b0ba      	sub	sp, #232	; 0xe8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00f      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 82ac 	beq.w	8003ff2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
      }
      return;
 8003aa2:	e2a6      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003aa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8117 	beq.w	8003cdc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003aba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_UART_IRQHandler+0x298>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 810a 	beq.w	8003cdc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d011      	beq.n	8003af8 <HAL_UART_IRQHandler+0xbc>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aee:	f043 0201 	orr.w	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d011      	beq.n	8003b28 <HAL_UART_IRQHandler+0xec>
 8003b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2202      	movs	r2, #2
 8003b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1e:	f043 0204 	orr.w	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d011      	beq.n	8003b58 <HAL_UART_IRQHandler+0x11c>
 8003b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2204      	movs	r2, #4
 8003b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2208      	movs	r2, #8
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8a:	f043 0208 	orr.w	r2, r3, #8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x18a>
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8212 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	d005      	beq.n	8003c1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fe37 	bl	8004892 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d141      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_UART_IRQHandler+0x29c>)
 8003c8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fa85 	bl	80011a2 <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d017      	beq.n	8003cce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00f      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9b6 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00b      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f9b2 	bl	8004020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e007      	b.n	8003cce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f9ae 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003ccc:	e193      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	bf00      	nop
    return;
 8003cd0:	e191      	b.n	8003ff6 <HAL_UART_IRQHandler+0x5ba>
 8003cd2:	bf00      	nop
 8003cd4:	04000120 	.word	0x04000120
 8003cd8:	0800495b 	.word	0x0800495b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f040 814c 	bne.w	8003f7e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8145 	beq.w	8003f7e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 813e 	beq.w	8003f7e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2210      	movs	r2, #16
 8003d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	f040 80b6 	bne.w	8003e86 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8165 	beq.w	8003ffa <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 815d 	bcs.w	8003ffa <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d54:	f000 8086 	beq.w	8003e64 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1da      	bne.n	8003d58 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e1      	bne.n	8003da2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e3      	bne.n	8003dde <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e4      	bne.n	8003e24 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd f92f 	bl	80010c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f8d8 	bl	8004034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e84:	e0b9      	b.n	8003ffa <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80ab 	beq.w	8003ffe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a6 	beq.w	8003ffe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e4      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f0c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e3      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f023 0310 	bic.w	r3, r3, #16
 8003f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	617b      	str	r3, [r7, #20]
   return(result);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e4      	bne.n	8003f34 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f85c 	bl	8004034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f7c:	e03f      	b.n	8003ffe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00e      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x56c>
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f853 	bl	800404c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fa6:	e02d      	b.n	8004004 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01c      	beq.n	8004002 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
    }
    return;
 8003fd0:	e017      	b.n	8004002 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d012      	beq.n	8004004 <HAL_UART_IRQHandler+0x5c8>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fccb 	bl	8004986 <UART_EndTransmit_IT>
    return;
 8003ff0:	e008      	b.n	8004004 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003ff2:	bf00      	nop
 8003ff4:	e006      	b.n	8004004 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003ff6:	bf00      	nop
 8003ff8:	e004      	b.n	8004004 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004002:	bf00      	nop
  }

}
 8004004:	37e8      	adds	r7, #232	; 0xe8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop

0800400c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4ba6      	ldr	r3, [pc, #664]	; (8004324 <UART_SetConfig+0x2c4>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	430b      	orrs	r3, r1
 8004096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a94      	ldr	r2, [pc, #592]	; (8004328 <UART_SetConfig+0x2c8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d120      	bne.n	800411e <UART_SetConfig+0xbe>
 80040dc:	4b93      	ldr	r3, [pc, #588]	; (800432c <UART_SetConfig+0x2cc>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d816      	bhi.n	8004118 <UART_SetConfig+0xb8>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0x90>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	08004101 	.word	0x08004101
 80040f4:	0800410d 	.word	0x0800410d
 80040f8:	08004107 	.word	0x08004107
 80040fc:	08004113 	.word	0x08004113
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e150      	b.n	80043a8 <UART_SetConfig+0x348>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e14d      	b.n	80043a8 <UART_SetConfig+0x348>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e14a      	b.n	80043a8 <UART_SetConfig+0x348>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e147      	b.n	80043a8 <UART_SetConfig+0x348>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e144      	b.n	80043a8 <UART_SetConfig+0x348>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a83      	ldr	r2, [pc, #524]	; (8004330 <UART_SetConfig+0x2d0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d132      	bne.n	800418e <UART_SetConfig+0x12e>
 8004128:	4b80      	ldr	r3, [pc, #512]	; (800432c <UART_SetConfig+0x2cc>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b0c      	cmp	r3, #12
 8004134:	d828      	bhi.n	8004188 <UART_SetConfig+0x128>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <UART_SetConfig+0xdc>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004171 	.word	0x08004171
 8004140:	08004189 	.word	0x08004189
 8004144:	08004189 	.word	0x08004189
 8004148:	08004189 	.word	0x08004189
 800414c:	0800417d 	.word	0x0800417d
 8004150:	08004189 	.word	0x08004189
 8004154:	08004189 	.word	0x08004189
 8004158:	08004189 	.word	0x08004189
 800415c:	08004177 	.word	0x08004177
 8004160:	08004189 	.word	0x08004189
 8004164:	08004189 	.word	0x08004189
 8004168:	08004189 	.word	0x08004189
 800416c:	08004183 	.word	0x08004183
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e118      	b.n	80043a8 <UART_SetConfig+0x348>
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e115      	b.n	80043a8 <UART_SetConfig+0x348>
 800417c:	2304      	movs	r3, #4
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e112      	b.n	80043a8 <UART_SetConfig+0x348>
 8004182:	2308      	movs	r3, #8
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e10f      	b.n	80043a8 <UART_SetConfig+0x348>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e10c      	b.n	80043a8 <UART_SetConfig+0x348>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a68      	ldr	r2, [pc, #416]	; (8004334 <UART_SetConfig+0x2d4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d120      	bne.n	80041da <UART_SetConfig+0x17a>
 8004198:	4b64      	ldr	r3, [pc, #400]	; (800432c <UART_SetConfig+0x2cc>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041a2:	2b30      	cmp	r3, #48	; 0x30
 80041a4:	d013      	beq.n	80041ce <UART_SetConfig+0x16e>
 80041a6:	2b30      	cmp	r3, #48	; 0x30
 80041a8:	d814      	bhi.n	80041d4 <UART_SetConfig+0x174>
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d009      	beq.n	80041c2 <UART_SetConfig+0x162>
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d810      	bhi.n	80041d4 <UART_SetConfig+0x174>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <UART_SetConfig+0x15c>
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d006      	beq.n	80041c8 <UART_SetConfig+0x168>
 80041ba:	e00b      	b.n	80041d4 <UART_SetConfig+0x174>
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e0f2      	b.n	80043a8 <UART_SetConfig+0x348>
 80041c2:	2302      	movs	r3, #2
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e0ef      	b.n	80043a8 <UART_SetConfig+0x348>
 80041c8:	2304      	movs	r3, #4
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0ec      	b.n	80043a8 <UART_SetConfig+0x348>
 80041ce:	2308      	movs	r3, #8
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0e9      	b.n	80043a8 <UART_SetConfig+0x348>
 80041d4:	2310      	movs	r3, #16
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e0e6      	b.n	80043a8 <UART_SetConfig+0x348>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a56      	ldr	r2, [pc, #344]	; (8004338 <UART_SetConfig+0x2d8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d120      	bne.n	8004226 <UART_SetConfig+0x1c6>
 80041e4:	4b51      	ldr	r3, [pc, #324]	; (800432c <UART_SetConfig+0x2cc>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041ee:	2bc0      	cmp	r3, #192	; 0xc0
 80041f0:	d013      	beq.n	800421a <UART_SetConfig+0x1ba>
 80041f2:	2bc0      	cmp	r3, #192	; 0xc0
 80041f4:	d814      	bhi.n	8004220 <UART_SetConfig+0x1c0>
 80041f6:	2b80      	cmp	r3, #128	; 0x80
 80041f8:	d009      	beq.n	800420e <UART_SetConfig+0x1ae>
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d810      	bhi.n	8004220 <UART_SetConfig+0x1c0>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <UART_SetConfig+0x1a8>
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d006      	beq.n	8004214 <UART_SetConfig+0x1b4>
 8004206:	e00b      	b.n	8004220 <UART_SetConfig+0x1c0>
 8004208:	2300      	movs	r3, #0
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e0cc      	b.n	80043a8 <UART_SetConfig+0x348>
 800420e:	2302      	movs	r3, #2
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e0c9      	b.n	80043a8 <UART_SetConfig+0x348>
 8004214:	2304      	movs	r3, #4
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e0c6      	b.n	80043a8 <UART_SetConfig+0x348>
 800421a:	2308      	movs	r3, #8
 800421c:	77fb      	strb	r3, [r7, #31]
 800421e:	e0c3      	b.n	80043a8 <UART_SetConfig+0x348>
 8004220:	2310      	movs	r3, #16
 8004222:	77fb      	strb	r3, [r7, #31]
 8004224:	e0c0      	b.n	80043a8 <UART_SetConfig+0x348>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a44      	ldr	r2, [pc, #272]	; (800433c <UART_SetConfig+0x2dc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d125      	bne.n	800427c <UART_SetConfig+0x21c>
 8004230:	4b3e      	ldr	r3, [pc, #248]	; (800432c <UART_SetConfig+0x2cc>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d017      	beq.n	8004270 <UART_SetConfig+0x210>
 8004240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004244:	d817      	bhi.n	8004276 <UART_SetConfig+0x216>
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d00b      	beq.n	8004264 <UART_SetConfig+0x204>
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d811      	bhi.n	8004276 <UART_SetConfig+0x216>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <UART_SetConfig+0x1fe>
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d006      	beq.n	800426a <UART_SetConfig+0x20a>
 800425c:	e00b      	b.n	8004276 <UART_SetConfig+0x216>
 800425e:	2300      	movs	r3, #0
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e0a1      	b.n	80043a8 <UART_SetConfig+0x348>
 8004264:	2302      	movs	r3, #2
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e09e      	b.n	80043a8 <UART_SetConfig+0x348>
 800426a:	2304      	movs	r3, #4
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e09b      	b.n	80043a8 <UART_SetConfig+0x348>
 8004270:	2308      	movs	r3, #8
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e098      	b.n	80043a8 <UART_SetConfig+0x348>
 8004276:	2310      	movs	r3, #16
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e095      	b.n	80043a8 <UART_SetConfig+0x348>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2f      	ldr	r2, [pc, #188]	; (8004340 <UART_SetConfig+0x2e0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d125      	bne.n	80042d2 <UART_SetConfig+0x272>
 8004286:	4b29      	ldr	r3, [pc, #164]	; (800432c <UART_SetConfig+0x2cc>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004294:	d017      	beq.n	80042c6 <UART_SetConfig+0x266>
 8004296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800429a:	d817      	bhi.n	80042cc <UART_SetConfig+0x26c>
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a0:	d00b      	beq.n	80042ba <UART_SetConfig+0x25a>
 80042a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a6:	d811      	bhi.n	80042cc <UART_SetConfig+0x26c>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <UART_SetConfig+0x254>
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b0:	d006      	beq.n	80042c0 <UART_SetConfig+0x260>
 80042b2:	e00b      	b.n	80042cc <UART_SetConfig+0x26c>
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e076      	b.n	80043a8 <UART_SetConfig+0x348>
 80042ba:	2302      	movs	r3, #2
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e073      	b.n	80043a8 <UART_SetConfig+0x348>
 80042c0:	2304      	movs	r3, #4
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e070      	b.n	80043a8 <UART_SetConfig+0x348>
 80042c6:	2308      	movs	r3, #8
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e06d      	b.n	80043a8 <UART_SetConfig+0x348>
 80042cc:	2310      	movs	r3, #16
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e06a      	b.n	80043a8 <UART_SetConfig+0x348>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <UART_SetConfig+0x2e4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d138      	bne.n	800434e <UART_SetConfig+0x2ee>
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <UART_SetConfig+0x2cc>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042ea:	d017      	beq.n	800431c <UART_SetConfig+0x2bc>
 80042ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042f0:	d82a      	bhi.n	8004348 <UART_SetConfig+0x2e8>
 80042f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f6:	d00b      	beq.n	8004310 <UART_SetConfig+0x2b0>
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fc:	d824      	bhi.n	8004348 <UART_SetConfig+0x2e8>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <UART_SetConfig+0x2aa>
 8004302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004306:	d006      	beq.n	8004316 <UART_SetConfig+0x2b6>
 8004308:	e01e      	b.n	8004348 <UART_SetConfig+0x2e8>
 800430a:	2300      	movs	r3, #0
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e04b      	b.n	80043a8 <UART_SetConfig+0x348>
 8004310:	2302      	movs	r3, #2
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e048      	b.n	80043a8 <UART_SetConfig+0x348>
 8004316:	2304      	movs	r3, #4
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e045      	b.n	80043a8 <UART_SetConfig+0x348>
 800431c:	2308      	movs	r3, #8
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e042      	b.n	80043a8 <UART_SetConfig+0x348>
 8004322:	bf00      	nop
 8004324:	efff69f3 	.word	0xefff69f3
 8004328:	40011000 	.word	0x40011000
 800432c:	40023800 	.word	0x40023800
 8004330:	40004400 	.word	0x40004400
 8004334:	40004800 	.word	0x40004800
 8004338:	40004c00 	.word	0x40004c00
 800433c:	40005000 	.word	0x40005000
 8004340:	40011400 	.word	0x40011400
 8004344:	40007800 	.word	0x40007800
 8004348:	2310      	movs	r3, #16
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e02c      	b.n	80043a8 <UART_SetConfig+0x348>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a72      	ldr	r2, [pc, #456]	; (800451c <UART_SetConfig+0x4bc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d125      	bne.n	80043a4 <UART_SetConfig+0x344>
 8004358:	4b71      	ldr	r3, [pc, #452]	; (8004520 <UART_SetConfig+0x4c0>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004362:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004366:	d017      	beq.n	8004398 <UART_SetConfig+0x338>
 8004368:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800436c:	d817      	bhi.n	800439e <UART_SetConfig+0x33e>
 800436e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004372:	d00b      	beq.n	800438c <UART_SetConfig+0x32c>
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	d811      	bhi.n	800439e <UART_SetConfig+0x33e>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <UART_SetConfig+0x326>
 800437e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004382:	d006      	beq.n	8004392 <UART_SetConfig+0x332>
 8004384:	e00b      	b.n	800439e <UART_SetConfig+0x33e>
 8004386:	2300      	movs	r3, #0
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e00d      	b.n	80043a8 <UART_SetConfig+0x348>
 800438c:	2302      	movs	r3, #2
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e00a      	b.n	80043a8 <UART_SetConfig+0x348>
 8004392:	2304      	movs	r3, #4
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e007      	b.n	80043a8 <UART_SetConfig+0x348>
 8004398:	2308      	movs	r3, #8
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e004      	b.n	80043a8 <UART_SetConfig+0x348>
 800439e:	2310      	movs	r3, #16
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e001      	b.n	80043a8 <UART_SetConfig+0x348>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d15b      	bne.n	800446a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043b2:	7ffb      	ldrb	r3, [r7, #31]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d828      	bhi.n	800440a <UART_SetConfig+0x3aa>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x360>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043e5 	.word	0x080043e5
 80043c4:	080043ed 	.word	0x080043ed
 80043c8:	080043f5 	.word	0x080043f5
 80043cc:	0800440b 	.word	0x0800440b
 80043d0:	080043fb 	.word	0x080043fb
 80043d4:	0800440b 	.word	0x0800440b
 80043d8:	0800440b 	.word	0x0800440b
 80043dc:	0800440b 	.word	0x0800440b
 80043e0:	08004403 	.word	0x08004403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7fd fd68 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80043e8:	61b8      	str	r0, [r7, #24]
        break;
 80043ea:	e013      	b.n	8004414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fd fd78 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 80043f0:	61b8      	str	r0, [r7, #24]
        break;
 80043f2:	e00f      	b.n	8004414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <UART_SetConfig+0x4c4>)
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e00c      	b.n	8004414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fa:	f7fd fc8b 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 80043fe:	61b8      	str	r0, [r7, #24]
        break;
 8004400:	e008      	b.n	8004414 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004406:	61bb      	str	r3, [r7, #24]
        break;
 8004408:	e004      	b.n	8004414 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	77bb      	strb	r3, [r7, #30]
        break;
 8004412:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d074      	beq.n	8004504 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	005a      	lsls	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	fbb2 f3f3 	udiv	r3, r2, r3
 800442e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b0f      	cmp	r3, #15
 8004434:	d916      	bls.n	8004464 <UART_SetConfig+0x404>
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443c:	d212      	bcs.n	8004464 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	b29b      	uxth	r3, r3
 8004442:	f023 030f 	bic.w	r3, r3, #15
 8004446:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	b29b      	uxth	r3, r3
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	b29a      	uxth	r2, r3
 8004454:	89fb      	ldrh	r3, [r7, #14]
 8004456:	4313      	orrs	r3, r2
 8004458:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	89fa      	ldrh	r2, [r7, #14]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e04f      	b.n	8004504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	77bb      	strb	r3, [r7, #30]
 8004468:	e04c      	b.n	8004504 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800446a:	7ffb      	ldrb	r3, [r7, #31]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d828      	bhi.n	80044c2 <UART_SetConfig+0x462>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0x418>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044c3 	.word	0x080044c3
 8004488:	080044b3 	.word	0x080044b3
 800448c:	080044c3 	.word	0x080044c3
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044bb 	.word	0x080044bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fd fd0c 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80044a0:	61b8      	str	r0, [r7, #24]
        break;
 80044a2:	e013      	b.n	80044cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fd fd1c 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 80044a8:	61b8      	str	r0, [r7, #24]
        break;
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <UART_SetConfig+0x4c4>)
 80044ae:	61bb      	str	r3, [r7, #24]
        break;
 80044b0:	e00c      	b.n	80044cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b2:	f7fd fc2f 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 80044b6:	61b8      	str	r0, [r7, #24]
        break;
 80044b8:	e008      	b.n	80044cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044be:	61bb      	str	r3, [r7, #24]
        break;
 80044c0:	e004      	b.n	80044cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	77bb      	strb	r3, [r7, #30]
        break;
 80044ca:	bf00      	nop
    }

    if (pclk != 0U)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d018      	beq.n	8004504 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	085a      	lsrs	r2, r3, #1
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b0f      	cmp	r3, #15
 80044ea:	d909      	bls.n	8004500 <UART_SetConfig+0x4a0>
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f2:	d205      	bcs.n	8004500 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
 80044fe:	e001      	b.n	8004504 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004510:	7fbb      	ldrb	r3, [r7, #30]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40007c00 	.word	0x40007c00
 8004520:	40023800 	.word	0x40023800
 8004524:	00f42400 	.word	0x00f42400

08004528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01a      	beq.n	800463e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004626:	d10a      	bne.n	800463e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800467c:	f7fc fc04 	bl	8000e88 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d10e      	bne.n	80046ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f831 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e027      	b.n	80046fe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d10e      	bne.n	80046da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f81b 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e011      	b.n	80046fe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b09c      	sub	sp, #112	; 0x70
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004716:	e0a7      	b.n	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800471e:	f000 80a3 	beq.w	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fc fbb1 	bl	8000e88 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <UART_WaitOnFlagUntilTimeout+0x32>
 8004732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004734:	2b00      	cmp	r3, #0
 8004736:	d13f      	bne.n	80047b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800474c:	667b      	str	r3, [r7, #100]	; 0x64
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004758:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800475c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3308      	adds	r3, #8
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3308      	adds	r3, #8
 8004788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800478a:	64ba      	str	r2, [r7, #72]	; 0x48
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e5      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e068      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d050      	beq.n	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d4:	d148      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004800:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e6      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	613b      	str	r3, [r7, #16]
   return(result);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	66bb      	str	r3, [r7, #104]	; 0x68
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004832:	623a      	str	r2, [r7, #32]
 8004834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004836:	69f9      	ldr	r1, [r7, #28]
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1e5      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e010      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	429a      	cmp	r2, r3
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	429a      	cmp	r2, r3
 8004884:	f43f af48 	beq.w	8004718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3770      	adds	r7, #112	; 0x70
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004892:	b480      	push	{r7}
 8004894:	b095      	sub	sp, #84	; 0x54
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	2b01      	cmp	r3, #1
 8004906:	d118      	bne.n	800493a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	60bb      	str	r3, [r7, #8]
   return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	613b      	str	r3, [r7, #16]
   return(result);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800494e:	bf00      	nop
 8004950:	3754      	adds	r7, #84	; 0x54
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7ff fb51 	bl	8004020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800497e:	bf00      	nop
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b088      	sub	sp, #32
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60bb      	str	r3, [r7, #8]
   return(result);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e6      	bne.n	800498e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fb1d 	bl	800400c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049d2:	bf00      	nop
 80049d4:	3720      	adds	r7, #32
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <memset>:
 80049da:	4402      	add	r2, r0
 80049dc:	4603      	mov	r3, r0
 80049de:	4293      	cmp	r3, r2
 80049e0:	d100      	bne.n	80049e4 <memset+0xa>
 80049e2:	4770      	bx	lr
 80049e4:	f803 1b01 	strb.w	r1, [r3], #1
 80049e8:	e7f9      	b.n	80049de <memset+0x4>
	...

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f818 	bl	8004a34 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004a70 	.word	0x08004a70
 8004a28:	08004a70 	.word	0x08004a70
 8004a2c:	08004a70 	.word	0x08004a70
 8004a30:	08004a74 	.word	0x08004a74

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
