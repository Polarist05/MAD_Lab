
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e1c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003088  08003088  00013088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003090  08003090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080030a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080030a4  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008de8  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001517  00000000  00000000  00028e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  0002a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000527  00000000  00000000  0002aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c35  00000000  00000000  0002af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f69  00000000  00000000  00050b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed0b8  00000000  00000000  00059afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a7c  00000000  00000000  00146bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00148634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002ffc 	.word	0x08002ffc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002ffc 	.word	0x08002ffc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <RecieveString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char recieveStr[50];
int recieveStrLength=0;
void RecieveString(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	recieveStrLength=0;
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <RecieveString+0xb4>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	char ch = 'a';
 8000550:	2361      	movs	r3, #97	; 0x61
 8000552:	71fb      	strb	r3, [r7, #7]
	while(ch!='\r'){
 8000554:	e032      	b.n	80005bc <RecieveString+0x78>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 8000556:	bf00      	nop
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <RecieveString+0xb8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	2b20      	cmp	r3, #32
 8000564:	d1f8      	bne.n	8000558 <RecieveString+0x14>
		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 1000);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	2201      	movs	r2, #1
 800056e:	4823      	ldr	r0, [pc, #140]	; (80005fc <RecieveString+0xb8>)
 8000570:	f002 f839 	bl	80025e6 <HAL_UART_Receive>
		if(ch!='\b'){
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b08      	cmp	r3, #8
 8000578:	d008      	beq.n	800058c <RecieveString+0x48>
		  	recieveStr[recieveStrLength++]= ch;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <RecieveString+0xb4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	491d      	ldr	r1, [pc, #116]	; (80005f8 <RecieveString+0xb4>)
 8000582:	600a      	str	r2, [r1, #0]
 8000584:	79f9      	ldrb	r1, [r7, #7]
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <RecieveString+0xbc>)
 8000588:	54d1      	strb	r1, [r2, r3]
 800058a:	e008      	b.n	800059e <RecieveString+0x5a>
		}
		else if(recieveStrLength>0){
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <RecieveString+0xb4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	dd04      	ble.n	800059e <RecieveString+0x5a>
		  	recieveStrLength--;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <RecieveString+0xb4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <RecieveString+0xb4>)
 800059c:	6013      	str	r3, [r2, #0]
		}
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800059e:	bf00      	nop
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <RecieveString+0xb8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	2b40      	cmp	r3, #64	; 0x40
 80005ac:	d1f8      	bne.n	80005a0 <RecieveString+0x5c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1,1000);
 80005ae:	1df9      	adds	r1, r7, #7
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	2201      	movs	r2, #1
 80005b6:	4811      	ldr	r0, [pc, #68]	; (80005fc <RecieveString+0xb8>)
 80005b8:	f001 ff92 	bl	80024e0 <HAL_UART_Transmit>
	while(ch!='\r'){
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b0d      	cmp	r3, #13
 80005c0:	d1c9      	bne.n	8000556 <RecieveString+0x12>
	}
	recieveStr[recieveStrLength++]= '\n';
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <RecieveString+0xb4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	490b      	ldr	r1, [pc, #44]	; (80005f8 <RecieveString+0xb4>)
 80005ca:	600a      	str	r2, [r1, #0]
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <RecieveString+0xbc>)
 80005ce:	210a      	movs	r1, #10
 80005d0:	54d1      	strb	r1, [r2, r3]
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80005d2:	bf00      	nop
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <RecieveString+0xb8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005de:	2b40      	cmp	r3, #64	; 0x40
 80005e0:	d1f8      	bne.n	80005d4 <RecieveString+0x90>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1,1000);
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	2201      	movs	r2, #1
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <RecieveString+0xc0>)
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <RecieveString+0xb8>)
 80005ec:	f001 ff78 	bl	80024e0 <HAL_UART_Transmit>

}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000e4 	.word	0x200000e4
 80005fc:	20000028 	.word	0x20000028
 8000600:	200000b0 	.word	0x200000b0
 8000604:	08003014 	.word	0x08003014

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b0a2      	sub	sp, #136	; 0x88
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 faf2 	bl	8000bf6 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000612:	f000 f9d5 	bl	80009c0 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f92f 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9b9 	bl	8000990 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800061e:	f000 f987 	bl	8000930 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char startStr1[] = "Man from U.A.R.T.1!\r\nQuit PRESS q\r\n",startStr2[] = "Name : ",startStr3[]=" is ready\r\n",arrowStr[] = " => ";
 8000622:	4b8a      	ldr	r3, [pc, #552]	; (800084c <main+0x244>)
 8000624:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000632:	682b      	ldr	r3, [r5, #0]
 8000634:	6023      	str	r3, [r4, #0]
 8000636:	4a86      	ldr	r2, [pc, #536]	; (8000850 <main+0x248>)
 8000638:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800063c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000640:	e883 0003 	stmia.w	r3, {r0, r1}
 8000644:	4a83      	ldr	r2, [pc, #524]	; (8000854 <main+0x24c>)
 8000646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800064a:	ca07      	ldmia	r2, {r0, r1, r2}
 800064c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000650:	4a81      	ldr	r2, [pc, #516]	; (8000858 <main+0x250>)
 8000652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	7019      	strb	r1, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char userName1[50] ,userName2[]="USER2";
 8000660:	4a7e      	ldr	r2, [pc, #504]	; (800085c <main+0x254>)
 8000662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800066a:	6018      	str	r0, [r3, #0]
 800066c:	3304      	adds	r3, #4
 800066e:	8019      	strh	r1, [r3, #0]
	int userNameLength1=0;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000676:	bf00      	nop
 8000678:	4b79      	ldr	r3, [pc, #484]	; (8000860 <main+0x258>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000682:	2b40      	cmp	r3, #64	; 0x40
 8000684:	d1f8      	bne.n	8000678 <main+0x70>
		HAL_UART_Transmit(&huart3, (uint8_t*) startStr1, strlen(startStr1),1000);
 8000686:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	2223      	movs	r2, #35	; 0x23
 8000690:	4873      	ldr	r0, [pc, #460]	; (8000860 <main+0x258>)
 8000692:	f001 ff25 	bl	80024e0 <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000696:	bf00      	nop
 8000698:	4b71      	ldr	r3, [pc, #452]	; (8000860 <main+0x258>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a2:	2b40      	cmp	r3, #64	; 0x40
 80006a4:	d1f8      	bne.n	8000698 <main+0x90>
		HAL_UART_Transmit(&huart3, (uint8_t*) startStr2, strlen(startStr2),1000);
 80006a6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	2207      	movs	r2, #7
 80006b0:	486b      	ldr	r0, [pc, #428]	; (8000860 <main+0x258>)
 80006b2:	f001 ff15 	bl	80024e0 <HAL_UART_Transmit>
	RecieveString();
 80006b6:	f7ff ff45 	bl	8000544 <RecieveString>
	for(int i=0;i<recieveStrLength-2;i++){
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80006c0:	e00f      	b.n	80006e2 <main+0xda>
		userName1[i]=recieveStr[i];
 80006c2:	4a68      	ldr	r2, [pc, #416]	; (8000864 <main+0x25c>)
 80006c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006c8:	4413      	add	r3, r2
 80006ca:	7819      	ldrb	r1, [r3, #0]
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006d2:	4413      	add	r3, r2
 80006d4:	460a      	mov	r2, r1
 80006d6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<recieveStrLength-2;i++){
 80006d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006dc:	3301      	adds	r3, #1
 80006de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80006e2:	4b61      	ldr	r3, [pc, #388]	; (8000868 <main+0x260>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3b02      	subs	r3, #2
 80006e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dbe8      	blt.n	80006c2 <main+0xba>
	}
	userNameLength1=recieveStrLength-2;
 80006f0:	4b5d      	ldr	r3, [pc, #372]	; (8000868 <main+0x260>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b02      	subs	r3, #2
 80006f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006fa:	bf00      	nop
 80006fc:	4b58      	ldr	r3, [pc, #352]	; (8000860 <main+0x258>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000706:	2b40      	cmp	r3, #64	; 0x40
 8000708:	d1f8      	bne.n	80006fc <main+0xf4>
		HAL_UART_Transmit(&huart3, (uint8_t*) userName2, strlen(userName2),1000);
 800070a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fd92 	bl	8000238 <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	484f      	ldr	r0, [pc, #316]	; (8000860 <main+0x258>)
 8000722:	f001 fedd 	bl	80024e0 <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000726:	bf00      	nop
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <main+0x258>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	2b40      	cmp	r3, #64	; 0x40
 8000734:	d1f8      	bne.n	8000728 <main+0x120>
		HAL_UART_Transmit(&huart3, (uint8_t*) startStr3, strlen(startStr3),1000);
 8000736:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	220b      	movs	r2, #11
 8000740:	4847      	ldr	r0, [pc, #284]	; (8000860 <main+0x258>)
 8000742:	f001 fecd 	bl	80024e0 <HAL_UART_Transmit>
	while(1){
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000746:	bf00      	nop
 8000748:	4b45      	ldr	r3, [pc, #276]	; (8000860 <main+0x258>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000752:	2b40      	cmp	r3, #64	; 0x40
 8000754:	d1f8      	bne.n	8000748 <main+0x140>
			HAL_UART_Transmit(&huart3, (uint8_t*) "\t", 1,1000);
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	2201      	movs	r2, #1
 800075c:	4943      	ldr	r1, [pc, #268]	; (800086c <main+0x264>)
 800075e:	4840      	ldr	r0, [pc, #256]	; (8000860 <main+0x258>)
 8000760:	f001 febe 	bl	80024e0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000764:	bf00      	nop
 8000766:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <main+0x258>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000770:	2b40      	cmp	r3, #64	; 0x40
 8000772:	d1f8      	bne.n	8000766 <main+0x15e>
			HAL_UART_Transmit(&huart3, (uint8_t*) userName1, userNameLength1,1000);
 8000774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000778:	b29a      	uxth	r2, r3
 800077a:	1d39      	adds	r1, r7, #4
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	4837      	ldr	r0, [pc, #220]	; (8000860 <main+0x258>)
 8000782:	f001 fead 	bl	80024e0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000786:	bf00      	nop
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <main+0x258>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	2b40      	cmp	r3, #64	; 0x40
 8000794:	d1f8      	bne.n	8000788 <main+0x180>
			HAL_UART_Transmit(&huart3, (uint8_t*) arrowStr, strlen(arrowStr),1000);
 8000796:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	2204      	movs	r2, #4
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <main+0x258>)
 80007a2:	f001 fe9d 	bl	80024e0 <HAL_UART_Transmit>
		RecieveString();
 80007a6:	f7ff fecd 	bl	8000544 <RecieveString>
		if(recieveStr[0]==1&&recieveStrLength==2){
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <main+0x25c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d103      	bne.n	80007ba <main+0x1b2>
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <main+0x260>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d036      	beq.n	8000828 <main+0x220>
			break;
		}
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007ba:	bf00      	nop
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <main+0x258>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	2b40      	cmp	r3, #64	; 0x40
 80007c8:	d1f8      	bne.n	80007bc <main+0x1b4>
			HAL_UART_Transmit(&huart3, (uint8_t*) userName2, strlen(userName2),1000);
 80007ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd32 	bl	8000238 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <main+0x258>)
 80007e2:	f001 fe7d 	bl	80024e0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007e6:	bf00      	nop
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <main+0x258>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	2b40      	cmp	r3, #64	; 0x40
 80007f4:	d1f8      	bne.n	80007e8 <main+0x1e0>
			HAL_UART_Transmit(&huart3, (uint8_t*) " : ", 3,1000);
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	2203      	movs	r2, #3
 80007fc:	491c      	ldr	r1, [pc, #112]	; (8000870 <main+0x268>)
 80007fe:	4818      	ldr	r0, [pc, #96]	; (8000860 <main+0x258>)
 8000800:	f001 fe6e 	bl	80024e0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000804:	bf00      	nop
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <main+0x258>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000810:	2b40      	cmp	r3, #64	; 0x40
 8000812:	d1f8      	bne.n	8000806 <main+0x1fe>
			HAL_UART_Transmit(&huart3, (uint8_t*) recieveStr, recieveStrLength,1000);
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <main+0x260>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	b29a      	uxth	r2, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	4911      	ldr	r1, [pc, #68]	; (8000864 <main+0x25c>)
 8000820:	480f      	ldr	r0, [pc, #60]	; (8000860 <main+0x258>)
 8000822:	f001 fe5d 	bl	80024e0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000826:	e78e      	b.n	8000746 <main+0x13e>
			break;
 8000828:	bf00      	nop
	}
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800082a:	bf00      	nop
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <main+0x258>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	2b40      	cmp	r3, #64	; 0x40
 8000838:	d1f8      	bne.n	800082c <main+0x224>
		HAL_UART_Transmit(&huart3, (uint8_t*) "QUIT", 4,1000);
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	2204      	movs	r2, #4
 8000840:	490c      	ldr	r1, [pc, #48]	; (8000874 <main+0x26c>)
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <main+0x258>)
 8000844:	f001 fe4c 	bl	80024e0 <HAL_UART_Transmit>
  {
 8000848:	e70a      	b.n	8000660 <main+0x58>
 800084a:	bf00      	nop
 800084c:	08003028 	.word	0x08003028
 8000850:	0800304c 	.word	0x0800304c
 8000854:	08003054 	.word	0x08003054
 8000858:	08003060 	.word	0x08003060
 800085c:	08003068 	.word	0x08003068
 8000860:	20000028 	.word	0x20000028
 8000864:	200000b0 	.word	0x200000b0
 8000868:	200000e4 	.word	0x200000e4
 800086c:	08003018 	.word	0x08003018
 8000870:	0800301c 	.word	0x0800301c
 8000874:	08003020 	.word	0x08003020

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2234      	movs	r2, #52	; 0x34
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fb8b 	bl	8002fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xb0>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xb0>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xb0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <SystemClock_Config+0xb4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008bc:	4a1b      	ldr	r2, [pc, #108]	; (800092c <SystemClock_Config+0xb4>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <SystemClock_Config+0xb4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d4:	2301      	movs	r3, #1
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d8:	2310      	movs	r3, #16
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fcf1 	bl	80012cc <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008f0:	f000 f892 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	230f      	movs	r3, #15
 80008f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f000 ff8a 	bl	8001828 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800091a:	f000 f87d 	bl	8000a18 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000974:	f001 fd66 	bl	8002444 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f84b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000028 	.word	0x20000028
 800098c:	40004800 	.word	0x40004800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_GPIO_Init+0x2c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <MX_GPIO_Init+0x2c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_GPIO_Init+0x2c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800

080009c0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009d2:	f000 fa53 	bl	8000e7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009da:	2300      	movs	r3, #0
 80009dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009e2:	231f      	movs	r3, #31
 80009e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009e6:	2387      	movs	r3, #135	; 0x87
 80009e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009ee:	2300      	movs	r3, #0
 80009f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009f6:	2301      	movs	r3, #1
 80009f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a02:	463b      	mov	r3, r7
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fa71 	bl	8000eec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a0a:	2004      	movs	r0, #4
 8000a0c:	f000 fa4e 	bl	8000eac <HAL_MPU_Enable>

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a5a:	2005      	movs	r0, #5
 8000a5c:	f000 f9da 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ae      	sub	sp, #184	; 0xb8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2290      	movs	r2, #144	; 0x90
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 fa88 	bl	8002fa2 <memset>
  if(huart->Instance==USART3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <HAL_UART_MspInit+0xb4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d13c      	bne.n	8000b16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f8a2 	bl	8001bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ab6:	f7ff ffaf 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_UART_MspInit+0xb8>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b04:	2307      	movs	r3, #7
 8000b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0xbc>)
 8000b12:	f000 fa2f 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	37b8      	adds	r7, #184	; 0xb8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004800 	.word	0x40004800
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f87a 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SystemInit+0x20>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SystemInit+0x20>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000baa:	490e      	ldr	r1, [pc, #56]	; (8000be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc0:	4c0b      	ldr	r4, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bce:	f7ff ffd7 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f002 f9ef 	bl	8002fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fd17 	bl	8000608 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000be8:	08003098 	.word	0x08003098
  ldr r2, =_sbss
 8000bec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bf0:	200000ec 	.word	0x200000ec

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>

08000bf6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 f90a 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f805 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c06:	f7ff ff0d 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f917 	bl	8000e62 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 f8ed 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200000e8 	.word	0x200000e8

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200000e8 	.word	0x200000e8

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	05fa0000 	.word	0x05fa0000

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff47 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff5c 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb0 	bl	8000dd0 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e80:	f3bf 8f5f 	dmb	sy
}
 8000e84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_MPU_Disable+0x28>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_MPU_Disable+0x28>)
 8000e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e90:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_MPU_Disable+0x2c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00
 8000ea8:	e000ed90 	.word	0xe000ed90

08000eac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_MPU_Enable+0x38>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MPU_Enable+0x3c>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_MPU_Enable+0x3c>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000eca:	f3bf 8f4f 	dsb	sy
}
 8000ece:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ed0:	f3bf 8f6f 	isb	sy
}
 8000ed4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed90 	.word	0xe000ed90
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	785a      	ldrb	r2, [r3, #1]
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_MPU_ConfigRegion+0x84>)
 8000efa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d029      	beq.n	8000f58 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000f04:	4a1a      	ldr	r2, [pc, #104]	; (8000f70 <HAL_MPU_ConfigRegion+0x84>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7adb      	ldrb	r3, [r3, #11]
 8000f16:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7a9b      	ldrb	r3, [r3, #10]
 8000f1e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7b5b      	ldrb	r3, [r3, #13]
 8000f26:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7b9b      	ldrb	r3, [r3, #14]
 8000f2e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7bdb      	ldrb	r3, [r3, #15]
 8000f36:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7a5b      	ldrb	r3, [r3, #9]
 8000f3e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7a1b      	ldrb	r3, [r3, #8]
 8000f46:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f48:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f52:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f54:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f56:	e005      	b.n	8000f64 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_MPU_ConfigRegion+0x84>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_MPU_ConfigRegion+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed90 	.word	0xe000ed90

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e175      	b.n	8001280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8164 	bne.w	800127a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x56>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80be 	beq.w	800127a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a65      	ldr	r2, [pc, #404]	; (8001298 <HAL_GPIO_Init+0x324>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_GPIO_Init+0x324>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001116:	4a61      	ldr	r2, [pc, #388]	; (800129c <HAL_GPIO_Init+0x328>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_GPIO_Init+0x32c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d037      	beq.n	80011b2 <HAL_GPIO_Init+0x23e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a57      	ldr	r2, [pc, #348]	; (80012a4 <HAL_GPIO_Init+0x330>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d031      	beq.n	80011ae <HAL_GPIO_Init+0x23a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <HAL_GPIO_Init+0x334>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d02b      	beq.n	80011aa <HAL_GPIO_Init+0x236>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a55      	ldr	r2, [pc, #340]	; (80012ac <HAL_GPIO_Init+0x338>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d025      	beq.n	80011a6 <HAL_GPIO_Init+0x232>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x33c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01f      	beq.n	80011a2 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a53      	ldr	r2, [pc, #332]	; (80012b4 <HAL_GPIO_Init+0x340>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_GPIO_Init+0x344>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a51      	ldr	r2, [pc, #324]	; (80012bc <HAL_GPIO_Init+0x348>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <HAL_GPIO_Init+0x34c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_GPIO_Init+0x350>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x21a>
 800118a:	2309      	movs	r3, #9
 800118c:	e012      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800118e:	230a      	movs	r3, #10
 8001190:	e010      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001192:	2308      	movs	r3, #8
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001196:	2307      	movs	r3, #7
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <HAL_GPIO_Init+0x328>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_GPIO_Init+0x354>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a34      	ldr	r2, [pc, #208]	; (80012c8 <HAL_GPIO_Init+0x354>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_GPIO_Init+0x354>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_GPIO_Init+0x354>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <HAL_GPIO_Init+0x354>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae86 	bls.w	8000f94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40022000 	.word	0x40022000
 80012c4:	40022400 	.word	0x40022400
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e29b      	b.n	800181a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b96      	ldr	r3, [pc, #600]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fc:	4b93      	ldr	r3, [pc, #588]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0x62>
 8001308:	4b90      	ldr	r3, [pc, #576]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b8d      	ldr	r3, [pc, #564]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x130>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e275      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x7a>
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a83      	ldr	r2, [pc, #524]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0xd8>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x9c>
 800134e:	4b7f      	ldr	r3, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7e      	ldr	r2, [pc, #504]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b7c      	ldr	r3, [pc, #496]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a7b      	ldr	r2, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xd8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0xc0>
 8001372:	4b76      	ldr	r3, [pc, #472]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a75      	ldr	r2, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a72      	ldr	r2, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xd8>
 800138c:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a6b      	ldr	r2, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc74 	bl	8000c98 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc70 	bl	8000c98 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e229      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b61      	ldr	r3, [pc, #388]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc60 	bl	8000c98 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc5c 	bl	8000c98 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e215      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x110>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d069      	beq.n	80014de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b4d      	ldr	r3, [pc, #308]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x190>
 8001422:	4b4a      	ldr	r3, [pc, #296]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x17a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1e9      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	493d      	ldr	r1, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e040      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a38      	ldr	r2, [pc, #224]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc12 	bl	8000c98 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc0e 	bl	8000c98 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e1c7      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4929      	ldr	r1, [pc, #164]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
 80014aa:	e018      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbee 	bl	8000c98 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c0:	f7ff fbea 	bl	8000c98 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1a3      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d038      	beq.n	800155c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d019      	beq.n	8001526 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x280>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbcb 	bl	8000c98 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fbc7 	bl	8000c98 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e180      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800151a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x23a>
 8001524:	e01a      	b.n	800155c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x280>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <HAL_RCC_OscConfig+0x280>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fbb1 	bl	8000c98 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fbad 	bl	8000c98 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d903      	bls.n	8001550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e166      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
 800154c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a4 	beq.w	80016b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10d      	bne.n	8001592 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a88      	ldr	r2, [pc, #544]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b86      	ldr	r3, [pc, #536]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001592:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7f      	ldr	r2, [pc, #508]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fb75 	bl	8000c98 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff fb71 	bl	8000c98 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e12a      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <HAL_RCC_OscConfig+0x4d4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x31a>
 80015d8:	4b70      	ldr	r3, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	e02d      	b.n	8001642 <HAL_RCC_OscConfig+0x376>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x33c>
 80015ee:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a67      	ldr	r2, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
 8001606:	e01c      	b.n	8001642 <HAL_RCC_OscConfig+0x376>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x35e>
 8001610:	4b62      	ldr	r3, [pc, #392]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a61      	ldr	r2, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	4b5f      	ldr	r3, [pc, #380]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a5e      	ldr	r2, [pc, #376]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	e00b      	b.n	8001642 <HAL_RCC_OscConfig+0x376>
 800162a:	4b5c      	ldr	r3, [pc, #368]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162e:	4a5b      	ldr	r2, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6713      	str	r3, [r2, #112]	; 0x70
 8001636:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163a:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d015      	beq.n	8001676 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fb25 	bl	8000c98 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fb21 	bl	8000c98 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0d8      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ee      	beq.n	8001652 <HAL_RCC_OscConfig+0x386>
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fb0f 	bl	8000c98 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fb0b 	bl	8000c98 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e0c2      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ee      	bne.n	800167e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d105      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a3c      	ldr	r2, [pc, #240]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80ae 	beq.w	8001818 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016bc:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d06d      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d14b      	bne.n	8001768 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a31      	ldr	r2, [pc, #196]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80016d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fadc 	bl	8000c98 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff fad8 	bl	8000c98 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e091      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69da      	ldr	r2, [r3, #28]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	019b      	lsls	r3, r3, #6
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	061b      	lsls	r3, r3, #24
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	071b      	lsls	r3, r3, #28
 800172e:	491b      	ldr	r1, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800173a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff faaa 	bl	8000c98 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff faa6 	bl	8000c98 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e05f      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x47c>
 8001766:	e057      	b.n	8001818 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fa90 	bl	8000c98 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fa8c 	bl	8000c98 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e045      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_RCC_OscConfig+0x4d0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x4b0>
 800179a:	e03d      	b.n	8001818 <HAL_RCC_OscConfig+0x54c>
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <HAL_RCC_OscConfig+0x558>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d030      	beq.n	8001814 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d129      	bne.n	8001814 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d122      	bne.n	8001814 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017dc:	4293      	cmp	r3, r2
 80017de:	d119      	bne.n	8001814 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	3b01      	subs	r3, #1
 80017ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10f      	bne.n	8001814 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0d0      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d910      	bls.n	8001870 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 020f 	bic.w	r2, r3, #15
 8001856:	4965      	ldr	r1, [pc, #404]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0b8      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001888:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 800188e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001892:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a0:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ac:	4b50      	ldr	r3, [pc, #320]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	494d      	ldr	r1, [pc, #308]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d040      	beq.n	800194c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d115      	bne.n	800190a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e07f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e073      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e06b      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4936      	ldr	r1, [pc, #216]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800191c:	f7ff f9bc 	bl	8000c98 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff f9b8 	bl	8000c98 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e053      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d210      	bcs.n	800197c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 020f 	bic.w	r2, r3, #15
 8001962:	4922      	ldr	r1, [pc, #136]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e032      	b.n	80019e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4916      	ldr	r1, [pc, #88]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	490e      	ldr	r1, [pc, #56]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ba:	f000 f821 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	490a      	ldr	r1, [pc, #40]	; (80019f4 <HAL_RCC_ClockConfig+0x1cc>)
 80019cc:	5ccb      	ldrb	r3, [r1, r3]
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1d0>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_ClockConfig+0x1d4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f918 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023c00 	.word	0x40023c00
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08003070 	.word	0x08003070
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b090      	sub	sp, #64	; 0x40
 8001a06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a10:	2300      	movs	r3, #0
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a18:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d00d      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x40>
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	f200 80a1 	bhi.w	8001b6c <HAL_RCC_GetSysClockFreq+0x16c>
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x34>
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d003      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a32:	e09b      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b53      	ldr	r3, [pc, #332]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a38:	e09b      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a3e:	e098      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a4a:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d028      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	099b      	lsrs	r3, r3, #6
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	627a      	str	r2, [r7, #36]	; 0x24
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a6c:	fb03 f201 	mul.w	r2, r3, r1
 8001a70:	2300      	movs	r3, #0
 8001a72:	fb00 f303 	mul.w	r3, r0, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	4a43      	ldr	r2, [pc, #268]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a7a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a80:	460a      	mov	r2, r1
 8001a82:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a86:	4413      	add	r3, r2
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	61fa      	str	r2, [r7, #28]
 8001a92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a9a:	f7fe fbd5 	bl	8000248 <__aeabi_uldivmod>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa6:	e053      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	2200      	movs	r2, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	617a      	str	r2, [r7, #20]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001aba:	f04f 0b00 	mov.w	fp, #0
 8001abe:	4652      	mov	r2, sl
 8001ac0:	465b      	mov	r3, fp
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	0159      	lsls	r1, r3, #5
 8001acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad0:	0150      	lsls	r0, r2, #5
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	ebb2 080a 	subs.w	r8, r2, sl
 8001ada:	eb63 090b 	sbc.w	r9, r3, fp
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001aea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001af2:	ebb2 0408 	subs.w	r4, r2, r8
 8001af6:	eb63 0509 	sbc.w	r5, r3, r9
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	00eb      	lsls	r3, r5, #3
 8001b04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b08:	00e2      	lsls	r2, r4, #3
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	eb14 030a 	adds.w	r3, r4, sl
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	eb45 030b 	adc.w	r3, r5, fp
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	60fa      	str	r2, [r7, #12]
 8001b40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b44:	f7fe fb80 	bl	8000248 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3740      	adds	r7, #64	; 0x40
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	017d7840 	.word	0x017d7840

08001b8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08003080 	.word	0x08003080

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffdc 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0b5b      	lsrs	r3, r3, #13
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	08003080 	.word	0x08003080

08001bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d012      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c1c:	4b69      	ldr	r3, [pc, #420]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c26:	6093      	str	r3, [r2, #8]
 8001c28:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c30:	4964      	ldr	r1, [pc, #400]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d017      	beq.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	4959      	ldr	r1, [pc, #356]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d017      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	494a      	ldr	r1, [pc, #296]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca8:	d101      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 808b 	beq.w	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a34      	ldr	r2, [pc, #208]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfc:	f7fe ffcc 	bl	8000c98 <HAL_GetTick>
 8001d00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7fe ffc8 	bl	8000c98 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e38f      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d035      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d02e      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d114      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe ff90 	bl	8000c98 <HAL_GetTick>
 8001d78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ff8c 	bl	8000c98 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e351      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0ee      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001daa:	d111      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001dba:	400b      	ands	r3, r1
 8001dbc:	4901      	ldr	r1, [pc, #4]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	0ffffcff 	.word	0x0ffffcff
 8001dd0:	4bac      	ldr	r3, [pc, #688]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4aab      	ldr	r2, [pc, #684]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dda:	6093      	str	r3, [r2, #8]
 8001ddc:	4ba9      	ldr	r3, [pc, #676]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	49a6      	ldr	r1, [pc, #664]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d010      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dfa:	4ba2      	ldr	r3, [pc, #648]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e00:	4aa0      	ldr	r2, [pc, #640]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e0a:	4b9e      	ldr	r3, [pc, #632]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	499b      	ldr	r1, [pc, #620]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e28:	4b96      	ldr	r3, [pc, #600]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e36:	4993      	ldr	r1, [pc, #588]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e4a:	4b8e      	ldr	r3, [pc, #568]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e58:	498a      	ldr	r1, [pc, #552]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e6c:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e7a:	4982      	ldr	r1, [pc, #520]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e8e:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4979      	ldr	r1, [pc, #484]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb0:	4b74      	ldr	r3, [pc, #464]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4971      	ldr	r1, [pc, #452]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ed2:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f023 020c 	bic.w	r2, r3, #12
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	4968      	ldr	r1, [pc, #416]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4960      	ldr	r1, [pc, #384]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f16:	4b5b      	ldr	r3, [pc, #364]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f24:	4957      	ldr	r1, [pc, #348]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f38:	4b52      	ldr	r3, [pc, #328]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f46:	494f      	ldr	r1, [pc, #316]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4946      	ldr	r1, [pc, #280]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f7c:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	493e      	ldr	r1, [pc, #248]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f9e:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	4935      	ldr	r1, [pc, #212]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fc0:	4b30      	ldr	r3, [pc, #192]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fce:	492d      	ldr	r1, [pc, #180]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d011      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ff0:	4924      	ldr	r1, [pc, #144]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002030:	4914      	ldr	r1, [pc, #80]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002054:	490b      	ldr	r1, [pc, #44]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00f      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002078:	4902      	ldr	r1, [pc, #8]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002080:	e002      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002094:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800209a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	4986      	ldr	r1, [pc, #536]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00b      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80020b8:	4b81      	ldr	r3, [pc, #516]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020c8:	497d      	ldr	r1, [pc, #500]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d006      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80d6 	beq.w	8002290 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020e4:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f0:	f7fe fdd2 	bl	8000c98 <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020f8:	f7fe fdce 	bl	8000c98 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e195      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d021      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	2b00      	cmp	r3, #0
 8002128:	d11d      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800212a:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800212c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213e:	0e1b      	lsrs	r3, r3, #24
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	019a      	lsls	r2, r3, #6
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	061b      	lsls	r3, r3, #24
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	071b      	lsls	r3, r3, #28
 800215e:	4958      	ldr	r1, [pc, #352]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02e      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002190:	d129      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002192:	4b4b      	ldr	r3, [pc, #300]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021a0:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a6:	0f1b      	lsrs	r3, r3, #28
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	019a      	lsls	r2, r3, #6
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	041b      	lsls	r3, r3, #16
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	061b      	lsls	r3, r3, #24
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	071b      	lsls	r3, r3, #28
 80021c6:	493e      	ldr	r1, [pc, #248]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021ce:	4b3c      	ldr	r3, [pc, #240]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d4:	f023 021f 	bic.w	r2, r3, #31
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	3b01      	subs	r3, #1
 80021de:	4938      	ldr	r1, [pc, #224]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01d      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021f2:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f8:	0e1b      	lsrs	r3, r3, #24
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002200:	4b2f      	ldr	r3, [pc, #188]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002206:	0f1b      	lsrs	r3, r3, #28
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	019a      	lsls	r2, r3, #6
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431a      	orrs	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	071b      	lsls	r3, r3, #28
 8002226:	4926      	ldr	r1, [pc, #152]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d011      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	019a      	lsls	r2, r3, #6
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	071b      	lsls	r3, r3, #28
 8002256:	491a      	ldr	r1, [pc, #104]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226a:	f7fe fd15 	bl	8000c98 <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002272:	f7fe fd11 	bl	8000c98 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0d8      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002284:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	f040 80ce 	bne.w	8002434 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a4:	f7fe fcf8 	bl	8000c98 <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022aa:	e00b      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022ac:	f7fe fcf4 	bl	8000c98 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d904      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0bb      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022c4:	4b5e      	ldr	r3, [pc, #376]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d0:	d0ec      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d02e      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d12a      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022fa:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	0f1b      	lsrs	r3, r3, #28
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	019a      	lsls	r2, r3, #6
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	041b      	lsls	r3, r3, #16
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	061b      	lsls	r3, r3, #24
 8002328:	431a      	orrs	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	071b      	lsls	r3, r3, #28
 800232e:	4944      	ldr	r1, [pc, #272]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002336:	4b42      	ldr	r3, [pc, #264]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800233c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	493d      	ldr	r1, [pc, #244]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d022      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002364:	d11d      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	0e1b      	lsrs	r3, r3, #24
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	0f1b      	lsrs	r3, r3, #28
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	019a      	lsls	r2, r3, #6
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	041b      	lsls	r3, r3, #16
 800238e:	431a      	orrs	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	4929      	ldr	r1, [pc, #164]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d028      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	0e1b      	lsrs	r3, r3, #24
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	0c1b      	lsrs	r3, r3, #16
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	019a      	lsls	r2, r3, #6
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	071b      	lsls	r3, r3, #28
 80023e2:	4917      	ldr	r1, [pc, #92]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	4911      	ldr	r1, [pc, #68]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7fe fc44 	bl	8000c98 <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002414:	f7fe fc40 	bl	8000c98 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e007      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800242e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002432:	d1ef      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e040      	b.n	80024d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fb00 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2224      	movs	r2, #36	; 0x24
 8002470:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f974 	bl	8002770 <UART_SetConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e022      	b.n	80024d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fbcc 	bl	8002c38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fc53 	bl	8002d7c <UART_CheckIdleState>
 80024d6:	4603      	mov	r3, r0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d171      	bne.n	80025dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_UART_Transmit+0x24>
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e06a      	b.n	80025de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2221      	movs	r2, #33	; 0x21
 8002514:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002516:	f7fe fbbf 	bl	8000c98 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002534:	d108      	bne.n	8002548 <HAL_UART_Transmit+0x68>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	e003      	b.n	8002550 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002550:	e02c      	b.n	80025ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fc5a 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e038      	b.n	80025de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3302      	adds	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e007      	b.n	800259a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	3301      	adds	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1cc      	bne.n	8002552 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2200      	movs	r2, #0
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fc27 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e005      	b.n	80025de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b08a      	sub	sp, #40	; 0x28
 80025ea:	af02      	add	r7, sp, #8
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	f040 80b1 	bne.w	8002764 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_Receive+0x28>
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0a9      	b.n	8002766 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2222      	movs	r2, #34	; 0x22
 800261e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002628:	f7fe fb36 	bl	8000c98 <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	88fa      	ldrh	r2, [r7, #6]
 8002632:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002646:	d10e      	bne.n	8002666 <HAL_UART_Receive+0x80>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d105      	bne.n	800265c <HAL_UART_Receive+0x76>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800265a:	e02d      	b.n	80026b8 <HAL_UART_Receive+0xd2>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002664:	e028      	b.n	80026b8 <HAL_UART_Receive+0xd2>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_UART_Receive+0xa4>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Receive+0x9a>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	22ff      	movs	r2, #255	; 0xff
 800267a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800267e:	e01b      	b.n	80026b8 <HAL_UART_Receive+0xd2>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	227f      	movs	r2, #127	; 0x7f
 8002684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002688:	e016      	b.n	80026b8 <HAL_UART_Receive+0xd2>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002692:	d10d      	bne.n	80026b0 <HAL_UART_Receive+0xca>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_UART_Receive+0xc0>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	227f      	movs	r2, #127	; 0x7f
 80026a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026a4:	e008      	b.n	80026b8 <HAL_UART_Receive+0xd2>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	223f      	movs	r2, #63	; 0x3f
 80026aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026ae:	e003      	b.n	80026b8 <HAL_UART_Receive+0xd2>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80026be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d108      	bne.n	80026dc <HAL_UART_Receive+0xf6>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	e003      	b.n	80026e4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026e4:	e032      	b.n	800274c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2120      	movs	r1, #32
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb90 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e032      	b.n	8002766 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	b29a      	uxth	r2, r3
 800270e:	8a7b      	ldrh	r3, [r7, #18]
 8002710:	4013      	ands	r3, r2
 8002712:	b29a      	uxth	r2, r3
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3302      	adds	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e00c      	b.n	800273a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4013      	ands	r3, r2
 800272e:	b2da      	uxtb	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1c6      	bne.n	80026e6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4ba6      	ldr	r3, [pc, #664]	; (8002a34 <UART_SetConfig+0x2c4>)
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	6979      	ldr	r1, [r7, #20]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	430a      	orrs	r2, r1
 80027e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a94      	ldr	r2, [pc, #592]	; (8002a38 <UART_SetConfig+0x2c8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d120      	bne.n	800282e <UART_SetConfig+0xbe>
 80027ec:	4b93      	ldr	r3, [pc, #588]	; (8002a3c <UART_SetConfig+0x2cc>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d816      	bhi.n	8002828 <UART_SetConfig+0xb8>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <UART_SetConfig+0x90>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002811 	.word	0x08002811
 8002804:	0800281d 	.word	0x0800281d
 8002808:	08002817 	.word	0x08002817
 800280c:	08002823 	.word	0x08002823
 8002810:	2301      	movs	r3, #1
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	e150      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002816:	2302      	movs	r3, #2
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e14d      	b.n	8002ab8 <UART_SetConfig+0x348>
 800281c:	2304      	movs	r3, #4
 800281e:	77fb      	strb	r3, [r7, #31]
 8002820:	e14a      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002822:	2308      	movs	r3, #8
 8002824:	77fb      	strb	r3, [r7, #31]
 8002826:	e147      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002828:	2310      	movs	r3, #16
 800282a:	77fb      	strb	r3, [r7, #31]
 800282c:	e144      	b.n	8002ab8 <UART_SetConfig+0x348>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a83      	ldr	r2, [pc, #524]	; (8002a40 <UART_SetConfig+0x2d0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d132      	bne.n	800289e <UART_SetConfig+0x12e>
 8002838:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <UART_SetConfig+0x2cc>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d828      	bhi.n	8002898 <UART_SetConfig+0x128>
 8002846:	a201      	add	r2, pc, #4	; (adr r2, 800284c <UART_SetConfig+0xdc>)
 8002848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284c:	08002881 	.word	0x08002881
 8002850:	08002899 	.word	0x08002899
 8002854:	08002899 	.word	0x08002899
 8002858:	08002899 	.word	0x08002899
 800285c:	0800288d 	.word	0x0800288d
 8002860:	08002899 	.word	0x08002899
 8002864:	08002899 	.word	0x08002899
 8002868:	08002899 	.word	0x08002899
 800286c:	08002887 	.word	0x08002887
 8002870:	08002899 	.word	0x08002899
 8002874:	08002899 	.word	0x08002899
 8002878:	08002899 	.word	0x08002899
 800287c:	08002893 	.word	0x08002893
 8002880:	2300      	movs	r3, #0
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e118      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002886:	2302      	movs	r3, #2
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e115      	b.n	8002ab8 <UART_SetConfig+0x348>
 800288c:	2304      	movs	r3, #4
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e112      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002892:	2308      	movs	r3, #8
 8002894:	77fb      	strb	r3, [r7, #31]
 8002896:	e10f      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002898:	2310      	movs	r3, #16
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	e10c      	b.n	8002ab8 <UART_SetConfig+0x348>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <UART_SetConfig+0x2d4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d120      	bne.n	80028ea <UART_SetConfig+0x17a>
 80028a8:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <UART_SetConfig+0x2cc>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028b2:	2b30      	cmp	r3, #48	; 0x30
 80028b4:	d013      	beq.n	80028de <UART_SetConfig+0x16e>
 80028b6:	2b30      	cmp	r3, #48	; 0x30
 80028b8:	d814      	bhi.n	80028e4 <UART_SetConfig+0x174>
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d009      	beq.n	80028d2 <UART_SetConfig+0x162>
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d810      	bhi.n	80028e4 <UART_SetConfig+0x174>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <UART_SetConfig+0x15c>
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d006      	beq.n	80028d8 <UART_SetConfig+0x168>
 80028ca:	e00b      	b.n	80028e4 <UART_SetConfig+0x174>
 80028cc:	2300      	movs	r3, #0
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e0f2      	b.n	8002ab8 <UART_SetConfig+0x348>
 80028d2:	2302      	movs	r3, #2
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e0ef      	b.n	8002ab8 <UART_SetConfig+0x348>
 80028d8:	2304      	movs	r3, #4
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e0ec      	b.n	8002ab8 <UART_SetConfig+0x348>
 80028de:	2308      	movs	r3, #8
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e0e9      	b.n	8002ab8 <UART_SetConfig+0x348>
 80028e4:	2310      	movs	r3, #16
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e0e6      	b.n	8002ab8 <UART_SetConfig+0x348>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a56      	ldr	r2, [pc, #344]	; (8002a48 <UART_SetConfig+0x2d8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d120      	bne.n	8002936 <UART_SetConfig+0x1c6>
 80028f4:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <UART_SetConfig+0x2cc>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002900:	d013      	beq.n	800292a <UART_SetConfig+0x1ba>
 8002902:	2bc0      	cmp	r3, #192	; 0xc0
 8002904:	d814      	bhi.n	8002930 <UART_SetConfig+0x1c0>
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d009      	beq.n	800291e <UART_SetConfig+0x1ae>
 800290a:	2b80      	cmp	r3, #128	; 0x80
 800290c:	d810      	bhi.n	8002930 <UART_SetConfig+0x1c0>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <UART_SetConfig+0x1a8>
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d006      	beq.n	8002924 <UART_SetConfig+0x1b4>
 8002916:	e00b      	b.n	8002930 <UART_SetConfig+0x1c0>
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e0cc      	b.n	8002ab8 <UART_SetConfig+0x348>
 800291e:	2302      	movs	r3, #2
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e0c9      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002924:	2304      	movs	r3, #4
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e0c6      	b.n	8002ab8 <UART_SetConfig+0x348>
 800292a:	2308      	movs	r3, #8
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e0c3      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002930:	2310      	movs	r3, #16
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e0c0      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a44      	ldr	r2, [pc, #272]	; (8002a4c <UART_SetConfig+0x2dc>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d125      	bne.n	800298c <UART_SetConfig+0x21c>
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <UART_SetConfig+0x2cc>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800294e:	d017      	beq.n	8002980 <UART_SetConfig+0x210>
 8002950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002954:	d817      	bhi.n	8002986 <UART_SetConfig+0x216>
 8002956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295a:	d00b      	beq.n	8002974 <UART_SetConfig+0x204>
 800295c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002960:	d811      	bhi.n	8002986 <UART_SetConfig+0x216>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <UART_SetConfig+0x1fe>
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d006      	beq.n	800297a <UART_SetConfig+0x20a>
 800296c:	e00b      	b.n	8002986 <UART_SetConfig+0x216>
 800296e:	2300      	movs	r3, #0
 8002970:	77fb      	strb	r3, [r7, #31]
 8002972:	e0a1      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002974:	2302      	movs	r3, #2
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e09e      	b.n	8002ab8 <UART_SetConfig+0x348>
 800297a:	2304      	movs	r3, #4
 800297c:	77fb      	strb	r3, [r7, #31]
 800297e:	e09b      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002980:	2308      	movs	r3, #8
 8002982:	77fb      	strb	r3, [r7, #31]
 8002984:	e098      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002986:	2310      	movs	r3, #16
 8002988:	77fb      	strb	r3, [r7, #31]
 800298a:	e095      	b.n	8002ab8 <UART_SetConfig+0x348>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a2f      	ldr	r2, [pc, #188]	; (8002a50 <UART_SetConfig+0x2e0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d125      	bne.n	80029e2 <UART_SetConfig+0x272>
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <UART_SetConfig+0x2cc>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029a4:	d017      	beq.n	80029d6 <UART_SetConfig+0x266>
 80029a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029aa:	d817      	bhi.n	80029dc <UART_SetConfig+0x26c>
 80029ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b0:	d00b      	beq.n	80029ca <UART_SetConfig+0x25a>
 80029b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b6:	d811      	bhi.n	80029dc <UART_SetConfig+0x26c>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <UART_SetConfig+0x254>
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d006      	beq.n	80029d0 <UART_SetConfig+0x260>
 80029c2:	e00b      	b.n	80029dc <UART_SetConfig+0x26c>
 80029c4:	2301      	movs	r3, #1
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e076      	b.n	8002ab8 <UART_SetConfig+0x348>
 80029ca:	2302      	movs	r3, #2
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e073      	b.n	8002ab8 <UART_SetConfig+0x348>
 80029d0:	2304      	movs	r3, #4
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e070      	b.n	8002ab8 <UART_SetConfig+0x348>
 80029d6:	2308      	movs	r3, #8
 80029d8:	77fb      	strb	r3, [r7, #31]
 80029da:	e06d      	b.n	8002ab8 <UART_SetConfig+0x348>
 80029dc:	2310      	movs	r3, #16
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e06a      	b.n	8002ab8 <UART_SetConfig+0x348>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1b      	ldr	r2, [pc, #108]	; (8002a54 <UART_SetConfig+0x2e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d138      	bne.n	8002a5e <UART_SetConfig+0x2ee>
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <UART_SetConfig+0x2cc>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029fa:	d017      	beq.n	8002a2c <UART_SetConfig+0x2bc>
 80029fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a00:	d82a      	bhi.n	8002a58 <UART_SetConfig+0x2e8>
 8002a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a06:	d00b      	beq.n	8002a20 <UART_SetConfig+0x2b0>
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0c:	d824      	bhi.n	8002a58 <UART_SetConfig+0x2e8>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <UART_SetConfig+0x2aa>
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a16:	d006      	beq.n	8002a26 <UART_SetConfig+0x2b6>
 8002a18:	e01e      	b.n	8002a58 <UART_SetConfig+0x2e8>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	77fb      	strb	r3, [r7, #31]
 8002a1e:	e04b      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002a20:	2302      	movs	r3, #2
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e048      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002a26:	2304      	movs	r3, #4
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e045      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e042      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002a32:	bf00      	nop
 8002a34:	efff69f3 	.word	0xefff69f3
 8002a38:	40011000 	.word	0x40011000
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40004400 	.word	0x40004400
 8002a44:	40004800 	.word	0x40004800
 8002a48:	40004c00 	.word	0x40004c00
 8002a4c:	40005000 	.word	0x40005000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	40007800 	.word	0x40007800
 8002a58:	2310      	movs	r3, #16
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e02c      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a72      	ldr	r2, [pc, #456]	; (8002c2c <UART_SetConfig+0x4bc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d125      	bne.n	8002ab4 <UART_SetConfig+0x344>
 8002a68:	4b71      	ldr	r3, [pc, #452]	; (8002c30 <UART_SetConfig+0x4c0>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a76:	d017      	beq.n	8002aa8 <UART_SetConfig+0x338>
 8002a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a7c:	d817      	bhi.n	8002aae <UART_SetConfig+0x33e>
 8002a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a82:	d00b      	beq.n	8002a9c <UART_SetConfig+0x32c>
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a88:	d811      	bhi.n	8002aae <UART_SetConfig+0x33e>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <UART_SetConfig+0x326>
 8002a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a92:	d006      	beq.n	8002aa2 <UART_SetConfig+0x332>
 8002a94:	e00b      	b.n	8002aae <UART_SetConfig+0x33e>
 8002a96:	2300      	movs	r3, #0
 8002a98:	77fb      	strb	r3, [r7, #31]
 8002a9a:	e00d      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e00a      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	77fb      	strb	r3, [r7, #31]
 8002aa6:	e007      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	77fb      	strb	r3, [r7, #31]
 8002aac:	e004      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002aae:	2310      	movs	r3, #16
 8002ab0:	77fb      	strb	r3, [r7, #31]
 8002ab2:	e001      	b.n	8002ab8 <UART_SetConfig+0x348>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	d15b      	bne.n	8002b7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d828      	bhi.n	8002b1a <UART_SetConfig+0x3aa>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <UART_SetConfig+0x360>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002af5 	.word	0x08002af5
 8002ad4:	08002afd 	.word	0x08002afd
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002b1b 	.word	0x08002b1b
 8002ae0:	08002b0b 	.word	0x08002b0b
 8002ae4:	08002b1b 	.word	0x08002b1b
 8002ae8:	08002b1b 	.word	0x08002b1b
 8002aec:	08002b1b 	.word	0x08002b1b
 8002af0:	08002b13 	.word	0x08002b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af4:	f7ff f856 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002af8:	61b8      	str	r0, [r7, #24]
        break;
 8002afa:	e013      	b.n	8002b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002afc:	f7ff f866 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002b00:	61b8      	str	r0, [r7, #24]
        break;
 8002b02:	e00f      	b.n	8002b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <UART_SetConfig+0x4c4>)
 8002b06:	61bb      	str	r3, [r7, #24]
        break;
 8002b08:	e00c      	b.n	8002b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0a:	f7fe ff79 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002b0e:	61b8      	str	r0, [r7, #24]
        break;
 8002b10:	e008      	b.n	8002b24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	61bb      	str	r3, [r7, #24]
        break;
 8002b18:	e004      	b.n	8002b24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	77bb      	strb	r3, [r7, #30]
        break;
 8002b22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d074      	beq.n	8002c14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	005a      	lsls	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	441a      	add	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	d916      	bls.n	8002b74 <UART_SetConfig+0x404>
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4c:	d212      	bcs.n	8002b74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f023 030f 	bic.w	r3, r3, #15
 8002b56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	89fb      	ldrh	r3, [r7, #14]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	89fa      	ldrh	r2, [r7, #14]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	e04f      	b.n	8002c14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77bb      	strb	r3, [r7, #30]
 8002b78:	e04c      	b.n	8002c14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b7a:	7ffb      	ldrb	r3, [r7, #31]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d828      	bhi.n	8002bd2 <UART_SetConfig+0x462>
 8002b80:	a201      	add	r2, pc, #4	; (adr r2, 8002b88 <UART_SetConfig+0x418>)
 8002b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b86:	bf00      	nop
 8002b88:	08002bad 	.word	0x08002bad
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	08002bbd 	.word	0x08002bbd
 8002b94:	08002bd3 	.word	0x08002bd3
 8002b98:	08002bc3 	.word	0x08002bc3
 8002b9c:	08002bd3 	.word	0x08002bd3
 8002ba0:	08002bd3 	.word	0x08002bd3
 8002ba4:	08002bd3 	.word	0x08002bd3
 8002ba8:	08002bcb 	.word	0x08002bcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bac:	f7fe fffa 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	61b8      	str	r0, [r7, #24]
        break;
 8002bb2:	e013      	b.n	8002bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bb4:	f7ff f80a 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002bb8:	61b8      	str	r0, [r7, #24]
        break;
 8002bba:	e00f      	b.n	8002bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <UART_SetConfig+0x4c4>)
 8002bbe:	61bb      	str	r3, [r7, #24]
        break;
 8002bc0:	e00c      	b.n	8002bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc2:	f7fe ff1d 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8002bc6:	61b8      	str	r0, [r7, #24]
        break;
 8002bc8:	e008      	b.n	8002bdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bce:	61bb      	str	r3, [r7, #24]
        break;
 8002bd0:	e004      	b.n	8002bdc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	77bb      	strb	r3, [r7, #30]
        break;
 8002bda:	bf00      	nop
    }

    if (pclk != 0U)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d018      	beq.n	8002c14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085a      	lsrs	r2, r3, #1
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	441a      	add	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b0f      	cmp	r3, #15
 8002bfa:	d909      	bls.n	8002c10 <UART_SetConfig+0x4a0>
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c02:	d205      	bcs.n	8002c10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	e001      	b.n	8002c14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c20:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40007c00 	.word	0x40007c00
 8002c30:	40023800 	.word	0x40023800
 8002c34:	00f42400 	.word	0x00f42400

08002c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01a      	beq.n	8002d4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d36:	d10a      	bne.n	8002d4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	605a      	str	r2, [r3, #4]
  }
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d8c:	f7fd ff84 	bl	8000c98 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d10e      	bne.n	8002dbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f831 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e027      	b.n	8002e0e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d10e      	bne.n	8002dea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f81b 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e011      	b.n	8002e0e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b09c      	sub	sp, #112	; 0x70
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	e0a7      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2e:	f000 80a3 	beq.w	8002f78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fd ff31 	bl	8000c98 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13f      	bne.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e50:	e853 3f00 	ldrex	r3, [r3]
 8002e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e6e:	e841 2300 	strex	r3, r2, [r1]
 8002e72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1e6      	bne.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	663b      	str	r3, [r7, #96]	; 0x60
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3308      	adds	r3, #8
 8002e98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e5      	bne.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e068      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d050      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee4:	d148      	bne.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e6      	bne.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3308      	adds	r3, #8
 8002f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	613b      	str	r3, [r7, #16]
   return(result);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f42:	623a      	str	r2, [r7, #32]
 8002f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	69f9      	ldr	r1, [r7, #28]
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e010      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	f43f af48 	beq.w	8002e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3770      	adds	r7, #112	; 0x70
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <memset>:
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d100      	bne.n	8002fac <memset+0xa>
 8002faa:	4770      	bx	lr
 8002fac:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb0:	e7f9      	b.n	8002fa6 <memset+0x4>
	...

08002fb4 <__libc_init_array>:
 8002fb4:	b570      	push	{r4, r5, r6, lr}
 8002fb6:	4d0d      	ldr	r5, [pc, #52]	; (8002fec <__libc_init_array+0x38>)
 8002fb8:	4c0d      	ldr	r4, [pc, #52]	; (8002ff0 <__libc_init_array+0x3c>)
 8002fba:	1b64      	subs	r4, r4, r5
 8002fbc:	10a4      	asrs	r4, r4, #2
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	42a6      	cmp	r6, r4
 8002fc2:	d109      	bne.n	8002fd8 <__libc_init_array+0x24>
 8002fc4:	4d0b      	ldr	r5, [pc, #44]	; (8002ff4 <__libc_init_array+0x40>)
 8002fc6:	4c0c      	ldr	r4, [pc, #48]	; (8002ff8 <__libc_init_array+0x44>)
 8002fc8:	f000 f818 	bl	8002ffc <_init>
 8002fcc:	1b64      	subs	r4, r4, r5
 8002fce:	10a4      	asrs	r4, r4, #2
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	42a6      	cmp	r6, r4
 8002fd4:	d105      	bne.n	8002fe2 <__libc_init_array+0x2e>
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}
 8002fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fdc:	4798      	blx	r3
 8002fde:	3601      	adds	r6, #1
 8002fe0:	e7ee      	b.n	8002fc0 <__libc_init_array+0xc>
 8002fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe6:	4798      	blx	r3
 8002fe8:	3601      	adds	r6, #1
 8002fea:	e7f2      	b.n	8002fd2 <__libc_init_array+0x1e>
 8002fec:	08003090 	.word	0x08003090
 8002ff0:	08003090 	.word	0x08003090
 8002ff4:	08003090 	.word	0x08003090
 8002ff8:	08003094 	.word	0x08003094

08002ffc <_init>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr

08003008 <_fini>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr
