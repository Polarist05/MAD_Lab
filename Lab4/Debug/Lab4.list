
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dec  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002fe4  08002fe4  00012fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003058  08003058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  0800306c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800306c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008de8  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001517  00000000  00000000  00028e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  0002a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000527  00000000  00000000  0002aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c35  00000000  00000000  0002af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f4f  00000000  00000000  00050b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed05e  00000000  00000000  00059ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a7c  00000000  00000000  00146b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001485c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002fcc 	.word	0x08002fcc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002fcc 	.word	0x08002fcc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b970 	b.w	8000540 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	460d      	mov	r5, r1
 8000280:	4604      	mov	r4, r0
 8000282:	460f      	mov	r7, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4694      	mov	ip, r2
 800028c:	d965      	bls.n	800035a <__udivmoddi4+0xe2>
 800028e:	fab2 f382 	clz	r3, r2
 8000292:	b143      	cbz	r3, 80002a6 <__udivmoddi4+0x2e>
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	f1c3 0220 	rsb	r2, r3, #32
 800029c:	409f      	lsls	r7, r3
 800029e:	fa20 f202 	lsr.w	r2, r0, r2
 80002a2:	4317      	orrs	r7, r2
 80002a4:	409c      	lsls	r4, r3
 80002a6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002aa:	fa1f f58c 	uxth.w	r5, ip
 80002ae:	fbb7 f1fe 	udiv	r1, r7, lr
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002bc:	fb01 f005 	mul.w	r0, r1, r5
 80002c0:	4290      	cmp	r0, r2
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x62>
 80002c4:	eb1c 0202 	adds.w	r2, ip, r2
 80002c8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002cc:	f080 811c 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002d0:	4290      	cmp	r0, r2
 80002d2:	f240 8119 	bls.w	8000508 <__udivmoddi4+0x290>
 80002d6:	3902      	subs	r1, #2
 80002d8:	4462      	add	r2, ip
 80002da:	1a12      	subs	r2, r2, r0
 80002dc:	b2a4      	uxth	r4, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x90>
 80002f2:	eb1c 0404 	adds.w	r4, ip, r4
 80002f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002fa:	f080 8107 	bcs.w	800050c <__udivmoddi4+0x294>
 80002fe:	42a5      	cmp	r5, r4
 8000300:	f240 8104 	bls.w	800050c <__udivmoddi4+0x294>
 8000304:	4464      	add	r4, ip
 8000306:	3802      	subs	r0, #2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0xa2>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xbc>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80ed 	beq.w	8000502 <__udivmoddi4+0x28a>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d149      	bne.n	80003d0 <__udivmoddi4+0x158>
 800033c:	42ab      	cmp	r3, r5
 800033e:	d302      	bcc.n	8000346 <__udivmoddi4+0xce>
 8000340:	4282      	cmp	r2, r0
 8000342:	f200 80f8 	bhi.w	8000536 <__udivmoddi4+0x2be>
 8000346:	1a84      	subs	r4, r0, r2
 8000348:	eb65 0203 	sbc.w	r2, r5, r3
 800034c:	2001      	movs	r0, #1
 800034e:	4617      	mov	r7, r2
 8000350:	2e00      	cmp	r6, #0
 8000352:	d0e2      	beq.n	800031a <__udivmoddi4+0xa2>
 8000354:	e9c6 4700 	strd	r4, r7, [r6]
 8000358:	e7df      	b.n	800031a <__udivmoddi4+0xa2>
 800035a:	b902      	cbnz	r2, 800035e <__udivmoddi4+0xe6>
 800035c:	deff      	udf	#255	; 0xff
 800035e:	fab2 f382 	clz	r3, r2
 8000362:	2b00      	cmp	r3, #0
 8000364:	f040 8090 	bne.w	8000488 <__udivmoddi4+0x210>
 8000368:	1a8a      	subs	r2, r1, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2101      	movs	r1, #1
 8000374:	fbb2 f5f7 	udiv	r5, r2, r7
 8000378:	fb07 2015 	mls	r0, r7, r5, r2
 800037c:	0c22      	lsrs	r2, r4, #16
 800037e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000382:	fb0e f005 	mul.w	r0, lr, r5
 8000386:	4290      	cmp	r0, r2
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x124>
 800038a:	eb1c 0202 	adds.w	r2, ip, r2
 800038e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4290      	cmp	r0, r2
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2b8>
 800039a:	4645      	mov	r5, r8
 800039c:	1a12      	subs	r2, r2, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a4:	fb07 2210 	mls	r2, r7, r0, r2
 80003a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x14e>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x14c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2c2>
 80003c4:	4610      	mov	r0, r2
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ce:	e79f      	b.n	8000310 <__udivmoddi4+0x98>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa05 f401 	lsl.w	r4, r5, r1
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	40fd      	lsrs	r5, r7
 80003e8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ec:	4323      	orrs	r3, r4
 80003ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80003f2:	fa1f fe8c 	uxth.w	lr, ip
 80003f6:	fb09 5518 	mls	r5, r9, r8, r5
 80003fa:	0c1c      	lsrs	r4, r3, #16
 80003fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000400:	fb08 f50e 	mul.w	r5, r8, lr
 8000404:	42a5      	cmp	r5, r4
 8000406:	fa02 f201 	lsl.w	r2, r2, r1
 800040a:	fa00 f001 	lsl.w	r0, r0, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2b4>
 800041c:	42a5      	cmp	r5, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2b4>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1b64      	subs	r4, r4, r5
 800042a:	b29d      	uxth	r5, r3
 800042c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000430:	fb09 4413 	mls	r4, r9, r3, r4
 8000434:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000438:	fb03 fe0e 	mul.w	lr, r3, lr
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2ac>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2ac>
 800044e:	3b02      	subs	r3, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fba3 9502 	umull	r9, r5, r3, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x29c>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x298>
 8000468:	b156      	cbz	r6, 8000480 <__udivmoddi4+0x208>
 800046a:	ebb0 0208 	subs.w	r2, r0, r8
 800046e:	eb64 040e 	sbc.w	r4, r4, lr
 8000472:	fa04 f707 	lsl.w	r7, r4, r7
 8000476:	40ca      	lsrs	r2, r1
 8000478:	40cc      	lsrs	r4, r1
 800047a:	4317      	orrs	r7, r2
 800047c:	e9c6 7400 	strd	r7, r4, [r6]
 8000480:	4618      	mov	r0, r3
 8000482:	2100      	movs	r1, #0
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000488:	f1c3 0120 	rsb	r1, r3, #32
 800048c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000490:	fa20 f201 	lsr.w	r2, r0, r1
 8000494:	fa25 f101 	lsr.w	r1, r5, r1
 8000498:	409d      	lsls	r5, r3
 800049a:	432a      	orrs	r2, r5
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a8:	fb07 1510 	mls	r5, r7, r0, r1
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004b2:	fb00 f50e 	mul.w	r5, r0, lr
 80004b6:	428d      	cmp	r5, r1
 80004b8:	fa04 f403 	lsl.w	r4, r4, r3
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x258>
 80004be:	eb1c 0101 	adds.w	r1, ip, r1
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1b49      	subs	r1, r1, r5
 80004d2:	b292      	uxth	r2, r2
 80004d4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d8:	fb07 1115 	mls	r1, r7, r5, r1
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	fb05 f10e 	mul.w	r1, r5, lr
 80004e4:	4291      	cmp	r1, r2
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x282>
 80004e8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 80004f2:	4291      	cmp	r1, r2
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2a8>
 80004f6:	3d02      	subs	r5, #2
 80004f8:	4462      	add	r2, ip
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0xfc>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xa2>
 8000508:	4639      	mov	r1, r7
 800050a:	e6e6      	b.n	80002da <__udivmoddi4+0x62>
 800050c:	4610      	mov	r0, r2
 800050e:	e6fb      	b.n	8000308 <__udivmoddi4+0x90>
 8000510:	4548      	cmp	r0, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3b01      	subs	r3, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f0>
 8000520:	4645      	mov	r5, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x282>
 8000524:	462b      	mov	r3, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1da>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x258>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b0>
 8000530:	3d02      	subs	r5, #2
 8000532:	4462      	add	r2, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x124>
 8000536:	4608      	mov	r0, r1
 8000538:	e70a      	b.n	8000350 <__udivmoddi4+0xd8>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x14e>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <RecieveString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char recieveStr[50];
int recieveStrLength=0;
void RecieveString(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	recieveStrLength=0;
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <RecieveString+0x88>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	char ch = 'a';
 8000550:	2361      	movs	r3, #97	; 0x61
 8000552:	71fb      	strb	r3, [r7, #7]
	while(ch!='\n'){
 8000554:	e032      	b.n	80005bc <RecieveString+0x78>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){}
 8000556:	bf00      	nop
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <RecieveString+0x8c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	2b20      	cmp	r3, #32
 8000564:	d1f8      	bne.n	8000558 <RecieveString+0x14>
		HAL_UART_Receive(&huart3, (uint8_t*) &ch, 1, 1000);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	2201      	movs	r2, #1
 800056e:	4818      	ldr	r0, [pc, #96]	; (80005d0 <RecieveString+0x8c>)
 8000570:	f002 f821 	bl	80025b6 <HAL_UART_Receive>
		if(ch!=8){
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b08      	cmp	r3, #8
 8000578:	d008      	beq.n	800058c <RecieveString+0x48>
		  	recieveStr[recieveStrLength++]= ch;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <RecieveString+0x88>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	4912      	ldr	r1, [pc, #72]	; (80005cc <RecieveString+0x88>)
 8000582:	600a      	str	r2, [r1, #0]
 8000584:	79f9      	ldrb	r1, [r7, #7]
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <RecieveString+0x90>)
 8000588:	54d1      	strb	r1, [r2, r3]
 800058a:	e008      	b.n	800059e <RecieveString+0x5a>
		}
		else if(recieveStrLength>0){
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <RecieveString+0x88>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	dd04      	ble.n	800059e <RecieveString+0x5a>
		  	recieveStrLength--;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <RecieveString+0x88>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <RecieveString+0x88>)
 800059c:	6013      	str	r3, [r2, #0]
		}
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800059e:	bf00      	nop
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <RecieveString+0x8c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	2b40      	cmp	r3, #64	; 0x40
 80005ac:	d1f8      	bne.n	80005a0 <RecieveString+0x5c>
		HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1,1000);
 80005ae:	1df9      	adds	r1, r7, #7
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	2201      	movs	r2, #1
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <RecieveString+0x8c>)
 80005b8:	f001 ff7a 	bl	80024b0 <HAL_UART_Transmit>
	while(ch!='\n'){
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b0a      	cmp	r3, #10
 80005c0:	d1c9      	bne.n	8000556 <RecieveString+0x12>
	}
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000e4 	.word	0x200000e4
 80005d0:	20000028 	.word	0x20000028
 80005d4:	200000b0 	.word	0x200000b0

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b0a2      	sub	sp, #136	; 0x88
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 faf2 	bl	8000bc6 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e2:	f000 f9d5 	bl	8000990 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f92f 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9b9 	bl	8000960 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 f987 	bl	8000900 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char startStr1[] = "Man from U.A.R.T.1!\nQuit PRESS q\n",startStr2[] = "Name : ",startStr3[]=" is ready\n",arrowStr[] = " => ";
 80005f2:	4b8b      	ldr	r3, [pc, #556]	; (8000820 <main+0x248>)
 80005f4:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	682b      	ldr	r3, [r5, #0]
 8000604:	8023      	strh	r3, [r4, #0]
 8000606:	4a87      	ldr	r2, [pc, #540]	; (8000824 <main+0x24c>)
 8000608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
 8000614:	4a84      	ldr	r2, [pc, #528]	; (8000828 <main+0x250>)
 8000616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800061a:	ca07      	ldmia	r2, {r0, r1, r2}
 800061c:	c303      	stmia	r3!, {r0, r1}
 800061e:	801a      	strh	r2, [r3, #0]
 8000620:	3302      	adds	r3, #2
 8000622:	0c12      	lsrs	r2, r2, #16
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	4a81      	ldr	r2, [pc, #516]	; (800082c <main+0x254>)
 8000628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	6018      	str	r0, [r3, #0]
 8000632:	3304      	adds	r3, #4
 8000634:	7019      	strb	r1, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	char userName1[50] ,userName2[]="USER2";
 8000636:	4a7e      	ldr	r2, [pc, #504]	; (8000830 <main+0x258>)
 8000638:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800063c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000640:	6018      	str	r0, [r3, #0]
 8000642:	3304      	adds	r3, #4
 8000644:	8019      	strh	r1, [r3, #0]
	int userNameLength1=0;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800064c:	bf00      	nop
 800064e:	4b79      	ldr	r3, [pc, #484]	; (8000834 <main+0x25c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000658:	2b40      	cmp	r3, #64	; 0x40
 800065a:	d1f8      	bne.n	800064e <main+0x76>
		HAL_UART_Transmit(&huart3, (uint8_t*) startStr1, strlen(startStr1),1000);
 800065c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	2221      	movs	r2, #33	; 0x21
 8000666:	4873      	ldr	r0, [pc, #460]	; (8000834 <main+0x25c>)
 8000668:	f001 ff22 	bl	80024b0 <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800066c:	bf00      	nop
 800066e:	4b71      	ldr	r3, [pc, #452]	; (8000834 <main+0x25c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000678:	2b40      	cmp	r3, #64	; 0x40
 800067a:	d1f8      	bne.n	800066e <main+0x96>
		HAL_UART_Transmit(&huart3, (uint8_t*) startStr2, strlen(startStr2),1000);
 800067c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	2207      	movs	r2, #7
 8000686:	486b      	ldr	r0, [pc, #428]	; (8000834 <main+0x25c>)
 8000688:	f001 ff12 	bl	80024b0 <HAL_UART_Transmit>
	RecieveString();
 800068c:	f7ff ff5a 	bl	8000544 <RecieveString>
	for(int i=0;i<recieveStrLength-1;i++){
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000696:	e00f      	b.n	80006b8 <main+0xe0>
		userName1[i]=recieveStr[i];
 8000698:	4a67      	ldr	r2, [pc, #412]	; (8000838 <main+0x260>)
 800069a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800069e:	4413      	add	r3, r2
 80006a0:	7819      	ldrb	r1, [r3, #0]
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<recieveStrLength-1;i++){
 80006ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006b2:	3301      	adds	r3, #1
 80006b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80006b8:	4b60      	ldr	r3, [pc, #384]	; (800083c <main+0x264>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dbe8      	blt.n	8000698 <main+0xc0>
	}
	userNameLength1=recieveStrLength-1;
 80006c6:	4b5d      	ldr	r3, [pc, #372]	; (800083c <main+0x264>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006d0:	bf00      	nop
 80006d2:	4b58      	ldr	r3, [pc, #352]	; (8000834 <main+0x25c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006dc:	2b40      	cmp	r3, #64	; 0x40
 80006de:	d1f8      	bne.n	80006d2 <main+0xfa>
		HAL_UART_Transmit(&huart3, (uint8_t*) userName2, strlen(userName2),1000);
 80006e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fda7 	bl	8000238 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	484f      	ldr	r0, [pc, #316]	; (8000834 <main+0x25c>)
 80006f8:	f001 feda 	bl	80024b0 <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80006fc:	bf00      	nop
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <main+0x25c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000708:	2b40      	cmp	r3, #64	; 0x40
 800070a:	d1f8      	bne.n	80006fe <main+0x126>
		HAL_UART_Transmit(&huart3, (uint8_t*) startStr3, strlen(startStr3),1000);
 800070c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000710:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000714:	220a      	movs	r2, #10
 8000716:	4847      	ldr	r0, [pc, #284]	; (8000834 <main+0x25c>)
 8000718:	f001 feca 	bl	80024b0 <HAL_UART_Transmit>
	while(1){
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800071c:	bf00      	nop
 800071e:	4b45      	ldr	r3, [pc, #276]	; (8000834 <main+0x25c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000728:	2b40      	cmp	r3, #64	; 0x40
 800072a:	d1f8      	bne.n	800071e <main+0x146>
			HAL_UART_Transmit(&huart3, (uint8_t*) '\t', 1,1000);
 800072c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000730:	2201      	movs	r2, #1
 8000732:	2109      	movs	r1, #9
 8000734:	483f      	ldr	r0, [pc, #252]	; (8000834 <main+0x25c>)
 8000736:	f001 febb 	bl	80024b0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800073a:	bf00      	nop
 800073c:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <main+0x25c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000746:	2b40      	cmp	r3, #64	; 0x40
 8000748:	d1f8      	bne.n	800073c <main+0x164>
			HAL_UART_Transmit(&huart3, (uint8_t*) userName1, userNameLength1,1000);
 800074a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800074e:	b29a      	uxth	r2, r3
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	4837      	ldr	r0, [pc, #220]	; (8000834 <main+0x25c>)
 8000758:	f001 feaa 	bl	80024b0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800075c:	bf00      	nop
 800075e:	4b35      	ldr	r3, [pc, #212]	; (8000834 <main+0x25c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000768:	2b40      	cmp	r3, #64	; 0x40
 800076a:	d1f8      	bne.n	800075e <main+0x186>
			HAL_UART_Transmit(&huart3, (uint8_t*) arrowStr, strlen(arrowStr),1000);
 800076c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000774:	2204      	movs	r2, #4
 8000776:	482f      	ldr	r0, [pc, #188]	; (8000834 <main+0x25c>)
 8000778:	f001 fe9a 	bl	80024b0 <HAL_UART_Transmit>
		RecieveString();
 800077c:	f7ff fee2 	bl	8000544 <RecieveString>
		if(recieveStr[0]==1&&recieveStrLength==2){
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <main+0x260>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d103      	bne.n	8000790 <main+0x1b8>
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <main+0x264>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d036      	beq.n	80007fe <main+0x226>
			break;
		}
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000790:	bf00      	nop
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <main+0x25c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079c:	2b40      	cmp	r3, #64	; 0x40
 800079e:	d1f8      	bne.n	8000792 <main+0x1ba>
			HAL_UART_Transmit(&huart3, (uint8_t*) userName2, strlen(userName2),1000);
 80007a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fd47 	bl	8000238 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	481f      	ldr	r0, [pc, #124]	; (8000834 <main+0x25c>)
 80007b8:	f001 fe7a 	bl	80024b0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007bc:	bf00      	nop
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <main+0x25c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	2b40      	cmp	r3, #64	; 0x40
 80007ca:	d1f8      	bne.n	80007be <main+0x1e6>
			HAL_UART_Transmit(&huart3, (uint8_t*) " : ", 3,1000);
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	2203      	movs	r2, #3
 80007d2:	491b      	ldr	r1, [pc, #108]	; (8000840 <main+0x268>)
 80007d4:	4817      	ldr	r0, [pc, #92]	; (8000834 <main+0x25c>)
 80007d6:	f001 fe6b 	bl	80024b0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007da:	bf00      	nop
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <main+0x25c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	2b40      	cmp	r3, #64	; 0x40
 80007e8:	d1f8      	bne.n	80007dc <main+0x204>
			HAL_UART_Transmit(&huart3, (uint8_t*) recieveStr, recieveStrLength,1000);
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <main+0x264>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f4:	4910      	ldr	r1, [pc, #64]	; (8000838 <main+0x260>)
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <main+0x25c>)
 80007f8:	f001 fe5a 	bl	80024b0 <HAL_UART_Transmit>
		while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007fc:	e78e      	b.n	800071c <main+0x144>
			break;
 80007fe:	bf00      	nop
	}
	while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 8000800:	bf00      	nop
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <main+0x25c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080c:	2b40      	cmp	r3, #64	; 0x40
 800080e:	d1f8      	bne.n	8000802 <main+0x22a>
		HAL_UART_Transmit(&huart3, (uint8_t*) "QUIT", 4,1000);
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	2204      	movs	r2, #4
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <main+0x26c>)
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <main+0x25c>)
 800081a:	f001 fe49 	bl	80024b0 <HAL_UART_Transmit>
  {
 800081e:	e70a      	b.n	8000636 <main+0x5e>
 8000820:	08002ff0 	.word	0x08002ff0
 8000824:	08003014 	.word	0x08003014
 8000828:	0800301c 	.word	0x0800301c
 800082c:	08003028 	.word	0x08003028
 8000830:	08003030 	.word	0x08003030
 8000834:	20000028 	.word	0x20000028
 8000838:	200000b0 	.word	0x200000b0
 800083c:	200000e4 	.word	0x200000e4
 8000840:	08002fe4 	.word	0x08002fe4
 8000844:	08002fe8 	.word	0x08002fe8

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fb8b 	bl	8002f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SystemClock_Config+0xb0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SystemClock_Config+0xb0>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <SystemClock_Config+0xb0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <SystemClock_Config+0xb4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <SystemClock_Config+0xb4>)
 800088e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <SystemClock_Config+0xb4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 fcf1 	bl	800129c <HAL_RCC_OscConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f892 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	230f      	movs	r3, #15
 80008c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 ff8a 	bl	80017f8 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ea:	f000 f87d 	bl	80009e8 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3750      	adds	r7, #80	; 0x50
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40007000 	.word	0x40007000

08000900 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <MX_USART3_UART_Init+0x5c>)
 8000908:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_USART3_UART_Init+0x58>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_USART3_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_USART3_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_USART3_UART_Init+0x58>)
 8000944:	f001 fd66 	bl	8002414 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800094e:	f000 f84b 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000028 	.word	0x20000028
 800095c:	40004800 	.word	0x40004800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_GPIO_Init+0x2c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <MX_GPIO_Init+0x2c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_GPIO_Init+0x2c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009a2:	f000 fa53 	bl	8000e4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009a6:	2301      	movs	r3, #1
 80009a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009b2:	231f      	movs	r3, #31
 80009b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009b6:	2387      	movs	r3, #135	; 0x87
 80009b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009be:	2300      	movs	r3, #0
 80009c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80009c2:	2301      	movs	r3, #1
 80009c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80009d2:	463b      	mov	r3, r7
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fa71 	bl	8000ebc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80009da:	2004      	movs	r0, #4
 80009dc:	f000 fa4e 	bl	8000e7c <HAL_MPU_Enable>

}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_MspInit+0x44>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_MspInit+0x44>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x44>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x44>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a2a:	2005      	movs	r0, #5
 8000a2c:	f000 f9da 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b0ae      	sub	sp, #184	; 0xb8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2290      	movs	r2, #144	; 0x90
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fa88 	bl	8002f72 <memset>
  if(huart->Instance==USART3)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_UART_MspInit+0xb4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d13c      	bne.n	8000ae6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f8a2 	bl	8001bc4 <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a86:	f7ff ffaf 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <HAL_UART_MspInit+0xb8>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0xb8>)
 8000a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_UART_MspInit+0xb8>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0xb8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <HAL_UART_MspInit+0xb8>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0xb8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_UART_MspInit+0xbc>)
 8000ae2:	f000 fa2f 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	37b8      	adds	r7, #184	; 0xb8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004800 	.word	0x40004800
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020c00 	.word	0x40020c00

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f87a 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7a:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b80:	e002      	b.n	8000b88 <LoopCopyDataInit>

08000b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b86:	3304      	adds	r3, #4

08000b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b8c:	d3f9      	bcc.n	8000b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b90:	4c0b      	ldr	r4, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b94:	e001      	b.n	8000b9a <LoopFillZerobss>

08000b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b98:	3204      	adds	r2, #4

08000b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b9c:	d3fb      	bcc.n	8000b96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9e:	f7ff ffd7 	bl	8000b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f002 f9ef 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba6:	f7ff fd17 	bl	80005d8 <main>
  bx  lr    
 8000baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb8:	08003060 	.word	0x08003060
  ldr r2, =_sbss
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc0:	200000ec 	.word	0x200000ec

08000bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>

08000bc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bca:	2003      	movs	r0, #3
 8000bcc:	f000 f90a 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f805 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd6:	f7ff ff0d 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f917 	bl	8000e32 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 f8ed 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200000e8 	.word	0x200000e8

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000e8 	.word	0x200000e8

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	05fa0000 	.word	0x05fa0000

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	; (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	; (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff47 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff5c 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffb0 	bl	8000da0 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e50:	f3bf 8f5f 	dmb	sy
}
 8000e54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_MPU_Disable+0x28>)
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_MPU_Disable+0x28>)
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e60:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_MPU_Disable+0x2c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	e000ed90 	.word	0xe000ed90

08000e7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_MPU_Enable+0x38>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_MPU_Enable+0x3c>)
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_MPU_Enable+0x3c>)
 8000e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e98:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e9a:	f3bf 8f4f 	dsb	sy
}
 8000e9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea0:	f3bf 8f6f 	isb	sy
}
 8000ea4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed90 	.word	0xe000ed90
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	785a      	ldrb	r2, [r3, #1]
 8000ec8:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <HAL_MPU_ConfigRegion+0x84>)
 8000eca:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d029      	beq.n	8000f28 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <HAL_MPU_ConfigRegion+0x84>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7adb      	ldrb	r3, [r3, #11]
 8000ee6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	7a9b      	ldrb	r3, [r3, #10]
 8000eee:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ef0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7b5b      	ldrb	r3, [r3, #13]
 8000ef6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ef8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7b9b      	ldrb	r3, [r3, #14]
 8000efe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7bdb      	ldrb	r3, [r3, #15]
 8000f06:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7a5b      	ldrb	r3, [r3, #9]
 8000f0e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7a1b      	ldrb	r3, [r3, #8]
 8000f16:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f18:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f22:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f24:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f26:	e005      	b.n	8000f34 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_MPU_ConfigRegion+0x84>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_MPU_ConfigRegion+0x84>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed90 	.word	0xe000ed90

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e175      	b.n	8001250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 8164 	bne.w	800124a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x56>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80be 	beq.w	800124a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e6:	4a61      	ldr	r2, [pc, #388]	; (800126c <HAL_GPIO_Init+0x328>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d037      	beq.n	8001182 <HAL_GPIO_Init+0x23e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_GPIO_Init+0x23a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x334>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x236>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x232>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x22a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x226>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x21a>
 800115a:	2309      	movs	r3, #9
 800115c:	e012      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800115e:	230a      	movs	r3, #10
 8001160:	e010      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001162:	2308      	movs	r3, #8
 8001164:	e00e      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001166:	2307      	movs	r3, #7
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116a:	2306      	movs	r3, #6
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x328>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae86 	bls.w	8000f64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40022000 	.word	0x40022000
 8001294:	40022400 	.word	0x40022400
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e29b      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c0:	4b96      	ldr	r3, [pc, #600]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012cc:	4b93      	ldr	r3, [pc, #588]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d112      	bne.n	80012fe <HAL_RCC_OscConfig+0x62>
 80012d8:	4b90      	ldr	r3, [pc, #576]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e4:	d10b      	bne.n	80012fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06c      	beq.n	80013cc <HAL_RCC_OscConfig+0x130>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d168      	bne.n	80013cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e275      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x7a>
 8001308:	4b84      	ldr	r3, [pc, #528]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a83      	ldr	r2, [pc, #524]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e02e      	b.n	8001374 <HAL_RCC_OscConfig+0xd8>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x9c>
 800131e:	4b7f      	ldr	r3, [pc, #508]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7e      	ldr	r2, [pc, #504]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b7c      	ldr	r3, [pc, #496]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7b      	ldr	r2, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xd8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0xc0>
 8001342:	4b76      	ldr	r3, [pc, #472]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a75      	ldr	r2, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xd8>
 800135c:	4b6f      	ldr	r3, [pc, #444]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6e      	ldr	r2, [pc, #440]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b6c      	ldr	r3, [pc, #432]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a6b      	ldr	r2, [pc, #428]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fc74 	bl	8000c68 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fc70 	bl	8000c68 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e229      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b61      	ldr	r3, [pc, #388]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe8>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc60 	bl	8000c68 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fc5c 	bl	8000c68 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e215      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x110>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d069      	beq.n	80014ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x190>
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x17a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1e9      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	493d      	ldr	r1, [pc, #244]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e040      	b.n	80014ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d023      	beq.n	800147c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a38      	ldr	r2, [pc, #224]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc12 	bl	8000c68 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc0e 	bl	8000c68 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1c7      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4929      	ldr	r1, [pc, #164]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
 800147a:	e018      	b.n	80014ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fbee 	bl	8000c68 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fbea 	bl	8000c68 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1a3      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d038      	beq.n	800152c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbcb 	bl	8000c68 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbc7 	bl	8000c68 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e180      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x23a>
 80014f4:	e01a      	b.n	800152c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fbb1 	bl	8000c68 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fbad 	bl	8000c68 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d903      	bls.n	8001520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e166      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
 800151c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a4 	beq.w	8001682 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b8c      	ldr	r3, [pc, #560]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b89      	ldr	r3, [pc, #548]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a88      	ldr	r2, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b86      	ldr	r3, [pc, #536]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001562:	4b83      	ldr	r3, [pc, #524]	; (8001770 <HAL_RCC_OscConfig+0x4d4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800156e:	4b80      	ldr	r3, [pc, #512]	; (8001770 <HAL_RCC_OscConfig+0x4d4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7f      	ldr	r2, [pc, #508]	; (8001770 <HAL_RCC_OscConfig+0x4d4>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb75 	bl	8000c68 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff fb71 	bl	8000c68 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e12a      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001594:	4b76      	ldr	r3, [pc, #472]	; (8001770 <HAL_RCC_OscConfig+0x4d4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x31a>
 80015a8:	4b70      	ldr	r3, [pc, #448]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a6f      	ldr	r2, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	e02d      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x33c>
 80015be:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	4b68      	ldr	r3, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a67      	ldr	r2, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	e01c      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x35e>
 80015e0:	4b62      	ldr	r3, [pc, #392]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a61      	ldr	r2, [pc, #388]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	4b5f      	ldr	r3, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fb25 	bl	8000c68 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff fb21 	bl	8000c68 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0d8      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ee      	beq.n	8001622 <HAL_RCC_OscConfig+0x386>
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fb0f 	bl	8000c68 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fb0b 	bl	8000c68 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0c2      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a3c      	ldr	r2, [pc, #240]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800167c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80ae 	beq.w	80017e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	d06d      	beq.n	8001774 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d14b      	bne.n	8001738 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a31      	ldr	r2, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80016a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff fadc 	bl	8000c68 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fad8 	bl	8000c68 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e091      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c6:	4b29      	ldr	r3, [pc, #164]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	071b      	lsls	r3, r3, #28
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff faaa 	bl	8000c68 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff faa6 	bl	8000c68 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e05f      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x47c>
 8001736:	e057      	b.n	80017e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 800173e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff fa90 	bl	8000c68 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fa8c 	bl	8000c68 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e045      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_OscConfig+0x4d0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x4b0>
 800176a:	e03d      	b.n	80017e8 <HAL_RCC_OscConfig+0x54c>
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_RCC_OscConfig+0x558>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d030      	beq.n	80017e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d129      	bne.n	80017e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d122      	bne.n	80017e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d119      	bne.n	80017e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d10f      	bne.n	80017e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0d0      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001810:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d910      	bls.n	8001840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181e:	4b67      	ldr	r3, [pc, #412]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 020f 	bic.w	r2, r3, #15
 8001826:	4965      	ldr	r1, [pc, #404]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	4313      	orrs	r3, r2
 800182c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0b8      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800185e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800187a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	494d      	ldr	r1, [pc, #308]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d040      	beq.n	800191c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d115      	bne.n	80018da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e07f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e073      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06b      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 0203 	bic.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4936      	ldr	r1, [pc, #216]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ec:	f7ff f9bc 	bl	8000c68 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	e00a      	b.n	800190a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f4:	f7ff f9b8 	bl	8000c68 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e053      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 020c 	and.w	r2, r3, #12
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	429a      	cmp	r2, r3
 800191a:	d1eb      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 030f 	and.w	r3, r3, #15
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d210      	bcs.n	800194c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 020f 	bic.w	r2, r3, #15
 8001932:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e032      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	490e      	ldr	r1, [pc, #56]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800198a:	f000 f821 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 800198e:	4602      	mov	r2, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	490a      	ldr	r1, [pc, #40]	; (80019c4 <HAL_RCC_ClockConfig+0x1cc>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1d0>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_ClockConfig+0x1d4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff f918 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08003038 	.word	0x08003038
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d4:	b090      	sub	sp, #64	; 0x40
 80019d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
 80019dc:	2300      	movs	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e8:	4b59      	ldr	r3, [pc, #356]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d00d      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x40>
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	f200 80a1 	bhi.w	8001b3c <HAL_RCC_GetSysClockFreq+0x16c>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x34>
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a02:	e09b      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a08:	e09b      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a0e:	e098      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a10:	4b4f      	ldr	r3, [pc, #316]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d028      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	627a      	str	r2, [r7, #36]	; 0x24
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a3c:	fb03 f201 	mul.w	r2, r3, r1
 8001a40:	2300      	movs	r3, #0
 8001a42:	fb00 f303 	mul.w	r3, r0, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a50:	460a      	mov	r2, r1
 8001a52:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a56:	4413      	add	r3, r2
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	61fa      	str	r2, [r7, #28]
 8001a62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a6a:	f7fe fbed 	bl	8000248 <__aeabi_uldivmod>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4613      	mov	r3, r2
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a76:	e053      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	2200      	movs	r2, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	617a      	str	r2, [r7, #20]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a8a:	f04f 0b00 	mov.w	fp, #0
 8001a8e:	4652      	mov	r2, sl
 8001a90:	465b      	mov	r3, fp
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	ebb2 080a 	subs.w	r8, r2, sl
 8001aaa:	eb63 090b 	sbc.w	r9, r3, fp
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	f04f 0300 	mov.w	r3, #0
 8001ab6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001aba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001abe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ac2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ac6:	eb63 0509 	sbc.w	r5, r3, r9
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	00eb      	lsls	r3, r5, #3
 8001ad4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad8:	00e2      	lsls	r2, r4, #3
 8001ada:	4614      	mov	r4, r2
 8001adc:	461d      	mov	r5, r3
 8001ade:	eb14 030a 	adds.w	r3, r4, sl
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	eb45 030b 	adc.w	r3, r5, fp
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af6:	4629      	mov	r1, r5
 8001af8:	028b      	lsls	r3, r1, #10
 8001afa:	4621      	mov	r1, r4
 8001afc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b00:	4621      	mov	r1, r4
 8001b02:	028a      	lsls	r2, r1, #10
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b14:	f7fe fb98 	bl	8000248 <__aeabi_uldivmod>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	0c1b      	lsrs	r3, r3, #16
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b3a:	e002      	b.n	8001b42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3740      	adds	r7, #64	; 0x40
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	00f42400 	.word	0x00f42400
 8001b58:	017d7840 	.word	0x017d7840

08001b5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b62:	681b      	ldr	r3, [r3, #0]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000000 	.word	0x20000000

08001b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b78:	f7ff fff0 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	4903      	ldr	r1, [pc, #12]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	08003048 	.word	0x08003048

08001b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ba0:	f7ff ffdc 	bl	8001b5c <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0b5b      	lsrs	r3, r3, #13
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08003048 	.word	0x08003048

08001bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d012      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a68      	ldr	r2, [pc, #416]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bf6:	6093      	str	r3, [r2, #8]
 8001bf8:	4b66      	ldr	r3, [pc, #408]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	4964      	ldr	r1, [pc, #400]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d017      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	4959      	ldr	r1, [pc, #356]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d017      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c5a:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	494a      	ldr	r1, [pc, #296]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c78:	d101      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 808b 	beq.w	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	4a39      	ldr	r2, [pc, #228]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ccc:	f7fe ffcc 	bl	8000c68 <HAL_GetTick>
 8001cd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7fe ffc8 	bl	8000c68 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e38f      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ce6:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d035      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d02e      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d114      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe ff90 	bl	8000c68 <HAL_GetTick>
 8001d48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4c:	f7fe ff8c 	bl	8000c68 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e351      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0ee      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d7a:	d111      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	4901      	ldr	r1, [pc, #4]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
 8001d92:	e00b      	b.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	0ffffcff 	.word	0x0ffffcff
 8001da0:	4bac      	ldr	r3, [pc, #688]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4aab      	ldr	r2, [pc, #684]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001daa:	6093      	str	r3, [r2, #8]
 8001dac:	4ba9      	ldr	r3, [pc, #676]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	49a6      	ldr	r1, [pc, #664]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dca:	4ba2      	ldr	r3, [pc, #648]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd0:	4aa0      	ldr	r2, [pc, #640]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dda:	4b9e      	ldr	r3, [pc, #632]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ddc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de4:	499b      	ldr	r1, [pc, #620]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001df8:	4b96      	ldr	r3, [pc, #600]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e06:	4993      	ldr	r1, [pc, #588]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e28:	498a      	ldr	r1, [pc, #552]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00a      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e3c:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e4a:	4982      	ldr	r1, [pc, #520]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4979      	ldr	r1, [pc, #484]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00a      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e80:	4b74      	ldr	r3, [pc, #464]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4971      	ldr	r1, [pc, #452]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea8:	f023 020c 	bic.w	r2, r3, #12
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb0:	4968      	ldr	r1, [pc, #416]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00a      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ec4:	4b63      	ldr	r3, [pc, #396]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	4960      	ldr	r1, [pc, #384]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef4:	4957      	ldr	r1, [pc, #348]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f08:	4b52      	ldr	r3, [pc, #328]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	494f      	ldr	r1, [pc, #316]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4946      	ldr	r1, [pc, #280]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f4c:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	493e      	ldr	r1, [pc, #248]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f9e:	492d      	ldr	r1, [pc, #180]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d011      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fc0:	4924      	ldr	r1, [pc, #144]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	4914      	ldr	r1, [pc, #80]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002024:	490b      	ldr	r1, [pc, #44]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002048:	4902      	ldr	r1, [pc, #8]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002050:	e002      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002064:	4b8a      	ldr	r3, [pc, #552]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002074:	4986      	ldr	r1, [pc, #536]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002088:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800208e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002098:	497d      	ldr	r1, [pc, #500]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d006      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80d6 	beq.w	8002260 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020b4:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a75      	ldr	r2, [pc, #468]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c0:	f7fe fdd2 	bl	8000c68 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020c8:	f7fe fdce 	bl	8000c68 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e195      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d021      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11d      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002108:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210e:	0e1b      	lsrs	r3, r3, #24
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	019a      	lsls	r2, r3, #6
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	071b      	lsls	r3, r3, #28
 800212e:	4958      	ldr	r1, [pc, #352]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002154:	2b00      	cmp	r3, #0
 8002156:	d02e      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002160:	d129      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002162:	4b4b      	ldr	r3, [pc, #300]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002176:	0f1b      	lsrs	r3, r3, #28
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	019a      	lsls	r2, r3, #6
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	071b      	lsls	r3, r3, #28
 8002196:	493e      	ldr	r1, [pc, #248]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a4:	f023 021f 	bic.w	r2, r3, #31
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	3b01      	subs	r3, #1
 80021ae:	4938      	ldr	r1, [pc, #224]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01d      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021c2:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c8:	0e1b      	lsrs	r3, r3, #24
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021d6:	0f1b      	lsrs	r3, r3, #28
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	019a      	lsls	r2, r3, #6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	061b      	lsls	r3, r3, #24
 80021f0:	431a      	orrs	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	071b      	lsls	r3, r3, #28
 80021f6:	4926      	ldr	r1, [pc, #152]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d011      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	019a      	lsls	r2, r3, #6
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	061b      	lsls	r3, r3, #24
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	071b      	lsls	r3, r3, #28
 8002226:	491a      	ldr	r1, [pc, #104]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800223a:	f7fe fd15 	bl	8000c68 <HAL_GetTick>
 800223e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002242:	f7fe fd11 	bl	8000c68 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0d8      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002254:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b01      	cmp	r3, #1
 8002264:	f040 80ce 	bne.w	8002404 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002274:	f7fe fcf8 	bl	8000c68 <HAL_GetTick>
 8002278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800227a:	e00b      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800227c:	f7fe fcf4 	bl	8000c68 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d904      	bls.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e0bb      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800229c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a0:	d0ec      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d02e      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d12a      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	0c1b      	lsrs	r3, r3, #16
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022d8:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	0f1b      	lsrs	r3, r3, #28
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	019a      	lsls	r2, r3, #6
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	061b      	lsls	r3, r3, #24
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	4944      	ldr	r1, [pc, #272]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002306:	4b42      	ldr	r3, [pc, #264]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	493d      	ldr	r1, [pc, #244]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d022      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002334:	d11d      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	0e1b      	lsrs	r3, r3, #24
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	0f1b      	lsrs	r3, r3, #28
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	019a      	lsls	r2, r3, #6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	061b      	lsls	r3, r3, #24
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	071b      	lsls	r3, r3, #28
 800236a:	4929      	ldr	r1, [pc, #164]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d028      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	0e1b      	lsrs	r3, r3, #24
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	0c1b      	lsrs	r3, r3, #16
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	019a      	lsls	r2, r3, #6
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	071b      	lsls	r3, r3, #28
 80023b2:	4917      	ldr	r1, [pc, #92]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	4911      	ldr	r1, [pc, #68]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023dc:	f7fe fc44 	bl	8000c68 <HAL_GetTick>
 80023e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023e4:	f7fe fc40 	bl	8000c68 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e007      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002402:	d1ef      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800

08002414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e040      	b.n	80024a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fb00 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f974 	bl	8002740 <UART_SetConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e022      	b.n	80024a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fbcc 	bl	8002c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	685a      	ldr	r2, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800247e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800248e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fc53 	bl	8002d4c <UART_CheckIdleState>
 80024a6:	4603      	mov	r3, r0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d171      	bne.n	80025ac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_UART_Transmit+0x24>
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e06a      	b.n	80025ae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2221      	movs	r2, #33	; 0x21
 80024e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fbbf 	bl	8000c68 <HAL_GetTick>
 80024ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	88fa      	ldrh	r2, [r7, #6]
 80024f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002504:	d108      	bne.n	8002518 <HAL_UART_Transmit+0x68>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e003      	b.n	8002520 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002520:	e02c      	b.n	800257c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fc5a 	bl	8002de6 <UART_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e038      	b.n	80025ae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10b      	bne.n	800255a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002550:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3302      	adds	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	e007      	b.n	800256a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	3301      	adds	r3, #1
 8002568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1cc      	bne.n	8002522 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2200      	movs	r2, #0
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fc27 	bl	8002de6 <UART_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e005      	b.n	80025ae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2220      	movs	r2, #32
 80025a6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e000      	b.n	80025ae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80025ac:	2302      	movs	r3, #2
  }
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08a      	sub	sp, #40	; 0x28
 80025ba:	af02      	add	r7, sp, #8
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	f040 80b1 	bne.w	8002734 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_UART_Receive+0x28>
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0a9      	b.n	8002736 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2222      	movs	r2, #34	; 0x22
 80025ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fb36 	bl	8000c68 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	88fa      	ldrh	r2, [r7, #6]
 8002602:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	88fa      	ldrh	r2, [r7, #6]
 800260a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d10e      	bne.n	8002636 <HAL_UART_Receive+0x80>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_UART_Receive+0x76>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002626:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800262a:	e02d      	b.n	8002688 <HAL_UART_Receive+0xd2>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002634:	e028      	b.n	8002688 <HAL_UART_Receive+0xd2>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_UART_Receive+0xa4>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_UART_Receive+0x9a>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800264e:	e01b      	b.n	8002688 <HAL_UART_Receive+0xd2>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	227f      	movs	r2, #127	; 0x7f
 8002654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002658:	e016      	b.n	8002688 <HAL_UART_Receive+0xd2>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002662:	d10d      	bne.n	8002680 <HAL_UART_Receive+0xca>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_UART_Receive+0xc0>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	227f      	movs	r2, #127	; 0x7f
 8002670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002674:	e008      	b.n	8002688 <HAL_UART_Receive+0xd2>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	223f      	movs	r2, #63	; 0x3f
 800267a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800267e:	e003      	b.n	8002688 <HAL_UART_Receive+0xd2>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800268e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002698:	d108      	bne.n	80026ac <HAL_UART_Receive+0xf6>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	e003      	b.n	80026b4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026b4:	e032      	b.n	800271c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2200      	movs	r2, #0
 80026be:	2120      	movs	r1, #32
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fb90 	bl	8002de6 <UART_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e032      	b.n	8002736 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	b29a      	uxth	r2, r3
 80026de:	8a7b      	ldrh	r3, [r7, #18]
 80026e0:	4013      	ands	r3, r2
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3302      	adds	r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	e00c      	b.n	800270a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	8a7b      	ldrh	r3, [r7, #18]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4013      	ands	r3, r2
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1c6      	bne.n	80026b6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e000      	b.n	8002736 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4ba6      	ldr	r3, [pc, #664]	; (8002a04 <UART_SetConfig+0x2c4>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	430b      	orrs	r3, r1
 8002776:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a94      	ldr	r2, [pc, #592]	; (8002a08 <UART_SetConfig+0x2c8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d120      	bne.n	80027fe <UART_SetConfig+0xbe>
 80027bc:	4b93      	ldr	r3, [pc, #588]	; (8002a0c <UART_SetConfig+0x2cc>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d816      	bhi.n	80027f8 <UART_SetConfig+0xb8>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <UART_SetConfig+0x90>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027ed 	.word	0x080027ed
 80027d8:	080027e7 	.word	0x080027e7
 80027dc:	080027f3 	.word	0x080027f3
 80027e0:	2301      	movs	r3, #1
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e150      	b.n	8002a88 <UART_SetConfig+0x348>
 80027e6:	2302      	movs	r3, #2
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e14d      	b.n	8002a88 <UART_SetConfig+0x348>
 80027ec:	2304      	movs	r3, #4
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e14a      	b.n	8002a88 <UART_SetConfig+0x348>
 80027f2:	2308      	movs	r3, #8
 80027f4:	77fb      	strb	r3, [r7, #31]
 80027f6:	e147      	b.n	8002a88 <UART_SetConfig+0x348>
 80027f8:	2310      	movs	r3, #16
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	e144      	b.n	8002a88 <UART_SetConfig+0x348>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a83      	ldr	r2, [pc, #524]	; (8002a10 <UART_SetConfig+0x2d0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d132      	bne.n	800286e <UART_SetConfig+0x12e>
 8002808:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <UART_SetConfig+0x2cc>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d828      	bhi.n	8002868 <UART_SetConfig+0x128>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <UART_SetConfig+0xdc>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002851 	.word	0x08002851
 8002820:	08002869 	.word	0x08002869
 8002824:	08002869 	.word	0x08002869
 8002828:	08002869 	.word	0x08002869
 800282c:	0800285d 	.word	0x0800285d
 8002830:	08002869 	.word	0x08002869
 8002834:	08002869 	.word	0x08002869
 8002838:	08002869 	.word	0x08002869
 800283c:	08002857 	.word	0x08002857
 8002840:	08002869 	.word	0x08002869
 8002844:	08002869 	.word	0x08002869
 8002848:	08002869 	.word	0x08002869
 800284c:	08002863 	.word	0x08002863
 8002850:	2300      	movs	r3, #0
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e118      	b.n	8002a88 <UART_SetConfig+0x348>
 8002856:	2302      	movs	r3, #2
 8002858:	77fb      	strb	r3, [r7, #31]
 800285a:	e115      	b.n	8002a88 <UART_SetConfig+0x348>
 800285c:	2304      	movs	r3, #4
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e112      	b.n	8002a88 <UART_SetConfig+0x348>
 8002862:	2308      	movs	r3, #8
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e10f      	b.n	8002a88 <UART_SetConfig+0x348>
 8002868:	2310      	movs	r3, #16
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e10c      	b.n	8002a88 <UART_SetConfig+0x348>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a68      	ldr	r2, [pc, #416]	; (8002a14 <UART_SetConfig+0x2d4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d120      	bne.n	80028ba <UART_SetConfig+0x17a>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <UART_SetConfig+0x2cc>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002882:	2b30      	cmp	r3, #48	; 0x30
 8002884:	d013      	beq.n	80028ae <UART_SetConfig+0x16e>
 8002886:	2b30      	cmp	r3, #48	; 0x30
 8002888:	d814      	bhi.n	80028b4 <UART_SetConfig+0x174>
 800288a:	2b20      	cmp	r3, #32
 800288c:	d009      	beq.n	80028a2 <UART_SetConfig+0x162>
 800288e:	2b20      	cmp	r3, #32
 8002890:	d810      	bhi.n	80028b4 <UART_SetConfig+0x174>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <UART_SetConfig+0x15c>
 8002896:	2b10      	cmp	r3, #16
 8002898:	d006      	beq.n	80028a8 <UART_SetConfig+0x168>
 800289a:	e00b      	b.n	80028b4 <UART_SetConfig+0x174>
 800289c:	2300      	movs	r3, #0
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	e0f2      	b.n	8002a88 <UART_SetConfig+0x348>
 80028a2:	2302      	movs	r3, #2
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e0ef      	b.n	8002a88 <UART_SetConfig+0x348>
 80028a8:	2304      	movs	r3, #4
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e0ec      	b.n	8002a88 <UART_SetConfig+0x348>
 80028ae:	2308      	movs	r3, #8
 80028b0:	77fb      	strb	r3, [r7, #31]
 80028b2:	e0e9      	b.n	8002a88 <UART_SetConfig+0x348>
 80028b4:	2310      	movs	r3, #16
 80028b6:	77fb      	strb	r3, [r7, #31]
 80028b8:	e0e6      	b.n	8002a88 <UART_SetConfig+0x348>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <UART_SetConfig+0x2d8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d120      	bne.n	8002906 <UART_SetConfig+0x1c6>
 80028c4:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <UART_SetConfig+0x2cc>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028ce:	2bc0      	cmp	r3, #192	; 0xc0
 80028d0:	d013      	beq.n	80028fa <UART_SetConfig+0x1ba>
 80028d2:	2bc0      	cmp	r3, #192	; 0xc0
 80028d4:	d814      	bhi.n	8002900 <UART_SetConfig+0x1c0>
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d009      	beq.n	80028ee <UART_SetConfig+0x1ae>
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d810      	bhi.n	8002900 <UART_SetConfig+0x1c0>
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <UART_SetConfig+0x1a8>
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d006      	beq.n	80028f4 <UART_SetConfig+0x1b4>
 80028e6:	e00b      	b.n	8002900 <UART_SetConfig+0x1c0>
 80028e8:	2300      	movs	r3, #0
 80028ea:	77fb      	strb	r3, [r7, #31]
 80028ec:	e0cc      	b.n	8002a88 <UART_SetConfig+0x348>
 80028ee:	2302      	movs	r3, #2
 80028f0:	77fb      	strb	r3, [r7, #31]
 80028f2:	e0c9      	b.n	8002a88 <UART_SetConfig+0x348>
 80028f4:	2304      	movs	r3, #4
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e0c6      	b.n	8002a88 <UART_SetConfig+0x348>
 80028fa:	2308      	movs	r3, #8
 80028fc:	77fb      	strb	r3, [r7, #31]
 80028fe:	e0c3      	b.n	8002a88 <UART_SetConfig+0x348>
 8002900:	2310      	movs	r3, #16
 8002902:	77fb      	strb	r3, [r7, #31]
 8002904:	e0c0      	b.n	8002a88 <UART_SetConfig+0x348>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a44      	ldr	r2, [pc, #272]	; (8002a1c <UART_SetConfig+0x2dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d125      	bne.n	800295c <UART_SetConfig+0x21c>
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <UART_SetConfig+0x2cc>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800291e:	d017      	beq.n	8002950 <UART_SetConfig+0x210>
 8002920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002924:	d817      	bhi.n	8002956 <UART_SetConfig+0x216>
 8002926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292a:	d00b      	beq.n	8002944 <UART_SetConfig+0x204>
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d811      	bhi.n	8002956 <UART_SetConfig+0x216>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <UART_SetConfig+0x1fe>
 8002936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800293a:	d006      	beq.n	800294a <UART_SetConfig+0x20a>
 800293c:	e00b      	b.n	8002956 <UART_SetConfig+0x216>
 800293e:	2300      	movs	r3, #0
 8002940:	77fb      	strb	r3, [r7, #31]
 8002942:	e0a1      	b.n	8002a88 <UART_SetConfig+0x348>
 8002944:	2302      	movs	r3, #2
 8002946:	77fb      	strb	r3, [r7, #31]
 8002948:	e09e      	b.n	8002a88 <UART_SetConfig+0x348>
 800294a:	2304      	movs	r3, #4
 800294c:	77fb      	strb	r3, [r7, #31]
 800294e:	e09b      	b.n	8002a88 <UART_SetConfig+0x348>
 8002950:	2308      	movs	r3, #8
 8002952:	77fb      	strb	r3, [r7, #31]
 8002954:	e098      	b.n	8002a88 <UART_SetConfig+0x348>
 8002956:	2310      	movs	r3, #16
 8002958:	77fb      	strb	r3, [r7, #31]
 800295a:	e095      	b.n	8002a88 <UART_SetConfig+0x348>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2f      	ldr	r2, [pc, #188]	; (8002a20 <UART_SetConfig+0x2e0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d125      	bne.n	80029b2 <UART_SetConfig+0x272>
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <UART_SetConfig+0x2cc>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002974:	d017      	beq.n	80029a6 <UART_SetConfig+0x266>
 8002976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800297a:	d817      	bhi.n	80029ac <UART_SetConfig+0x26c>
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	d00b      	beq.n	800299a <UART_SetConfig+0x25a>
 8002982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002986:	d811      	bhi.n	80029ac <UART_SetConfig+0x26c>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <UART_SetConfig+0x254>
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d006      	beq.n	80029a0 <UART_SetConfig+0x260>
 8002992:	e00b      	b.n	80029ac <UART_SetConfig+0x26c>
 8002994:	2301      	movs	r3, #1
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e076      	b.n	8002a88 <UART_SetConfig+0x348>
 800299a:	2302      	movs	r3, #2
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e073      	b.n	8002a88 <UART_SetConfig+0x348>
 80029a0:	2304      	movs	r3, #4
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e070      	b.n	8002a88 <UART_SetConfig+0x348>
 80029a6:	2308      	movs	r3, #8
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e06d      	b.n	8002a88 <UART_SetConfig+0x348>
 80029ac:	2310      	movs	r3, #16
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e06a      	b.n	8002a88 <UART_SetConfig+0x348>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <UART_SetConfig+0x2e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d138      	bne.n	8002a2e <UART_SetConfig+0x2ee>
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <UART_SetConfig+0x2cc>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ca:	d017      	beq.n	80029fc <UART_SetConfig+0x2bc>
 80029cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029d0:	d82a      	bhi.n	8002a28 <UART_SetConfig+0x2e8>
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d00b      	beq.n	80029f0 <UART_SetConfig+0x2b0>
 80029d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029dc:	d824      	bhi.n	8002a28 <UART_SetConfig+0x2e8>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <UART_SetConfig+0x2aa>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	d006      	beq.n	80029f6 <UART_SetConfig+0x2b6>
 80029e8:	e01e      	b.n	8002a28 <UART_SetConfig+0x2e8>
 80029ea:	2300      	movs	r3, #0
 80029ec:	77fb      	strb	r3, [r7, #31]
 80029ee:	e04b      	b.n	8002a88 <UART_SetConfig+0x348>
 80029f0:	2302      	movs	r3, #2
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e048      	b.n	8002a88 <UART_SetConfig+0x348>
 80029f6:	2304      	movs	r3, #4
 80029f8:	77fb      	strb	r3, [r7, #31]
 80029fa:	e045      	b.n	8002a88 <UART_SetConfig+0x348>
 80029fc:	2308      	movs	r3, #8
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e042      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a02:	bf00      	nop
 8002a04:	efff69f3 	.word	0xefff69f3
 8002a08:	40011000 	.word	0x40011000
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40004400 	.word	0x40004400
 8002a14:	40004800 	.word	0x40004800
 8002a18:	40004c00 	.word	0x40004c00
 8002a1c:	40005000 	.word	0x40005000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40007800 	.word	0x40007800
 8002a28:	2310      	movs	r3, #16
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e02c      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a72      	ldr	r2, [pc, #456]	; (8002bfc <UART_SetConfig+0x4bc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d125      	bne.n	8002a84 <UART_SetConfig+0x344>
 8002a38:	4b71      	ldr	r3, [pc, #452]	; (8002c00 <UART_SetConfig+0x4c0>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a46:	d017      	beq.n	8002a78 <UART_SetConfig+0x338>
 8002a48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a4c:	d817      	bhi.n	8002a7e <UART_SetConfig+0x33e>
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a52:	d00b      	beq.n	8002a6c <UART_SetConfig+0x32c>
 8002a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a58:	d811      	bhi.n	8002a7e <UART_SetConfig+0x33e>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <UART_SetConfig+0x326>
 8002a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a62:	d006      	beq.n	8002a72 <UART_SetConfig+0x332>
 8002a64:	e00b      	b.n	8002a7e <UART_SetConfig+0x33e>
 8002a66:	2300      	movs	r3, #0
 8002a68:	77fb      	strb	r3, [r7, #31]
 8002a6a:	e00d      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	e00a      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a72:	2304      	movs	r3, #4
 8002a74:	77fb      	strb	r3, [r7, #31]
 8002a76:	e007      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a78:	2308      	movs	r3, #8
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e004      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a7e:	2310      	movs	r3, #16
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e001      	b.n	8002a88 <UART_SetConfig+0x348>
 8002a84:	2310      	movs	r3, #16
 8002a86:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a90:	d15b      	bne.n	8002b4a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d828      	bhi.n	8002aea <UART_SetConfig+0x3aa>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <UART_SetConfig+0x360>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ac5 	.word	0x08002ac5
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	08002ad5 	.word	0x08002ad5
 8002aac:	08002aeb 	.word	0x08002aeb
 8002ab0:	08002adb 	.word	0x08002adb
 8002ab4:	08002aeb 	.word	0x08002aeb
 8002ab8:	08002aeb 	.word	0x08002aeb
 8002abc:	08002aeb 	.word	0x08002aeb
 8002ac0:	08002ae3 	.word	0x08002ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac4:	f7ff f856 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002ac8:	61b8      	str	r0, [r7, #24]
        break;
 8002aca:	e013      	b.n	8002af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002acc:	f7ff f866 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8002ad0:	61b8      	str	r0, [r7, #24]
        break;
 8002ad2:	e00f      	b.n	8002af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <UART_SetConfig+0x4c4>)
 8002ad6:	61bb      	str	r3, [r7, #24]
        break;
 8002ad8:	e00c      	b.n	8002af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ada:	f7fe ff79 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 8002ade:	61b8      	str	r0, [r7, #24]
        break;
 8002ae0:	e008      	b.n	8002af4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae6:	61bb      	str	r3, [r7, #24]
        break;
 8002ae8:	e004      	b.n	8002af4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	77bb      	strb	r3, [r7, #30]
        break;
 8002af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d074      	beq.n	8002be4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	441a      	add	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b0f      	cmp	r3, #15
 8002b14:	d916      	bls.n	8002b44 <UART_SetConfig+0x404>
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d212      	bcs.n	8002b44 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f023 030f 	bic.w	r3, r3, #15
 8002b26:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	89fb      	ldrh	r3, [r7, #14]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	89fa      	ldrh	r2, [r7, #14]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e04f      	b.n	8002be4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77bb      	strb	r3, [r7, #30]
 8002b48:	e04c      	b.n	8002be4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b4a:	7ffb      	ldrb	r3, [r7, #31]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d828      	bhi.n	8002ba2 <UART_SetConfig+0x462>
 8002b50:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <UART_SetConfig+0x418>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	08002b8d 	.word	0x08002b8d
 8002b64:	08002ba3 	.word	0x08002ba3
 8002b68:	08002b93 	.word	0x08002b93
 8002b6c:	08002ba3 	.word	0x08002ba3
 8002b70:	08002ba3 	.word	0x08002ba3
 8002b74:	08002ba3 	.word	0x08002ba3
 8002b78:	08002b9b 	.word	0x08002b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7fe fffa 	bl	8001b74 <HAL_RCC_GetPCLK1Freq>
 8002b80:	61b8      	str	r0, [r7, #24]
        break;
 8002b82:	e013      	b.n	8002bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b84:	f7ff f80a 	bl	8001b9c <HAL_RCC_GetPCLK2Freq>
 8002b88:	61b8      	str	r0, [r7, #24]
        break;
 8002b8a:	e00f      	b.n	8002bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <UART_SetConfig+0x4c4>)
 8002b8e:	61bb      	str	r3, [r7, #24]
        break;
 8002b90:	e00c      	b.n	8002bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b92:	f7fe ff1d 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 8002b96:	61b8      	str	r0, [r7, #24]
        break;
 8002b98:	e008      	b.n	8002bac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ba0:	e004      	b.n	8002bac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8002baa:	bf00      	nop
    }

    if (pclk != 0U)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	085a      	lsrs	r2, r3, #1
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	441a      	add	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d909      	bls.n	8002be0 <UART_SetConfig+0x4a0>
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d205      	bcs.n	8002be0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	e001      	b.n	8002be4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002bf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40007c00 	.word	0x40007c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	00f42400 	.word	0x00f42400

08002c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01a      	beq.n	8002d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d06:	d10a      	bne.n	8002d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  }
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d5c:	f7fd ff84 	bl	8000c68 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d10e      	bne.n	8002d8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f831 	bl	8002de6 <UART_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e027      	b.n	8002dde <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d10e      	bne.n	8002dba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f81b 	bl	8002de6 <UART_WaitOnFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e011      	b.n	8002dde <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b09c      	sub	sp, #112	; 0x70
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	603b      	str	r3, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df6:	e0a7      	b.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfe:	f000 80a3 	beq.w	8002f48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fd ff31 	bl	8000c68 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13f      	bne.n	8002e98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e6      	bne.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	663b      	str	r3, [r7, #96]	; 0x60
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3308      	adds	r3, #8
 8002e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e5      	bne.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e068      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d050      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb4:	d148      	bne.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ebe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e6      	bne.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	613b      	str	r3, [r7, #16]
   return(result);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f12:	623a      	str	r2, [r7, #32]
 8002f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	69f9      	ldr	r1, [r7, #28]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e5      	bne.n	8002ef2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e010      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4013      	ands	r3, r2
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	bf0c      	ite	eq
 8002f58:	2301      	moveq	r3, #1
 8002f5a:	2300      	movne	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	f43f af48 	beq.w	8002df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3770      	adds	r7, #112	; 0x70
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <memset>:
 8002f72:	4402      	add	r2, r0
 8002f74:	4603      	mov	r3, r0
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d100      	bne.n	8002f7c <memset+0xa>
 8002f7a:	4770      	bx	lr
 8002f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f80:	e7f9      	b.n	8002f76 <memset+0x4>
	...

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4d0d      	ldr	r5, [pc, #52]	; (8002fbc <__libc_init_array+0x38>)
 8002f88:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	2600      	movs	r6, #0
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	4d0b      	ldr	r5, [pc, #44]	; (8002fc4 <__libc_init_array+0x40>)
 8002f96:	4c0c      	ldr	r4, [pc, #48]	; (8002fc8 <__libc_init_array+0x44>)
 8002f98:	f000 f818 	bl	8002fcc <_init>
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	08003058 	.word	0x08003058
 8002fc0:	08003058 	.word	0x08003058
 8002fc4:	08003058 	.word	0x08003058
 8002fc8:	0800305c 	.word	0x0800305c

08002fcc <_init>:
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	bf00      	nop
 8002fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd2:	bc08      	pop	{r3}
 8002fd4:	469e      	mov	lr, r3
 8002fd6:	4770      	bx	lr

08002fd8 <_fini>:
 8002fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fda:	bf00      	nop
 8002fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fde:	bc08      	pop	{r3}
 8002fe0:	469e      	mov	lr, r3
 8002fe2:	4770      	bx	lr
