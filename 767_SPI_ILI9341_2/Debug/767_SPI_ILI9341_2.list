
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006ff8  08006ff8  00016ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007384  08007384  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800738c  0800738c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800738c  0800738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001d8  0800756c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800756c  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112ec  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fa0  00000000  00000000  00031535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  000344d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db3  00000000  00000000  000356a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a68c  00000000  00000000  00036453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f0c  00000000  00000000  00060adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffc88  00000000  00000000  000769eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056d0  00000000  00000000  00176674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0017bd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08006fe0 	.word	0x08006fe0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08006fe0 	.word	0x08006fe0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a8c      	ldr	r2, [pc, #560]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000608:	f043 0310 	orr.w	r3, r3, #16
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0310 	and.w	r3, r3, #16
 8000616:	623b      	str	r3, [r7, #32]
 8000618:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b87      	ldr	r3, [pc, #540]	; (8000838 <MX_GPIO_Init+0x24c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a86      	ldr	r2, [pc, #536]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b84      	ldr	r3, [pc, #528]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000632:	4b81      	ldr	r3, [pc, #516]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a80      	ldr	r2, [pc, #512]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	4b7b      	ldr	r3, [pc, #492]	; (8000838 <MX_GPIO_Init+0x24c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a7a      	ldr	r2, [pc, #488]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b75      	ldr	r3, [pc, #468]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a74      	ldr	r2, [pc, #464]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b72      	ldr	r3, [pc, #456]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x24c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a68      	ldr	r2, [pc, #416]	; (8000838 <MX_GPIO_Init+0x24c>)
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a62      	ldr	r2, [pc, #392]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <MX_GPIO_Init+0x24c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2168      	movs	r1, #104	; 0x68
 80006c6:	485d      	ldr	r0, [pc, #372]	; (800083c <MX_GPIO_Init+0x250>)
 80006c8:	f001 fc76 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006d2:	485b      	ldr	r0, [pc, #364]	; (8000840 <MX_GPIO_Init+0x254>)
 80006d4:	f001 fc70 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4859      	ldr	r0, [pc, #356]	; (8000844 <MX_GPIO_Init+0x258>)
 80006de:	f001 fc6b 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006e8:	4857      	ldr	r0, [pc, #348]	; (8000848 <MX_GPIO_Init+0x25c>)
 80006ea:	f001 fc65 	bl	8001fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006ee:	2314      	movs	r3, #20
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	484e      	ldr	r0, [pc, #312]	; (800083c <MX_GPIO_Init+0x250>)
 8000702:	f001 faad 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000706:	2368      	movs	r3, #104	; 0x68
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4847      	ldr	r0, [pc, #284]	; (800083c <MX_GPIO_Init+0x250>)
 800071e:	f001 fa9f 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4844      	ldr	r0, [pc, #272]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000738:	f001 fa92 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074c:	230b      	movs	r3, #11
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	483c      	ldr	r0, [pc, #240]	; (8000848 <MX_GPIO_Init+0x25c>)
 8000758:	f001 fa82 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075c:	2386      	movs	r3, #134	; 0x86
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076c:	230b      	movs	r3, #11
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	4619      	mov	r1, r3
 8000776:	4835      	ldr	r0, [pc, #212]	; (800084c <MX_GPIO_Init+0x260>)
 8000778:	f001 fa72 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078e:	230b      	movs	r3, #11
 8000790:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000796:	4619      	mov	r1, r3
 8000798:	4829      	ldr	r0, [pc, #164]	; (8000840 <MX_GPIO_Init+0x254>)
 800079a:	f001 fa61 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800079e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4822      	ldr	r0, [pc, #136]	; (8000840 <MX_GPIO_Init+0x254>)
 80007b8:	f001 fa52 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x258>)
 80007d4:	f001 fa44 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	; (8000844 <MX_GPIO_Init+0x258>)
 80007ec:	f001 fa38 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <MX_GPIO_Init+0x25c>)
 800080a:	f001 fa29 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000820:	230b      	movs	r3, #11
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_GPIO_Init+0x258>)
 800082c:	f001 fa18 	bl	8001c60 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020400 	.word	0x40020400
 8000844:	40021800 	.word	0x40021800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000

08000850 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000854:	f3bf 8f4f 	dsb	sy
}
 8000858:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800085a:	f3bf 8f6f 	isb	sy
}
 800085e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <SCB_EnableICache+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800086e:	f3bf 8f6f 	isb	sy
}
 8000872:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SCB_EnableICache+0x48>)
 8000876:	695b      	ldr	r3, [r3, #20]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SCB_EnableICache+0x48>)
 800087a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
}
 8000884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000886:	f3bf 8f6f 	isb	sy
}
 800088a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <SCB_EnableDCache+0x84>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
}
 80008ae:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <SCB_EnableDCache+0x84>)
 80008b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	0b5b      	lsrs	r3, r3, #13
 80008bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ca:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	015a      	lsls	r2, r3, #5
 80008d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008d4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008da:	4911      	ldr	r1, [pc, #68]	; (8000920 <SCB_EnableDCache+0x84>)
 80008dc:	4313      	orrs	r3, r2
 80008de:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1ef      	bne.n	80008cc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	60fa      	str	r2, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1e5      	bne.n	80008c2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008f6:	f3bf 8f4f 	dsb	sy
}
 80008fa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SCB_EnableDCache+0x84>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <SCB_EnableDCache+0x84>)
 8000902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000906:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000908:	f3bf 8f4f 	dsb	sy
}
 800090c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800090e:	f3bf 8f6f 	isb	sy
}
 8000912:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000928:	f7ff ff92 	bl	8000850 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800092c:	f7ff ffb6 	bl	800089c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f001 f820 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f832 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f7ff fe58 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800093c:	f000 fb1a 	bl	8000f74 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000940:	f000 f8fc 	bl	8000b3c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000944:	f000 faa2 	bl	8000e8c <MX_TIM1_Init>
  MX_RNG_Init();
 8000948:	f000 f8c4 	bl	8000ad4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800094c:	f000 fd66 	bl	800141c <ILI9341_Init>
  while (1)
  {

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  ILI9341_Fill_Screen(WHITE);
 8000950:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000954:	f000 ff0e 	bl	8001774 <ILI9341_Fill_Screen>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000958:	2001      	movs	r0, #1
 800095a:	f000 fd01 	bl	8001360 <ILI9341_Set_Rotation>
	  ILI9341_Draw_Filled_Circle(ILI9341_SCREEN_WIDTH/2, 25, 20, BLACK);
 800095e:	2300      	movs	r3, #0
 8000960:	2214      	movs	r2, #20
 8000962:	2119      	movs	r1, #25
 8000964:	20a0      	movs	r0, #160	; 0xa0
 8000966:	f000 fba2 	bl	80010ae <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(25, 60, 20, RED);
 800096a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800096e:	2214      	movs	r2, #20
 8000970:	213c      	movs	r1, #60	; 0x3c
 8000972:	2019      	movs	r0, #25
 8000974:	f000 fb9b 	bl	80010ae <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(25, 120, 20, GREEN);
 8000978:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800097c:	2214      	movs	r2, #20
 800097e:	2178      	movs	r1, #120	; 0x78
 8000980:	2019      	movs	r0, #25
 8000982:	f000 fb94 	bl	80010ae <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(25, 180, 20, BLUE);
 8000986:	231f      	movs	r3, #31
 8000988:	2214      	movs	r2, #20
 800098a:	21b4      	movs	r1, #180	; 0xb4
 800098c:	2019      	movs	r0, #25
 800098e:	f000 fb8e 	bl	80010ae <ILI9341_Draw_Filled_Circle>
	  HAL_Delay(1000);
 8000992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000996:	f001 f859 	bl	8001a4c <HAL_Delay>
	  ILI9341_Fill_Screen(WHITE);
 800099a:	e7d9      	b.n	8000950 <main+0x2c>

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0b8      	sub	sp, #224	; 0xe0
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fc0a 	bl	80051c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2290      	movs	r2, #144	; 0x90
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fbfb 	bl	80051c4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ce:	f001 fb0d 	bl	8001fec <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <SystemClock_Config+0x124>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <SystemClock_Config+0x124>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <SystemClock_Config+0x124>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ea:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <SystemClock_Config+0x128>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a35      	ldr	r2, [pc, #212]	; (8000ac4 <SystemClock_Config+0x128>)
 80009f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <SystemClock_Config+0x128>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000a24:	23c8      	movs	r3, #200	; 0xc8
 8000a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a30:	2309      	movs	r3, #9
 8000a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 fb33 	bl	80020ac <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a4c:	f000 f83e 	bl	8000acc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a50:	f001 fadc 	bl	800200c <HAL_PWREx_EnableOverDrive>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a5a:	f000 f837 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a84:	2106      	movs	r1, #6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fdbe 	bl	8002608 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000a92:	f000 f81b 	bl	8000acc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <SystemClock_Config+0x12c>)
 8000a98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 ffd3 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000ab4:	f000 f80a 	bl	8000acc <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	37e0      	adds	r7, #224	; 0xe0
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000
 8000ac8:	00200100 	.word	0x00200100

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x4>
	...

08000ad4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_RNG_Init+0x20>)
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <MX_RNG_Init+0x24>)
 8000adc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_RNG_Init+0x20>)
 8000ae0:	f002 fbe0 	bl	80032a4 <HAL_RNG_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000aea:	f7ff ffef 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200001f4 	.word	0x200001f4
 8000af8:	50060800 	.word	0x50060800

08000afc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_RNG_MspInit+0x38>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d10b      	bne.n	8000b26 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_RNG_MspInit+0x3c>)
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <HAL_RNG_MspInit+0x3c>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b18:	6353      	str	r3, [r2, #52]	; 0x34
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_RNG_MspInit+0x3c>)
 8000b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	50060800 	.word	0x50060800
 8000b38:	40023800 	.word	0x40023800

08000b3c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_SPI5_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b4c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b5a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b8a:	2207      	movs	r2, #7
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_SPI5_Init+0x74>)
 8000b9c:	f002 fbac 	bl	80032f8 <HAL_SPI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f7ff ff91 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000204 	.word	0x20000204
 8000bb4:	40015000 	.word	0x40015000

08000bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_SPI_MspInit+0x7c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d128      	bne.n	8000c2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_SPI_MspInit+0x80>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <HAL_SPI_MspInit+0x80>)
 8000be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_SPI_MspInit+0x80>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_SPI_MspInit+0x80>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_SPI_MspInit+0x80>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_SPI_MspInit+0x80>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c0a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_SPI_MspInit+0x84>)
 8000c28:	f001 f81a 	bl	8001c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40015000 	.word	0x40015000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40021400 	.word	0x40021400

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x44>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x44>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x44>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x44>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x44>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 febe 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_kill>:

int _kill(int pid, int sig)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cae:	f004 fa95 	bl	80051dc <__errno>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2216      	movs	r2, #22
 8000cb6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe7 	bl	8000ca4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cd6:	e7fe      	b.n	8000cd6 <_exit+0x12>

08000cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
	}

return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
	}
	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f004 f9fa 	bl	80051dc <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20080000 	.word	0x20080000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000268 	.word	0x20000268
 8000e1c:	20000490 	.word	0x20000490

08000e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <SystemInit+0x5c>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <SystemInit+0x5c>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SystemInit+0x60>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <SystemInit+0x60>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SystemInit+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <SystemInit+0x60>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <SystemInit+0x60>)
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <SystemInit+0x64>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <SystemInit+0x60>)
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <SystemInit+0x68>)
 8000e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <SystemInit+0x60>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <SystemInit+0x60>)
 8000e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x60>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SystemInit+0x5c>)
 8000e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e70:	609a      	str	r2, [r3, #8]
#endif
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00
 8000e80:	40023800 	.word	0x40023800
 8000e84:	fef6ffff 	.word	0xfef6ffff
 8000e88:	24003010 	.word	0x24003010

08000e8c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <MX_TIM1_Init+0xa4>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000eb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000eda:	f002 fd87 	bl	80039ec <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f7ff fdf2 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000ef6:	f002 fdd1 	bl	8003a9c <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f00:	f7ff fde4 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM1_Init+0xa0>)
 8000f16:	f002 ffc1 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f20:	f7ff fdd4 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000026c 	.word	0x2000026c
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_TIM_Base_MspInit+0x38>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d10b      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_TIM_Base_MspInit+0x3c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_TIM_Base_MspInit+0x3c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <HAL_TIM_Base_MspInit+0x3c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	40023800 	.word	0x40023800

08000f74 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <MX_USART3_UART_Init+0x5c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART3_UART_Init+0x58>)
 8000fb8:	f002 fffe 	bl	8003fb8 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f7ff fd83 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200002b8 	.word	0x200002b8
 8000fd0:	40004800 	.word	0x40004800

08000fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d128      	bne.n	8001048 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_UART_MspInit+0x80>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <HAL_UART_MspInit+0x80>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_UART_MspInit+0x80>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_UART_MspInit+0x80>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_UART_MspInit+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001038:	2307      	movs	r3, #7
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0x84>)
 8001044:	f000 fe0c 	bl	8001c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40004800 	.word	0x40004800
 8001054:	40023800 	.word	0x40023800
 8001058:	40020c00 	.word	0x40020c00

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800105c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001094 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001060:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001062:	e003      	b.n	800106c <LoopCopyDataInit>

08001064 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001066:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001068:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800106a:	3104      	adds	r1, #4

0800106c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001070:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001072:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001074:	d3f6      	bcc.n	8001064 <CopyDataInit>
  ldr  r2, =_sbss
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001078:	e002      	b.n	8001080 <LoopFillZerobss>

0800107a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800107a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800107c:	f842 3b04 	str.w	r3, [r2], #4

08001080 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001082:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001084:	d3f9      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001086:	f7ff fecb 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108a:	f004 f8ad 	bl	80051e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff fc49 	bl	8000924 <main>
  bx  lr    
 8001092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001094:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001098:	08007394 	.word	0x08007394
  ldr  r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010a0:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 80010a4:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 80010a8:	2000048c 	.word	0x2000048c

080010ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC_IRQHandler>

080010ae <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b08b      	sub	sp, #44	; 0x2c
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4604      	mov	r4, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4611      	mov	r1, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	4623      	mov	r3, r4
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	4603      	mov	r3, r0
 80010c2:	80bb      	strh	r3, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	f1c3 0301 	rsb	r3, r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80010e6:	e061      	b.n	80011ac <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80010e8:	88fa      	ldrh	r2, [r7, #6]
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e018      	b.n	8001124 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	b298      	uxth	r0, r3
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	b29b      	uxth	r3, r3
 8001100:	883a      	ldrh	r2, [r7, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	f000 fb5c 	bl	80017c0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	b298      	uxth	r0, r3
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	b29b      	uxth	r3, r3
 8001110:	88ba      	ldrh	r2, [r7, #4]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	b29b      	uxth	r3, r3
 8001116:	883a      	ldrh	r2, [r7, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f000 fb51 	bl	80017c0 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3301      	adds	r3, #1
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	88fa      	ldrh	r2, [r7, #6]
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	dde0      	ble.n	80010f2 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e018      	b.n	800116c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	b298      	uxth	r0, r3
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	b29a      	uxth	r2, r3
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	883a      	ldrh	r2, [r7, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	f000 fb38 	bl	80017c0 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	b298      	uxth	r0, r3
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	b29b      	uxth	r3, r3
 8001158:	88ba      	ldrh	r2, [r7, #4]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
 800115e:	883a      	ldrh	r2, [r7, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f000 fb2d 	bl	80017c0 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3301      	adds	r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	4413      	add	r3, r2
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	dde0      	ble.n	800113a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	3301      	adds	r3, #1
 800117c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4413      	add	r3, r2
 8001184:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	3302      	adds	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005a      	lsls	r2, r3, #1
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	4413      	add	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	dd09      	ble.n	80011ac <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	3b01      	subs	r3, #1
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	4413      	add	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3302      	adds	r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80011ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	da99      	bge.n	80010e8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	372c      	adds	r7, #44	; 0x2c
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
	...

080011c0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80011c4:	f7ff fcba 	bl	8000b3c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80011c8:	f7ff fa10 	bl	80005ec <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d2:	4802      	ldr	r0, [pc, #8]	; (80011dc <ILI9341_SPI_Init+0x1c>)
 80011d4:	f000 fef0 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40020800 	.word	0x40020800

080011e0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2301      	movs	r3, #1
 80011ee:	2201      	movs	r2, #1
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <ILI9341_SPI_Send+0x20>)
 80011f2:	f002 f92c 	bl	800344e <HAL_SPI_Transmit>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000204 	.word	0x20000204

08001204 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <ILI9341_Write_Command+0x40>)
 8001216:	f000 fecf 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <ILI9341_Write_Command+0x40>)
 8001222:	f000 fec9 	bl	8001fb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffd9 	bl	80011e0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <ILI9341_Write_Command+0x40>)
 8001236:	f000 febf 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40020800 	.word	0x40020800

08001248 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <ILI9341_Write_Data+0x40>)
 800125a:	f000 fead 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <ILI9341_Write_Data+0x40>)
 8001266:	f000 fea7 	bl	8001fb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffb7 	bl	80011e0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <ILI9341_Write_Data+0x40>)
 800127a:	f000 fe9d 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40020800 	.word	0x40020800

0800128c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	80fb      	strh	r3, [r7, #6]
 800129e:	4603      	mov	r3, r0
 80012a0:	80bb      	strh	r3, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	4613      	mov	r3, r2
 80012a8:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80012aa:	202a      	movs	r0, #42	; 0x2a
 80012ac:	f7ff ffaa 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffc5 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ffc0 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ffb9 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffb4 	bl	8001248 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80012e0:	202b      	movs	r0, #43	; 0x2b
 80012e2:	f7ff ff8f 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80012e6:	88bb      	ldrh	r3, [r7, #4]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ffaa 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffa5 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80012fe:	883b      	ldrh	r3, [r7, #0]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	b29b      	uxth	r3, r3
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff9e 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff99 	bl	8001248 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001316:	202c      	movs	r0, #44	; 0x2c
 8001318:	f7ff ff74 	bl	8001204 <ILI9341_Write_Command>
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <ILI9341_Reset+0x38>)
 8001330:	f000 fe42 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001334:	20c8      	movs	r0, #200	; 0xc8
 8001336:	f000 fb89 	bl	8001a4c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <ILI9341_Reset+0x38>)
 8001342:	f000 fe39 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001346:	20c8      	movs	r0, #200	; 0xc8
 8001348:	f000 fb80 	bl	8001a4c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001352:	4802      	ldr	r0, [pc, #8]	; (800135c <ILI9341_Reset+0x38>)
 8001354:	f000 fe30 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020800 	.word	0x40020800

08001360 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800136e:	2036      	movs	r0, #54	; 0x36
 8001370:	f7ff ff48 	bl	8001204 <ILI9341_Write_Command>
HAL_Delay(1);
 8001374:	2001      	movs	r0, #1
 8001376:	f000 fb69 	bl	8001a4c <HAL_Delay>
	
switch(screen_rotation) 
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d837      	bhi.n	80013f0 <ILI9341_Set_Rotation+0x90>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <ILI9341_Set_Rotation+0x28>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001399 	.word	0x08001399
 800138c:	080013af 	.word	0x080013af
 8001390:	080013c5 	.word	0x080013c5
 8001394:	080013db 	.word	0x080013db
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001398:	2048      	movs	r0, #72	; 0x48
 800139a:	f7ff ff55 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <ILI9341_Set_Rotation+0x9c>)
 80013a0:	22f0      	movs	r2, #240	; 0xf0
 80013a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <ILI9341_Set_Rotation+0xa0>)
 80013a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013aa:	801a      	strh	r2, [r3, #0]
			break;
 80013ac:	e021      	b.n	80013f2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f7ff ff4a 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <ILI9341_Set_Rotation+0x9c>)
 80013b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <ILI9341_Set_Rotation+0xa0>)
 80013be:	22f0      	movs	r2, #240	; 0xf0
 80013c0:	801a      	strh	r2, [r3, #0]
			break;
 80013c2:	e016      	b.n	80013f2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80013c4:	2088      	movs	r0, #136	; 0x88
 80013c6:	f7ff ff3f 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <ILI9341_Set_Rotation+0x9c>)
 80013cc:	22f0      	movs	r2, #240	; 0xf0
 80013ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <ILI9341_Set_Rotation+0xa0>)
 80013d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013d6:	801a      	strh	r2, [r3, #0]
			break;
 80013d8:	e00b      	b.n	80013f2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80013da:	20e8      	movs	r0, #232	; 0xe8
 80013dc:	f7ff ff34 	bl	8001248 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <ILI9341_Set_Rotation+0x9c>)
 80013e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <ILI9341_Set_Rotation+0xa0>)
 80013ea:	22f0      	movs	r2, #240	; 0xf0
 80013ec:	801a      	strh	r2, [r3, #0]
			break;
 80013ee:	e000      	b.n	80013f2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80013f0:	bf00      	nop
	}
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000006 	.word	0x20000006
 8001400:	20000004 	.word	0x20000004

08001404 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140e:	4802      	ldr	r0, [pc, #8]	; (8001418 <ILI9341_Enable+0x14>)
 8001410:	f000 fdd2 	bl	8001fb8 <HAL_GPIO_WritePin>
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020800 	.word	0x40020800

0800141c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001420:	f7ff fff0 	bl	8001404 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001424:	f7ff fecc 	bl	80011c0 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001428:	f7ff ff7c 	bl	8001324 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff fee9 	bl	8001204 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001436:	f000 fb09 	bl	8001a4c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800143a:	20cb      	movs	r0, #203	; 0xcb
 800143c:	f7ff fee2 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001440:	2039      	movs	r0, #57	; 0x39
 8001442:	f7ff ff01 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001446:	202c      	movs	r0, #44	; 0x2c
 8001448:	f7ff fefe 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fefb 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001452:	2034      	movs	r0, #52	; 0x34
 8001454:	f7ff fef8 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff fef5 	bl	8001248 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800145e:	20cf      	movs	r0, #207	; 0xcf
 8001460:	f7ff fed0 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff feef 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800146a:	20c1      	movs	r0, #193	; 0xc1
 800146c:	f7ff feec 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001470:	2030      	movs	r0, #48	; 0x30
 8001472:	f7ff fee9 	bl	8001248 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001476:	20e8      	movs	r0, #232	; 0xe8
 8001478:	f7ff fec4 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800147c:	2085      	movs	r0, #133	; 0x85
 800147e:	f7ff fee3 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fee0 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f7ff fedd 	bl	8001248 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800148e:	20ea      	movs	r0, #234	; 0xea
 8001490:	f7ff feb8 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff fed7 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fed4 	bl	8001248 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80014a0:	20ed      	movs	r0, #237	; 0xed
 80014a2:	f7ff feaf 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f7ff fece 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f7ff fecb 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80014b2:	2012      	movs	r0, #18
 80014b4:	f7ff fec8 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80014b8:	2081      	movs	r0, #129	; 0x81
 80014ba:	f7ff fec5 	bl	8001248 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80014be:	20f7      	movs	r0, #247	; 0xf7
 80014c0:	f7ff fea0 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80014c4:	2020      	movs	r0, #32
 80014c6:	f7ff febf 	bl	8001248 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80014ca:	20c0      	movs	r0, #192	; 0xc0
 80014cc:	f7ff fe9a 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80014d0:	2023      	movs	r0, #35	; 0x23
 80014d2:	f7ff feb9 	bl	8001248 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80014d6:	20c1      	movs	r0, #193	; 0xc1
 80014d8:	f7ff fe94 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80014dc:	2010      	movs	r0, #16
 80014de:	f7ff feb3 	bl	8001248 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80014e2:	20c5      	movs	r0, #197	; 0xc5
 80014e4:	f7ff fe8e 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80014e8:	203e      	movs	r0, #62	; 0x3e
 80014ea:	f7ff fead 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80014ee:	2028      	movs	r0, #40	; 0x28
 80014f0:	f7ff feaa 	bl	8001248 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80014f4:	20c7      	movs	r0, #199	; 0xc7
 80014f6:	f7ff fe85 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80014fa:	2086      	movs	r0, #134	; 0x86
 80014fc:	f7ff fea4 	bl	8001248 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001500:	2036      	movs	r0, #54	; 0x36
 8001502:	f7ff fe7f 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001506:	2048      	movs	r0, #72	; 0x48
 8001508:	f7ff fe9e 	bl	8001248 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800150c:	203a      	movs	r0, #58	; 0x3a
 800150e:	f7ff fe79 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001512:	2055      	movs	r0, #85	; 0x55
 8001514:	f7ff fe98 	bl	8001248 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001518:	20b1      	movs	r0, #177	; 0xb1
 800151a:	f7ff fe73 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fe92 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001524:	2018      	movs	r0, #24
 8001526:	f7ff fe8f 	bl	8001248 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800152a:	20b6      	movs	r0, #182	; 0xb6
 800152c:	f7ff fe6a 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001530:	2008      	movs	r0, #8
 8001532:	f7ff fe89 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001536:	2082      	movs	r0, #130	; 0x82
 8001538:	f7ff fe86 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800153c:	2027      	movs	r0, #39	; 0x27
 800153e:	f7ff fe83 	bl	8001248 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001542:	20f2      	movs	r0, #242	; 0xf2
 8001544:	f7ff fe5e 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fe7d 	bl	8001248 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800154e:	2026      	movs	r0, #38	; 0x26
 8001550:	f7ff fe58 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff fe77 	bl	8001248 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800155a:	20e0      	movs	r0, #224	; 0xe0
 800155c:	f7ff fe52 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001560:	200f      	movs	r0, #15
 8001562:	f7ff fe71 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001566:	2031      	movs	r0, #49	; 0x31
 8001568:	f7ff fe6e 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800156c:	202b      	movs	r0, #43	; 0x2b
 800156e:	f7ff fe6b 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001572:	200c      	movs	r0, #12
 8001574:	f7ff fe68 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001578:	200e      	movs	r0, #14
 800157a:	f7ff fe65 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800157e:	2008      	movs	r0, #8
 8001580:	f7ff fe62 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001584:	204e      	movs	r0, #78	; 0x4e
 8001586:	f7ff fe5f 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800158a:	20f1      	movs	r0, #241	; 0xf1
 800158c:	f7ff fe5c 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001590:	2037      	movs	r0, #55	; 0x37
 8001592:	f7ff fe59 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001596:	2007      	movs	r0, #7
 8001598:	f7ff fe56 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800159c:	2010      	movs	r0, #16
 800159e:	f7ff fe53 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80015a2:	2003      	movs	r0, #3
 80015a4:	f7ff fe50 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80015a8:	200e      	movs	r0, #14
 80015aa:	f7ff fe4d 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80015ae:	2009      	movs	r0, #9
 80015b0:	f7ff fe4a 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fe47 	bl	8001248 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80015ba:	20e1      	movs	r0, #225	; 0xe1
 80015bc:	f7ff fe22 	bl	8001204 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fe41 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80015c6:	200e      	movs	r0, #14
 80015c8:	f7ff fe3e 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80015cc:	2014      	movs	r0, #20
 80015ce:	f7ff fe3b 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f7ff fe38 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80015d8:	2011      	movs	r0, #17
 80015da:	f7ff fe35 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80015de:	2007      	movs	r0, #7
 80015e0:	f7ff fe32 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80015e4:	2031      	movs	r0, #49	; 0x31
 80015e6:	f7ff fe2f 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80015ea:	20c1      	movs	r0, #193	; 0xc1
 80015ec:	f7ff fe2c 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80015f0:	2048      	movs	r0, #72	; 0x48
 80015f2:	f7ff fe29 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80015f6:	2008      	movs	r0, #8
 80015f8:	f7ff fe26 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80015fc:	200f      	movs	r0, #15
 80015fe:	f7ff fe23 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001602:	200c      	movs	r0, #12
 8001604:	f7ff fe20 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001608:	2031      	movs	r0, #49	; 0x31
 800160a:	f7ff fe1d 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800160e:	2036      	movs	r0, #54	; 0x36
 8001610:	f7ff fe1a 	bl	8001248 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001614:	200f      	movs	r0, #15
 8001616:	f7ff fe17 	bl	8001248 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800161a:	2011      	movs	r0, #17
 800161c:	f7ff fdf2 	bl	8001204 <ILI9341_Write_Command>
HAL_Delay(120);
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 fa13 	bl	8001a4c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001626:	2029      	movs	r0, #41	; 0x29
 8001628:	f7ff fdec 	bl	8001204 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fe97 	bl	8001360 <ILI9341_Set_Rotation>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800163c:	b08d      	sub	sp, #52	; 0x34
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	6039      	str	r1, [r7, #0]
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	466b      	mov	r3, sp
 8001648:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001656:	d202      	bcs.n	800165e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800165c:	e002      	b.n	8001664 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800165e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	4840      	ldr	r0, [pc, #256]	; (800176c <ILI9341_Draw_Colour_Burst+0x134>)
 800166c:	f000 fca4 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	483d      	ldr	r0, [pc, #244]	; (800176c <ILI9341_Draw_Colour_Burst+0x134>)
 8001678:	f000 fc9e 	bl	8001fb8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29b      	uxth	r3, r3
 8001682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001688:	460b      	mov	r3, r1
 800168a:	3b01      	subs	r3, #1
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	2300      	movs	r3, #0
 8001690:	4688      	mov	r8, r1
 8001692:	4699      	mov	r9, r3
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a8:	2300      	movs	r3, #0
 80016aa:	460c      	mov	r4, r1
 80016ac:	461d      	mov	r5, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	00eb      	lsls	r3, r5, #3
 80016b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016bc:	00e2      	lsls	r2, r4, #3
 80016be:	1dcb      	adds	r3, r1, #7
 80016c0:	08db      	lsrs	r3, r3, #3
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	ebad 0d03 	sub.w	sp, sp, r3
 80016c8:	466b      	mov	r3, sp
 80016ca:	3300      	adds	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d2:	e00e      	b.n	80016f2 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	4413      	add	r3, r2
 80016da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80016de:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	3301      	adds	r3, #1
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	b2d1      	uxtb	r1, r2
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	3302      	adds	r3, #2
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3ec      	bcc.n	80016d4 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001714:	fb01 f202 	mul.w	r2, r1, r2
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d010      	beq.n	8001744 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
 8001726:	e009      	b.n	800173c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	b29a      	uxth	r2, r3
 800172c:	230a      	movs	r3, #10
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <ILI9341_Draw_Colour_Burst+0x138>)
 8001732:	f001 fe8c 	bl	800344e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d3f1      	bcc.n	8001728 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b29a      	uxth	r2, r3
 8001748:	230a      	movs	r3, #10
 800174a:	69b9      	ldr	r1, [r7, #24]
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <ILI9341_Draw_Colour_Burst+0x138>)
 800174e:	f001 fe7e 	bl	800344e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <ILI9341_Draw_Colour_Burst+0x134>)
 800175a:	f000 fc2d 	bl	8001fb8 <HAL_GPIO_WritePin>
 800175e:	46b5      	mov	sp, r6
}
 8001760:	bf00      	nop
 8001762:	3734      	adds	r7, #52	; 0x34
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800
 8001770:	20000204 	.word	0x20000204

08001774 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <ILI9341_Fill_Screen+0x44>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <ILI9341_Fill_Screen+0x48>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	2100      	movs	r1, #0
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fd7d 	bl	800128c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <ILI9341_Fill_Screen+0x44>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <ILI9341_Fill_Screen+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff44 	bl	8001638 <ILI9341_Draw_Colour_Burst>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000006 	.word	0x20000006
 80017bc:	20000004 	.word	0x20000004

080017c0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
 80017ca:	460b      	mov	r3, r1
 80017cc:	80bb      	strh	r3, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80017d2:	4b64      	ldr	r3, [pc, #400]	; (8001964 <ILI9341_Draw_Pixel+0x1a4>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	429a      	cmp	r2, r3
 80017dc:	f080 80be 	bcs.w	800195c <ILI9341_Draw_Pixel+0x19c>
 80017e0:	4b61      	ldr	r3, [pc, #388]	; (8001968 <ILI9341_Draw_Pixel+0x1a8>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	88ba      	ldrh	r2, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f080 80b7 	bcs.w	800195c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80017ee:	2200      	movs	r2, #0
 80017f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f4:	485d      	ldr	r0, [pc, #372]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 80017f6:	f000 fbdf 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001800:	485a      	ldr	r0, [pc, #360]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001802:	f000 fbd9 	bl	8001fb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001806:	202a      	movs	r0, #42	; 0x2a
 8001808:	f7ff fcea 	bl	80011e0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001812:	4856      	ldr	r0, [pc, #344]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001814:	f000 fbd0 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181e:	4853      	ldr	r0, [pc, #332]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001820:	f000 fbca 	bl	8001fb8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182a:	4850      	ldr	r0, [pc, #320]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 800182c:	f000 fbc4 	bl	8001fb8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	b29b      	uxth	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	753b      	strb	r3, [r7, #20]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	757b      	strb	r3, [r7, #21]
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	3301      	adds	r3, #1
 8001844:	121b      	asrs	r3, r3, #8
 8001846:	b2db      	uxtb	r3, r3
 8001848:	75bb      	strb	r3, [r7, #22]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001854:	f107 0114 	add.w	r1, r7, #20
 8001858:	2301      	movs	r3, #1
 800185a:	2204      	movs	r2, #4
 800185c:	4844      	ldr	r0, [pc, #272]	; (8001970 <ILI9341_Draw_Pixel+0x1b0>)
 800185e:	f001 fdf6 	bl	800344e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001868:	4840      	ldr	r0, [pc, #256]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 800186a:	f000 fba5 	bl	8001fb8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001874:	483d      	ldr	r0, [pc, #244]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001876:	f000 fb9f 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001880:	483a      	ldr	r0, [pc, #232]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001882:	f000 fb99 	bl	8001fb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001886:	202b      	movs	r0, #43	; 0x2b
 8001888:	f7ff fcaa 	bl	80011e0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001892:	4836      	ldr	r0, [pc, #216]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001894:	f000 fb90 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	4833      	ldr	r0, [pc, #204]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 80018a0:	f000 fb8a 	bl	8001fb8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018aa:	4830      	ldr	r0, [pc, #192]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 80018ac:	f000 fb84 	bl	8001fb8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80018b0:	88bb      	ldrh	r3, [r7, #4]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	743b      	strb	r3, [r7, #16]
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	747b      	strb	r3, [r7, #17]
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	121b      	asrs	r3, r3, #8
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	74bb      	strb	r3, [r7, #18]
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80018d4:	f107 0110 	add.w	r1, r7, #16
 80018d8:	2301      	movs	r3, #1
 80018da:	2204      	movs	r2, #4
 80018dc:	4824      	ldr	r0, [pc, #144]	; (8001970 <ILI9341_Draw_Pixel+0x1b0>)
 80018de:	f001 fdb6 	bl	800344e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 80018ea:	f000 fb65 	bl	8001fb8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f4:	481d      	ldr	r0, [pc, #116]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 80018f6:	f000 fb5f 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001900:	481a      	ldr	r0, [pc, #104]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001902:	f000 fb59 	bl	8001fb8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001906:	202c      	movs	r0, #44	; 0x2c
 8001908:	f7ff fc6a 	bl	80011e0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001912:	4816      	ldr	r0, [pc, #88]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001914:	f000 fb50 	bl	8001fb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800191e:	4813      	ldr	r0, [pc, #76]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001920:	f000 fb4a 	bl	8001fb8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192a:	4810      	ldr	r0, [pc, #64]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 800192c:	f000 fb44 	bl	8001fb8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b29b      	uxth	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	733b      	strb	r3, [r7, #12]
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001940:	f107 010c 	add.w	r1, r7, #12
 8001944:	2301      	movs	r3, #1
 8001946:	2202      	movs	r2, #2
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <ILI9341_Draw_Pixel+0x1b0>)
 800194a:	f001 fd80 	bl	800344e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <ILI9341_Draw_Pixel+0x1ac>)
 8001956:	f000 fb2f 	bl	8001fb8 <HAL_GPIO_WritePin>
 800195a:	e000      	b.n	800195e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800195c:	bf00      	nop
	
}
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000006 	.word	0x20000006
 8001968:	20000004 	.word	0x20000004
 800196c:	40020800 	.word	0x40020800
 8001970:	20000204 	.word	0x20000204

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_Init+0x34>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_Init+0x34>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x34>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x34>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f931 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff f950 	bl	8000c40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f93b 	bl	8001c46 <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e8:	f000 f911 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	2000000c 	.word	0x2000000c
 8001a08:	20000008 	.word	0x20000008

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000000c 	.word	0x2000000c
 8001a30:	2000033c 	.word	0x2000033c

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000033c 	.word	0x2000033c

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000000c 	.word	0x2000000c

08001a94 <__NVIC_SetPriorityGrouping>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00
 8001ad8:	05fa0000 	.word	0x05fa0000

08001adc <__NVIC_GetPriorityGrouping>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_SetPriority>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff47 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c20:	f7ff ff5c 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7ff ff8e 	bl	8001b4c <NVIC_EncodePriority>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff5d 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffb0 	bl	8001bb4 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	e175      	b.n	8001f6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	f040 8164 	bne.w	8001f66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d00b      	beq.n	8001cbe <HAL_GPIO_Init+0x5e>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb2:	2b11      	cmp	r3, #17
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x100>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	69b9      	ldr	r1, [r7, #24]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80be 	beq.w	8001f66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a65      	ldr	r2, [pc, #404]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_GPIO_Init+0x324>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e02:	4a61      	ldr	r2, [pc, #388]	; (8001f88 <HAL_GPIO_Init+0x328>)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_GPIO_Init+0x32c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d037      	beq.n	8001e9e <HAL_GPIO_Init+0x23e>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <HAL_GPIO_Init+0x330>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d031      	beq.n	8001e9a <HAL_GPIO_Init+0x23a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a56      	ldr	r2, [pc, #344]	; (8001f94 <HAL_GPIO_Init+0x334>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d02b      	beq.n	8001e96 <HAL_GPIO_Init+0x236>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a55      	ldr	r2, [pc, #340]	; (8001f98 <HAL_GPIO_Init+0x338>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d025      	beq.n	8001e92 <HAL_GPIO_Init+0x232>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <HAL_GPIO_Init+0x33c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <HAL_GPIO_Init+0x22e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a53      	ldr	r2, [pc, #332]	; (8001fa0 <HAL_GPIO_Init+0x340>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x22a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x344>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x226>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_GPIO_Init+0x348>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x222>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_GPIO_Init+0x34c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x21e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4f      	ldr	r2, [pc, #316]	; (8001fb0 <HAL_GPIO_Init+0x350>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x21a>
 8001e76:	2309      	movs	r3, #9
 8001e78:	e012      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e7a:	230a      	movs	r3, #10
 8001e7c:	e010      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e7e:	2308      	movs	r3, #8
 8001e80:	e00e      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e82:	2307      	movs	r3, #7
 8001e84:	e00c      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e00a      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x240>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x328>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee2:	4a34      	ldr	r2, [pc, #208]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee8:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <HAL_GPIO_Init+0x354>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f ae86 	bls.w	8001c80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40021c00 	.word	0x40021c00
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40022400 	.word	0x40022400
 8001fb4:	40013c00 	.word	0x40013c00

08001fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc8:	787b      	ldrb	r3, [r7, #1]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fd4:	e003      	b.n	8001fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	041a      	lsls	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40007000 	.word	0x40007000

0800200c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800203a:	f7ff fcfb 	bl	8001a34 <HAL_GetTick>
 800203e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002040:	e009      	b.n	8002056 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002042:	f7ff fcf7 	bl	8001a34 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002050:	d901      	bls.n	8002056 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e022      	b.n	800209c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002062:	d1ee      	bne.n	8002042 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0f      	ldr	r2, [pc, #60]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002070:	f7ff fce0 	bl	8001a34 <HAL_GetTick>
 8002074:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002076:	e009      	b.n	800208c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002078:	f7ff fcdc 	bl	8001a34 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002086:	d901      	bls.n	800208c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e007      	b.n	800209c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002098:	d1ee      	bne.n	8002078 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40007000 	.word	0x40007000

080020ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e29b      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b96      	ldr	r3, [pc, #600]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020dc:	4b93      	ldr	r3, [pc, #588]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0x62>
 80020e8:	4b90      	ldr	r3, [pc, #576]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b8d      	ldr	r3, [pc, #564]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06c      	beq.n	80021dc <HAL_RCC_OscConfig+0x130>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d168      	bne.n	80021dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e275      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x7a>
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a83      	ldr	r2, [pc, #524]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02e      	b.n	8002184 <HAL_RCC_OscConfig+0xd8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x9c>
 800212e:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7e      	ldr	r2, [pc, #504]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b7c      	ldr	r3, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7b      	ldr	r2, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xd8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0xc0>
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a75      	ldr	r2, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b73      	ldr	r3, [pc, #460]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a72      	ldr	r2, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xd8>
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a6b      	ldr	r2, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fc52 	bl	8001a34 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fc4e 	bl	8001a34 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e229      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fc3e 	bl	8001a34 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fc3a 	bl	8001a34 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e215      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b57      	ldr	r3, [pc, #348]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x110>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d069      	beq.n	80022be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	4b50      	ldr	r3, [pc, #320]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f6:	4b4d      	ldr	r3, [pc, #308]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x190>
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x17a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1e9      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	493d      	ldr	r1, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e040      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d023      	beq.n	800228c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff fbf0 	bl	8001a34 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002258:	f7ff fbec 	bl	8001a34 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1c7      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4929      	ldr	r1, [pc, #164]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
 800228a:	e018      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a26      	ldr	r2, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fbcc 	bl	8001a34 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fbc8 	bl	8001a34 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1a3      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d038      	beq.n	800233c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d019      	beq.n	8002306 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff fba9 	bl	8001a34 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff fba5 	bl	8001a34 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e180      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCC_OscConfig+0x280>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x23a>
 8002304:	e01a      	b.n	800233c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_OscConfig+0x280>)
 8002308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <HAL_RCC_OscConfig+0x280>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7ff fb8f 	bl	8001a34 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231a:	f7ff fb8b 	bl	8001a34 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d903      	bls.n	8002330 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e166      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
 800232c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ee      	bne.n	800231a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80a4 	beq.w	8002492 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10d      	bne.n	8002372 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a88      	ldr	r2, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b86      	ldr	r3, [pc, #536]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002372:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x4d4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d118      	bne.n	80023b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800237e:	4b80      	ldr	r3, [pc, #512]	; (8002580 <HAL_RCC_OscConfig+0x4d4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7f      	ldr	r2, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0x4d4>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7ff fb53 	bl	8001a34 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002392:	f7ff fb4f 	bl	8001a34 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b64      	cmp	r3, #100	; 0x64
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e12a      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a4:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x4d4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x31a>
 80023b8:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	4a6f      	ldr	r2, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x33c>
 80023ce:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	e01c      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x35e>
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
 80023fc:	4b5f      	ldr	r3, [pc, #380]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e00b      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
 800240a:	4b5c      	ldr	r3, [pc, #368]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a5b      	ldr	r2, [pc, #364]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7ff fb03 	bl	8001a34 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff faff 	bl	8001a34 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e0d8      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ee      	beq.n	8002432 <HAL_RCC_OscConfig+0x386>
 8002454:	e014      	b.n	8002480 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7ff faed 	bl	8001a34 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff fae9 	bl	8001a34 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0c2      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a3c      	ldr	r2, [pc, #240]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 80ae 	beq.w	80025f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d06d      	beq.n	8002584 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d14b      	bne.n	8002548 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a31      	ldr	r2, [pc, #196]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff faba 	bl	8001a34 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff fab6 	bl	8001a34 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e091      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	019b      	lsls	r3, r3, #6
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	3b01      	subs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	491b      	ldr	r1, [pc, #108]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff fa88 	bl	8001a34 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff fa84 	bl	8001a34 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e05f      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x47c>
 8002546:	e057      	b.n	80025f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff fa6e 	bl	8001a34 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff fa6a 	bl	8001a34 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e045      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_OscConfig+0x4d0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x4b0>
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x54c>
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_RCC_OscConfig+0x558>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d030      	beq.n	80025f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d129      	bne.n	80025f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d122      	bne.n	80025f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d119      	bne.n	80025f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d10f      	bne.n	80025f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d0      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d910      	bls.n	8002650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 020f 	bic.w	r2, r3, #15
 8002636:	4965      	ldr	r1, [pc, #404]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0b8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800268a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	494d      	ldr	r1, [pc, #308]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d040      	beq.n	800272c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b47      	ldr	r3, [pc, #284]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e07f      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e073      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06b      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4936      	ldr	r1, [pc, #216]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7ff f99a 	bl	8001a34 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7ff f996 	bl	8001a34 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e053      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d210      	bcs.n	800275c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 020f 	bic.w	r2, r3, #15
 8002742:	4922      	ldr	r1, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e032      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4916      	ldr	r1, [pc, #88]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	490e      	ldr	r1, [pc, #56]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800279a:	f000 f821 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x1cc>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	fa22 f303 	lsr.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1d0>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_ClockConfig+0x1d4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f8f6 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023c00 	.word	0x40023c00
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08006ff8 	.word	0x08006ff8
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000008 	.word	0x20000008

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e4:	b094      	sub	sp, #80	; 0x50
 80027e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
 80027ec:	2300      	movs	r3, #0
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f0:	2300      	movs	r3, #0
 80027f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f8:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d00d      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x40>
 8002804:	2b08      	cmp	r3, #8
 8002806:	f200 80e1 	bhi.w	80029cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x34>
 800280e:	2b04      	cmp	r3, #4
 8002810:	d003      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x3a>
 8002812:	e0db      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002816:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002818:	e0db      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281a:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800281c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281e:	e0d8      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002820:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002836:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	099b      	lsrs	r3, r3, #6
 800283c:	2200      	movs	r2, #0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002840:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	2300      	movs	r3, #0
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
 800284e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002852:	4622      	mov	r2, r4
 8002854:	462b      	mov	r3, r5
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4621      	mov	r1, r4
 800286c:	1a51      	subs	r1, r2, r1
 800286e:	6139      	str	r1, [r7, #16]
 8002870:	4629      	mov	r1, r5
 8002872:	eb63 0301 	sbc.w	r3, r3, r1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002884:	4659      	mov	r1, fp
 8002886:	018b      	lsls	r3, r1, #6
 8002888:	4651      	mov	r1, sl
 800288a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288e:	4651      	mov	r1, sl
 8002890:	018a      	lsls	r2, r1, #6
 8002892:	4651      	mov	r1, sl
 8002894:	ebb2 0801 	subs.w	r8, r2, r1
 8002898:	4659      	mov	r1, fp
 800289a:	eb63 0901 	sbc.w	r9, r3, r1
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b2:	4690      	mov	r8, r2
 80028b4:	4699      	mov	r9, r3
 80028b6:	4623      	mov	r3, r4
 80028b8:	eb18 0303 	adds.w	r3, r8, r3
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	462b      	mov	r3, r5
 80028c0:	eb49 0303 	adc.w	r3, r9, r3
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028d2:	4629      	mov	r1, r5
 80028d4:	024b      	lsls	r3, r1, #9
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028dc:	4621      	mov	r1, r4
 80028de:	024a      	lsls	r2, r1, #9
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028f0:	f7fd fcfe 	bl	80002f0 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028fc:	e058      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b38      	ldr	r3, [pc, #224]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	2200      	movs	r2, #0
 8002906:	4618      	mov	r0, r3
 8002908:	4611      	mov	r1, r2
 800290a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	2300      	movs	r3, #0
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
 8002914:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002918:	4642      	mov	r2, r8
 800291a:	464b      	mov	r3, r9
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0159      	lsls	r1, r3, #5
 8002926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292a:	0150      	lsls	r0, r2, #5
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4641      	mov	r1, r8
 8002932:	ebb2 0a01 	subs.w	sl, r2, r1
 8002936:	4649      	mov	r1, r9
 8002938:	eb63 0b01 	sbc.w	fp, r3, r1
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002948:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800294c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002950:	ebb2 040a 	subs.w	r4, r2, sl
 8002954:	eb63 050b 	sbc.w	r5, r3, fp
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	00eb      	lsls	r3, r5, #3
 8002962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002966:	00e2      	lsls	r2, r4, #3
 8002968:	4614      	mov	r4, r2
 800296a:	461d      	mov	r5, r3
 800296c:	4643      	mov	r3, r8
 800296e:	18e3      	adds	r3, r4, r3
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	464b      	mov	r3, r9
 8002974:	eb45 0303 	adc.w	r3, r5, r3
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002986:	4629      	mov	r1, r5
 8002988:	028b      	lsls	r3, r1, #10
 800298a:	4621      	mov	r1, r4
 800298c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002990:	4621      	mov	r1, r4
 8002992:	028a      	lsls	r2, r1, #10
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	2200      	movs	r2, #0
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	61fa      	str	r2, [r7, #28]
 80029a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029a4:	f7fd fca4 	bl	80002f0 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80029c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ca:	e002      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3750      	adds	r7, #80	; 0x50
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	00f42400 	.word	0x00f42400
 80029e8:	007a1200 	.word	0x007a1200

080029ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000000 	.word	0x20000000

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a08:	f7ff fff0 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08007008 	.word	0x08007008

08002a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a30:	f7ff ffdc 	bl	80029ec <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0b5b      	lsrs	r3, r3, #13
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	08007008 	.word	0x08007008

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d012      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a7c:	4b69      	ldr	r3, [pc, #420]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a68      	ldr	r2, [pc, #416]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a86:	6093      	str	r3, [r2, #8]
 8002a88:	4b66      	ldr	r3, [pc, #408]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	4964      	ldr	r1, [pc, #400]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d017      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	4959      	ldr	r1, [pc, #356]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d017      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aea:	4b4e      	ldr	r3, [pc, #312]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	494a      	ldr	r1, [pc, #296]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 808b 	beq.w	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	4a39      	ldr	r2, [pc, #228]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6413      	str	r3, [r2, #64]	; 0x40
 8002b44:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a34      	ldr	r2, [pc, #208]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe ff6a 	bl	8001a34 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe ff66 	bl	8001a34 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e38f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d035      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d02e      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba0:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002baa:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bc2:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d114      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe ff2e 	bl	8001a34 <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe ff2a 	bl	8001a34 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e351      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c1a:	400b      	ands	r3, r1
 8002c1c:	4901      	ldr	r1, [pc, #4]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	0ffffcff 	.word	0x0ffffcff
 8002c30:	4bac      	ldr	r3, [pc, #688]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4aab      	ldr	r2, [pc, #684]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c3a:	6093      	str	r3, [r2, #8]
 8002c3c:	4ba9      	ldr	r3, [pc, #676]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	49a6      	ldr	r1, [pc, #664]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d010      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c5a:	4ba2      	ldr	r3, [pc, #648]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c60:	4aa0      	ldr	r2, [pc, #640]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c6a:	4b9e      	ldr	r3, [pc, #632]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	499b      	ldr	r1, [pc, #620]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c88:	4b96      	ldr	r3, [pc, #600]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c96:	4993      	ldr	r1, [pc, #588]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002caa:	4b8e      	ldr	r3, [pc, #568]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb8:	498a      	ldr	r1, [pc, #552]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ccc:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cda:	4982      	ldr	r1, [pc, #520]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4979      	ldr	r1, [pc, #484]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d10:	4b74      	ldr	r3, [pc, #464]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	4971      	ldr	r1, [pc, #452]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d32:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f023 020c 	bic.w	r2, r3, #12
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d40:	4968      	ldr	r1, [pc, #416]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d54:	4b63      	ldr	r3, [pc, #396]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	4960      	ldr	r1, [pc, #384]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d76:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d84:	4957      	ldr	r1, [pc, #348]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d98:	4b52      	ldr	r3, [pc, #328]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	494f      	ldr	r1, [pc, #316]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dba:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	4946      	ldr	r1, [pc, #280]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ddc:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	493e      	ldr	r1, [pc, #248]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002dfe:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0c:	4935      	ldr	r1, [pc, #212]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2e:	492d      	ldr	r1, [pc, #180]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d011      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e50:	4924      	ldr	r1, [pc, #144]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e60:	d101      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e90:	4914      	ldr	r1, [pc, #80]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00b      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb4:	490b      	ldr	r1, [pc, #44]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00f      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed8:	4902      	ldr	r1, [pc, #8]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ee0:	e002      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ef4:	4b8a      	ldr	r3, [pc, #552]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	4986      	ldr	r1, [pc, #536]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	497d      	ldr	r1, [pc, #500]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d006      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80d6 	beq.w	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f44:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a75      	ldr	r2, [pc, #468]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fe fd70 	bl	8001a34 <HAL_GetTick>
 8002f54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f58:	f7fe fd6c 	bl	8001a34 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e195      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d021      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d11d      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f98:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9e:	0e1b      	lsrs	r3, r3, #24
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	019a      	lsls	r2, r3, #6
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	071b      	lsls	r3, r3, #28
 8002fbe:	4958      	ldr	r1, [pc, #352]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02e      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff0:	d129      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff2:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	493e      	ldr	r1, [pc, #248]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800302e:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003034:	f023 021f 	bic.w	r2, r3, #31
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	3b01      	subs	r3, #1
 800303e:	4938      	ldr	r1, [pc, #224]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01d      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003052:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003058:	0e1b      	lsrs	r3, r3, #24
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003060:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003066:	0f1b      	lsrs	r3, r3, #28
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	019a      	lsls	r2, r3, #6
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	431a      	orrs	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	071b      	lsls	r3, r3, #28
 8003086:	4926      	ldr	r1, [pc, #152]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d011      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	491a      	ldr	r1, [pc, #104]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ca:	f7fe fcb3 	bl	8001a34 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030d2:	f7fe fcaf 	bl	8001a34 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0d8      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	f040 80ce 	bne.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030f8:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe fc96 	bl	8001a34 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800310a:	e00b      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800310c:	f7fe fc92 	bl	8001a34 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d904      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0bb      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003130:	d0ec      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02e      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	0f1b      	lsrs	r3, r3, #28
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	019a      	lsls	r2, r3, #6
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	4944      	ldr	r1, [pc, #272]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	493d      	ldr	r1, [pc, #244]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c4:	d11d      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d028      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	019a      	lsls	r2, r3, #6
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	071b      	lsls	r3, r3, #28
 8003242:	4917      	ldr	r1, [pc, #92]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	4911      	ldr	r1, [pc, #68]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fbe2 	bl	8001a34 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003274:	f7fe fbde 	bl	8001a34 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e007      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003292:	d1ef      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01c      	b.n	80032f0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	795b      	ldrb	r3, [r3, #5]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd fc18 	bl	8000afc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0204 	orr.w	r2, r2, #4
 80032e0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e09d      	b.n	8003446 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331a:	d009      	beq.n	8003330 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
 8003322:	e005      	b.n	8003330 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fc34 	bl	8000bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003366:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003370:	d902      	bls.n	8003378 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e002      	b.n	800337e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003386:	d007      	beq.n	8003398 <HAL_SPI_Init+0xa0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003390:	d002      	beq.n	8003398 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	ea42 0103 	orr.w	r1, r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	f003 0204 	and.w	r2, r3, #4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003414:	ea42 0103 	orr.w	r1, r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b088      	sub	sp, #32
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_SPI_Transmit+0x22>
 800346c:	2302      	movs	r3, #2
 800346e:	e158      	b.n	8003722 <HAL_SPI_Transmit+0x2d4>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003478:	f7fe fadc 	bl	8001a34 <HAL_GetTick>
 800347c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d002      	beq.n	8003494 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800348e:	2302      	movs	r3, #2
 8003490:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003492:	e13d      	b.n	8003710 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Transmit+0x52>
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034a4:	e134      	b.n	8003710 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2203      	movs	r2, #3
 80034aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	d10f      	bne.n	8003512 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003500:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003510:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d007      	beq.n	8003530 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003538:	d94b      	bls.n	80035d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Transmit+0xfa>
 8003542:	8afb      	ldrh	r3, [r7, #22]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d13e      	bne.n	80035c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	1c9a      	adds	r2, r3, #2
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800356c:	e02b      	b.n	80035c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d112      	bne.n	80035a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a0:	e011      	b.n	80035c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a2:	f7fe fa47 	bl	8001a34 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d803      	bhi.n	80035ba <HAL_SPI_Transmit+0x16c>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b8:	d102      	bne.n	80035c0 <HAL_SPI_Transmit+0x172>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035c4:	e0a4      	b.n	8003710 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ce      	bne.n	800356e <HAL_SPI_Transmit+0x120>
 80035d0:	e07c      	b.n	80036cc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit+0x192>
 80035da:	8afb      	ldrh	r3, [r7, #22]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d170      	bne.n	80036c2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d912      	bls.n	8003610 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	881a      	ldrh	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	1c9a      	adds	r2, r3, #2
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b02      	subs	r3, #2
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800360e:	e058      	b.n	80036c2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003636:	e044      	b.n	80036c2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d12b      	bne.n	800369e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d912      	bls.n	8003676 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	881a      	ldrh	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	1c9a      	adds	r2, r3, #2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b02      	subs	r3, #2
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003674:	e025      	b.n	80036c2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800369c:	e011      	b.n	80036c2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800369e:	f7fe f9c9 	bl	8001a34 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d803      	bhi.n	80036b6 <HAL_SPI_Transmit+0x268>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036b4:	d102      	bne.n	80036bc <HAL_SPI_Transmit+0x26e>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c0:	e026      	b.n	8003710 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1b5      	bne.n	8003638 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	6839      	ldr	r1, [r7, #0]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f945 	bl	8003960 <SPI_EndRxTxTransaction>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e000      	b.n	8003710 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800370e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003720:	7ffb      	ldrb	r3, [r7, #31]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800373c:	f7fe f97a 	bl	8001a34 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800374c:	f7fe f972 	bl	8001a34 <HAL_GetTick>
 8003750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	0d1b      	lsrs	r3, r3, #20
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	e054      	b.n	800380e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800376a:	d050      	beq.n	800380e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800376c:	f7fe f962 	bl	8001a34 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	429a      	cmp	r2, r3
 800377a:	d902      	bls.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d13d      	bne.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800379a:	d111      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a4:	d004      	beq.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ae:	d107      	bne.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d10f      	bne.n	80037ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e017      	b.n	800382e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3b01      	subs	r3, #1
 800380c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	429a      	cmp	r2, r3
 800382a:	d19b      	bne.n	8003764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000

0800383c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800384a:	f7fe f8f3 	bl	8001a34 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4413      	add	r3, r2
 8003858:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800385a:	f7fe f8eb 	bl	8001a34 <HAL_GetTick>
 800385e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003860:	4b3e      	ldr	r3, [pc, #248]	; (800395c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00da      	lsls	r2, r3, #3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	0d1b      	lsrs	r3, r3, #20
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003878:	e062      	b.n	8003940 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003880:	d109      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003894:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389c:	d050      	beq.n	8003940 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389e:	f7fe f8c9 	bl	8001a34 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d902      	bls.n	80038b4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d13d      	bne.n	8003930 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038cc:	d111      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d004      	beq.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d107      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fa:	d10f      	bne.n	800391c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e010      	b.n	8003952 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3b01      	subs	r3, #1
 800393e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d194      	bne.n	800387a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000000 	.word	0x20000000

08003960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff ff5f 	bl	800383c <SPI_WaitFifoStateUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e027      	b.n	80039e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	2180      	movs	r1, #128	; 0x80
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff fec4 	bl	800372c <SPI_WaitFlagStateUntilTimeout>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e014      	b.n	80039e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff ff38 	bl	800383c <SPI_WaitFifoStateUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e000      	b.n	80039e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e049      	b.n	8003a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fa8e 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 f8fc 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b3      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x180>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4b55      	ldr	r3, [pc, #340]	; (8003c24 <HAL_TIM_ConfigClockSource+0x188>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd0>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	f000 8085 	beq.w	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa2>
 8003b08:	2b70      	cmp	r3, #112	; 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b0c:	2b60      	cmp	r3, #96	; 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x116>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b14:	2b50      	cmp	r3, #80	; 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xf6>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x136>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x156>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x156>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x156>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f000 f985 	bl	8003e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04e      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f000 f96e 	bl	8003e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03b      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 f8e2 	bl	8003d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	; 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f93b 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02b      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 f901 	bl	8003dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	; 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f92b 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01b      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 f8c2 	bl	8003d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f91b 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00b      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 f912 	bl	8003e26 <TIM_ITRx_SetConfig>
        break;
 8003c02:	e002      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c04:	bf00      	nop
 8003c06:	e000      	b.n	8003c0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	fffeff88 	.word	0xfffeff88

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <TIM_Base_SetConfig+0x114>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c46:	d00f      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3d      	ldr	r2, [pc, #244]	; (8003d40 <TIM_Base_SetConfig+0x118>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3c      	ldr	r2, [pc, #240]	; (8003d44 <TIM_Base_SetConfig+0x11c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3b      	ldr	r2, [pc, #236]	; (8003d48 <TIM_Base_SetConfig+0x120>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <TIM_Base_SetConfig+0x124>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <TIM_Base_SetConfig+0x114>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d027      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <TIM_Base_SetConfig+0x118>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d023      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2b      	ldr	r2, [pc, #172]	; (8003d44 <TIM_Base_SetConfig+0x11c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01f      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <TIM_Base_SetConfig+0x120>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01b      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <TIM_Base_SetConfig+0x124>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d017      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <TIM_Base_SetConfig+0x128>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <TIM_Base_SetConfig+0x12c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a26      	ldr	r2, [pc, #152]	; (8003d58 <TIM_Base_SetConfig+0x130>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a25      	ldr	r2, [pc, #148]	; (8003d5c <TIM_Base_SetConfig+0x134>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a24      	ldr	r2, [pc, #144]	; (8003d60 <TIM_Base_SetConfig+0x138>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <TIM_Base_SetConfig+0x13c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <TIM_Base_SetConfig+0x114>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0xf8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <TIM_Base_SetConfig+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d103      	bne.n	8003d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800
 8003d48:	40000c00 	.word	0x40000c00
 8003d4c:	40010400 	.word	0x40010400
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800
 8003d5c:	40001800 	.word	0x40001800
 8003d60:	40001c00 	.word	0x40001c00
 8003d64:	40002000 	.word	0x40002000

08003d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0201 	bic.w	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 030a 	bic.w	r3, r3, #10
 8003da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0210 	bic.w	r2, r3, #16
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	031b      	lsls	r3, r3, #12
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f043 0307 	orr.w	r3, r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e06d      	b.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a30      	ldr	r2, [pc, #192]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d108      	bne.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d022      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f26:	d01d      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d018      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00e      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d009      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10c      	bne.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40001800 	.word	0x40001800

08003fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e040      	b.n	800404c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fc fffa 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f82c 	bl	8004054 <UART_SetConfig>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e022      	b.n	800404c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa84 	bl	800451c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fb0b 	bl	8004660 <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4ba6      	ldr	r3, [pc, #664]	; (8004318 <UART_SetConfig+0x2c4>)
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	430b      	orrs	r3, r1
 800408a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a94      	ldr	r2, [pc, #592]	; (800431c <UART_SetConfig+0x2c8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d120      	bne.n	8004112 <UART_SetConfig+0xbe>
 80040d0:	4b93      	ldr	r3, [pc, #588]	; (8004320 <UART_SetConfig+0x2cc>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d816      	bhi.n	800410c <UART_SetConfig+0xb8>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <UART_SetConfig+0x90>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004101 	.word	0x08004101
 80040ec:	080040fb 	.word	0x080040fb
 80040f0:	08004107 	.word	0x08004107
 80040f4:	2301      	movs	r3, #1
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e150      	b.n	800439c <UART_SetConfig+0x348>
 80040fa:	2302      	movs	r3, #2
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e14d      	b.n	800439c <UART_SetConfig+0x348>
 8004100:	2304      	movs	r3, #4
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e14a      	b.n	800439c <UART_SetConfig+0x348>
 8004106:	2308      	movs	r3, #8
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e147      	b.n	800439c <UART_SetConfig+0x348>
 800410c:	2310      	movs	r3, #16
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e144      	b.n	800439c <UART_SetConfig+0x348>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a83      	ldr	r2, [pc, #524]	; (8004324 <UART_SetConfig+0x2d0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d132      	bne.n	8004182 <UART_SetConfig+0x12e>
 800411c:	4b80      	ldr	r3, [pc, #512]	; (8004320 <UART_SetConfig+0x2cc>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b0c      	cmp	r3, #12
 8004128:	d828      	bhi.n	800417c <UART_SetConfig+0x128>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0xdc>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004165 	.word	0x08004165
 8004134:	0800417d 	.word	0x0800417d
 8004138:	0800417d 	.word	0x0800417d
 800413c:	0800417d 	.word	0x0800417d
 8004140:	08004171 	.word	0x08004171
 8004144:	0800417d 	.word	0x0800417d
 8004148:	0800417d 	.word	0x0800417d
 800414c:	0800417d 	.word	0x0800417d
 8004150:	0800416b 	.word	0x0800416b
 8004154:	0800417d 	.word	0x0800417d
 8004158:	0800417d 	.word	0x0800417d
 800415c:	0800417d 	.word	0x0800417d
 8004160:	08004177 	.word	0x08004177
 8004164:	2300      	movs	r3, #0
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	e118      	b.n	800439c <UART_SetConfig+0x348>
 800416a:	2302      	movs	r3, #2
 800416c:	77fb      	strb	r3, [r7, #31]
 800416e:	e115      	b.n	800439c <UART_SetConfig+0x348>
 8004170:	2304      	movs	r3, #4
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e112      	b.n	800439c <UART_SetConfig+0x348>
 8004176:	2308      	movs	r3, #8
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e10f      	b.n	800439c <UART_SetConfig+0x348>
 800417c:	2310      	movs	r3, #16
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e10c      	b.n	800439c <UART_SetConfig+0x348>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a68      	ldr	r2, [pc, #416]	; (8004328 <UART_SetConfig+0x2d4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d120      	bne.n	80041ce <UART_SetConfig+0x17a>
 800418c:	4b64      	ldr	r3, [pc, #400]	; (8004320 <UART_SetConfig+0x2cc>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004196:	2b30      	cmp	r3, #48	; 0x30
 8004198:	d013      	beq.n	80041c2 <UART_SetConfig+0x16e>
 800419a:	2b30      	cmp	r3, #48	; 0x30
 800419c:	d814      	bhi.n	80041c8 <UART_SetConfig+0x174>
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d009      	beq.n	80041b6 <UART_SetConfig+0x162>
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d810      	bhi.n	80041c8 <UART_SetConfig+0x174>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <UART_SetConfig+0x15c>
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d006      	beq.n	80041bc <UART_SetConfig+0x168>
 80041ae:	e00b      	b.n	80041c8 <UART_SetConfig+0x174>
 80041b0:	2300      	movs	r3, #0
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e0f2      	b.n	800439c <UART_SetConfig+0x348>
 80041b6:	2302      	movs	r3, #2
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e0ef      	b.n	800439c <UART_SetConfig+0x348>
 80041bc:	2304      	movs	r3, #4
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e0ec      	b.n	800439c <UART_SetConfig+0x348>
 80041c2:	2308      	movs	r3, #8
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e0e9      	b.n	800439c <UART_SetConfig+0x348>
 80041c8:	2310      	movs	r3, #16
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0e6      	b.n	800439c <UART_SetConfig+0x348>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a56      	ldr	r2, [pc, #344]	; (800432c <UART_SetConfig+0x2d8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d120      	bne.n	800421a <UART_SetConfig+0x1c6>
 80041d8:	4b51      	ldr	r3, [pc, #324]	; (8004320 <UART_SetConfig+0x2cc>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041e2:	2bc0      	cmp	r3, #192	; 0xc0
 80041e4:	d013      	beq.n	800420e <UART_SetConfig+0x1ba>
 80041e6:	2bc0      	cmp	r3, #192	; 0xc0
 80041e8:	d814      	bhi.n	8004214 <UART_SetConfig+0x1c0>
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d009      	beq.n	8004202 <UART_SetConfig+0x1ae>
 80041ee:	2b80      	cmp	r3, #128	; 0x80
 80041f0:	d810      	bhi.n	8004214 <UART_SetConfig+0x1c0>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <UART_SetConfig+0x1a8>
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d006      	beq.n	8004208 <UART_SetConfig+0x1b4>
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x1c0>
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e0cc      	b.n	800439c <UART_SetConfig+0x348>
 8004202:	2302      	movs	r3, #2
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e0c9      	b.n	800439c <UART_SetConfig+0x348>
 8004208:	2304      	movs	r3, #4
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e0c6      	b.n	800439c <UART_SetConfig+0x348>
 800420e:	2308      	movs	r3, #8
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e0c3      	b.n	800439c <UART_SetConfig+0x348>
 8004214:	2310      	movs	r3, #16
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e0c0      	b.n	800439c <UART_SetConfig+0x348>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a44      	ldr	r2, [pc, #272]	; (8004330 <UART_SetConfig+0x2dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d125      	bne.n	8004270 <UART_SetConfig+0x21c>
 8004224:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <UART_SetConfig+0x2cc>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d017      	beq.n	8004264 <UART_SetConfig+0x210>
 8004234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004238:	d817      	bhi.n	800426a <UART_SetConfig+0x216>
 800423a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423e:	d00b      	beq.n	8004258 <UART_SetConfig+0x204>
 8004240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004244:	d811      	bhi.n	800426a <UART_SetConfig+0x216>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <UART_SetConfig+0x1fe>
 800424a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424e:	d006      	beq.n	800425e <UART_SetConfig+0x20a>
 8004250:	e00b      	b.n	800426a <UART_SetConfig+0x216>
 8004252:	2300      	movs	r3, #0
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e0a1      	b.n	800439c <UART_SetConfig+0x348>
 8004258:	2302      	movs	r3, #2
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e09e      	b.n	800439c <UART_SetConfig+0x348>
 800425e:	2304      	movs	r3, #4
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e09b      	b.n	800439c <UART_SetConfig+0x348>
 8004264:	2308      	movs	r3, #8
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e098      	b.n	800439c <UART_SetConfig+0x348>
 800426a:	2310      	movs	r3, #16
 800426c:	77fb      	strb	r3, [r7, #31]
 800426e:	e095      	b.n	800439c <UART_SetConfig+0x348>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <UART_SetConfig+0x2e0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d125      	bne.n	80042c6 <UART_SetConfig+0x272>
 800427a:	4b29      	ldr	r3, [pc, #164]	; (8004320 <UART_SetConfig+0x2cc>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004288:	d017      	beq.n	80042ba <UART_SetConfig+0x266>
 800428a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800428e:	d817      	bhi.n	80042c0 <UART_SetConfig+0x26c>
 8004290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004294:	d00b      	beq.n	80042ae <UART_SetConfig+0x25a>
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d811      	bhi.n	80042c0 <UART_SetConfig+0x26c>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <UART_SetConfig+0x254>
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	d006      	beq.n	80042b4 <UART_SetConfig+0x260>
 80042a6:	e00b      	b.n	80042c0 <UART_SetConfig+0x26c>
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e076      	b.n	800439c <UART_SetConfig+0x348>
 80042ae:	2302      	movs	r3, #2
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e073      	b.n	800439c <UART_SetConfig+0x348>
 80042b4:	2304      	movs	r3, #4
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e070      	b.n	800439c <UART_SetConfig+0x348>
 80042ba:	2308      	movs	r3, #8
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e06d      	b.n	800439c <UART_SetConfig+0x348>
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e06a      	b.n	800439c <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <UART_SetConfig+0x2e4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d138      	bne.n	8004342 <UART_SetConfig+0x2ee>
 80042d0:	4b13      	ldr	r3, [pc, #76]	; (8004320 <UART_SetConfig+0x2cc>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042de:	d017      	beq.n	8004310 <UART_SetConfig+0x2bc>
 80042e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042e4:	d82a      	bhi.n	800433c <UART_SetConfig+0x2e8>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d00b      	beq.n	8004304 <UART_SetConfig+0x2b0>
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	d824      	bhi.n	800433c <UART_SetConfig+0x2e8>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <UART_SetConfig+0x2aa>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d006      	beq.n	800430a <UART_SetConfig+0x2b6>
 80042fc:	e01e      	b.n	800433c <UART_SetConfig+0x2e8>
 80042fe:	2300      	movs	r3, #0
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e04b      	b.n	800439c <UART_SetConfig+0x348>
 8004304:	2302      	movs	r3, #2
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e048      	b.n	800439c <UART_SetConfig+0x348>
 800430a:	2304      	movs	r3, #4
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e045      	b.n	800439c <UART_SetConfig+0x348>
 8004310:	2308      	movs	r3, #8
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e042      	b.n	800439c <UART_SetConfig+0x348>
 8004316:	bf00      	nop
 8004318:	efff69f3 	.word	0xefff69f3
 800431c:	40011000 	.word	0x40011000
 8004320:	40023800 	.word	0x40023800
 8004324:	40004400 	.word	0x40004400
 8004328:	40004800 	.word	0x40004800
 800432c:	40004c00 	.word	0x40004c00
 8004330:	40005000 	.word	0x40005000
 8004334:	40011400 	.word	0x40011400
 8004338:	40007800 	.word	0x40007800
 800433c:	2310      	movs	r3, #16
 800433e:	77fb      	strb	r3, [r7, #31]
 8004340:	e02c      	b.n	800439c <UART_SetConfig+0x348>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a72      	ldr	r2, [pc, #456]	; (8004510 <UART_SetConfig+0x4bc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d125      	bne.n	8004398 <UART_SetConfig+0x344>
 800434c:	4b71      	ldr	r3, [pc, #452]	; (8004514 <UART_SetConfig+0x4c0>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004356:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800435a:	d017      	beq.n	800438c <UART_SetConfig+0x338>
 800435c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004360:	d817      	bhi.n	8004392 <UART_SetConfig+0x33e>
 8004362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004366:	d00b      	beq.n	8004380 <UART_SetConfig+0x32c>
 8004368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800436c:	d811      	bhi.n	8004392 <UART_SetConfig+0x33e>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <UART_SetConfig+0x326>
 8004372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004376:	d006      	beq.n	8004386 <UART_SetConfig+0x332>
 8004378:	e00b      	b.n	8004392 <UART_SetConfig+0x33e>
 800437a:	2300      	movs	r3, #0
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e00d      	b.n	800439c <UART_SetConfig+0x348>
 8004380:	2302      	movs	r3, #2
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e00a      	b.n	800439c <UART_SetConfig+0x348>
 8004386:	2304      	movs	r3, #4
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e007      	b.n	800439c <UART_SetConfig+0x348>
 800438c:	2308      	movs	r3, #8
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e004      	b.n	800439c <UART_SetConfig+0x348>
 8004392:	2310      	movs	r3, #16
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e001      	b.n	800439c <UART_SetConfig+0x348>
 8004398:	2310      	movs	r3, #16
 800439a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a4:	d15c      	bne.n	8004460 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80043a6:	7ffb      	ldrb	r3, [r7, #31]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d828      	bhi.n	80043fe <UART_SetConfig+0x3aa>
 80043ac:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x360>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043e1 	.word	0x080043e1
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	080043ff 	.word	0x080043ff
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043ff 	.word	0x080043ff
 80043cc:	080043ff 	.word	0x080043ff
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	080043f7 	.word	0x080043f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fe fb14 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 80043dc:	61b8      	str	r0, [r7, #24]
        break;
 80043de:	e013      	b.n	8004408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7fe fb24 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 80043e4:	61b8      	str	r0, [r7, #24]
        break;
 80043e6:	e00f      	b.n	8004408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e8:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <UART_SetConfig+0x4c4>)
 80043ea:	61bb      	str	r3, [r7, #24]
        break;
 80043ec:	e00c      	b.n	8004408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ee:	f7fe f9f7 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 80043f2:	61b8      	str	r0, [r7, #24]
        break;
 80043f4:	e008      	b.n	8004408 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fa:	61bb      	str	r3, [r7, #24]
        break;
 80043fc:	e004      	b.n	8004408 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	77bb      	strb	r3, [r7, #30]
        break;
 8004406:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d074      	beq.n	80044f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	005a      	lsls	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	b29b      	uxth	r3, r3
 8004424:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b0f      	cmp	r3, #15
 800442a:	d916      	bls.n	800445a <UART_SetConfig+0x406>
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d212      	bcs.n	800445a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f023 030f 	bic.w	r3, r3, #15
 800443c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	b29a      	uxth	r2, r3
 800444a:	89fb      	ldrh	r3, [r7, #14]
 800444c:	4313      	orrs	r3, r2
 800444e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	89fa      	ldrh	r2, [r7, #14]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	e04e      	b.n	80044f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	77bb      	strb	r3, [r7, #30]
 800445e:	e04b      	b.n	80044f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004460:	7ffb      	ldrb	r3, [r7, #31]
 8004462:	2b08      	cmp	r3, #8
 8004464:	d827      	bhi.n	80044b6 <UART_SetConfig+0x462>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x418>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004491 	.word	0x08004491
 8004470:	08004499 	.word	0x08004499
 8004474:	080044a1 	.word	0x080044a1
 8004478:	080044b7 	.word	0x080044b7
 800447c:	080044a7 	.word	0x080044a7
 8004480:	080044b7 	.word	0x080044b7
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044b7 	.word	0x080044b7
 800448c:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe fab8 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8004494:	61b8      	str	r0, [r7, #24]
        break;
 8004496:	e013      	b.n	80044c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7fe fac8 	bl	8002a2c <HAL_RCC_GetPCLK2Freq>
 800449c:	61b8      	str	r0, [r7, #24]
        break;
 800449e:	e00f      	b.n	80044c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <UART_SetConfig+0x4c4>)
 80044a2:	61bb      	str	r3, [r7, #24]
        break;
 80044a4:	e00c      	b.n	80044c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe f99b 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 80044aa:	61b8      	str	r0, [r7, #24]
        break;
 80044ac:	e008      	b.n	80044c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	61bb      	str	r3, [r7, #24]
        break;
 80044b4:	e004      	b.n	80044c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	77bb      	strb	r3, [r7, #30]
        break;
 80044be:	bf00      	nop
    }

    if (pclk != 0U)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d018      	beq.n	80044f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	085a      	lsrs	r2, r3, #1
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	441a      	add	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	d908      	bls.n	80044f4 <UART_SetConfig+0x4a0>
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d204      	bcs.n	80044f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	e001      	b.n	80044f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004504:	7fbb      	ldrb	r3, [r7, #30]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40007c00 	.word	0x40007c00
 8004514:	40023800 	.word	0x40023800
 8004518:	00f42400 	.word	0x00f42400

0800451c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01a      	beq.n	8004632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800461a:	d10a      	bne.n	8004632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004670:	f7fd f9e0 	bl	8001a34 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d10e      	bne.n	80046a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f82d 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e023      	b.n	80046ea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d10e      	bne.n	80046ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f817 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e00d      	b.n	80046ea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004702:	e05e      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470a:	d05a      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fd f992 	bl	8001a34 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <UART_WaitOnFlagUntilTimeout+0x30>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11b      	bne.n	800475a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004730:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e043      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02c      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d124      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004780:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004790:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2220      	movs	r2, #32
 80047a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e00f      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d091      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <__cvt>:
 80047ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ec:	ed2d 8b02 	vpush	{d8}
 80047f0:	eeb0 8b40 	vmov.f64	d8, d0
 80047f4:	b085      	sub	sp, #20
 80047f6:	4617      	mov	r7, r2
 80047f8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80047fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80047fc:	ee18 2a90 	vmov	r2, s17
 8004800:	f025 0520 	bic.w	r5, r5, #32
 8004804:	2a00      	cmp	r2, #0
 8004806:	bfb6      	itet	lt
 8004808:	222d      	movlt	r2, #45	; 0x2d
 800480a:	2200      	movge	r2, #0
 800480c:	eeb1 8b40 	vneglt.f64	d8, d0
 8004810:	2d46      	cmp	r5, #70	; 0x46
 8004812:	460c      	mov	r4, r1
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	d004      	beq.n	8004822 <__cvt+0x38>
 8004818:	2d45      	cmp	r5, #69	; 0x45
 800481a:	d100      	bne.n	800481e <__cvt+0x34>
 800481c:	3401      	adds	r4, #1
 800481e:	2102      	movs	r1, #2
 8004820:	e000      	b.n	8004824 <__cvt+0x3a>
 8004822:	2103      	movs	r1, #3
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	ab02      	add	r3, sp, #8
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	4622      	mov	r2, r4
 800482e:	4633      	mov	r3, r6
 8004830:	eeb0 0b48 	vmov.f64	d0, d8
 8004834:	f000 fd88 	bl	8005348 <_dtoa_r>
 8004838:	2d47      	cmp	r5, #71	; 0x47
 800483a:	d101      	bne.n	8004840 <__cvt+0x56>
 800483c:	07fb      	lsls	r3, r7, #31
 800483e:	d51a      	bpl.n	8004876 <__cvt+0x8c>
 8004840:	2d46      	cmp	r5, #70	; 0x46
 8004842:	eb00 0204 	add.w	r2, r0, r4
 8004846:	d10c      	bne.n	8004862 <__cvt+0x78>
 8004848:	7803      	ldrb	r3, [r0, #0]
 800484a:	2b30      	cmp	r3, #48	; 0x30
 800484c:	d107      	bne.n	800485e <__cvt+0x74>
 800484e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004856:	bf1c      	itt	ne
 8004858:	f1c4 0401 	rsbne	r4, r4, #1
 800485c:	6034      	strne	r4, [r6, #0]
 800485e:	6833      	ldr	r3, [r6, #0]
 8004860:	441a      	add	r2, r3
 8004862:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	bf08      	it	eq
 800486c:	9203      	streq	r2, [sp, #12]
 800486e:	2130      	movs	r1, #48	; 0x30
 8004870:	9b03      	ldr	r3, [sp, #12]
 8004872:	4293      	cmp	r3, r2
 8004874:	d307      	bcc.n	8004886 <__cvt+0x9c>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800487a:	1a1b      	subs	r3, r3, r0
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	b005      	add	sp, #20
 8004880:	ecbd 8b02 	vpop	{d8}
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004886:	1c5c      	adds	r4, r3, #1
 8004888:	9403      	str	r4, [sp, #12]
 800488a:	7019      	strb	r1, [r3, #0]
 800488c:	e7f0      	b.n	8004870 <__cvt+0x86>

0800488e <__exponent>:
 800488e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004890:	4603      	mov	r3, r0
 8004892:	2900      	cmp	r1, #0
 8004894:	bfb8      	it	lt
 8004896:	4249      	neglt	r1, r1
 8004898:	f803 2b02 	strb.w	r2, [r3], #2
 800489c:	bfb4      	ite	lt
 800489e:	222d      	movlt	r2, #45	; 0x2d
 80048a0:	222b      	movge	r2, #43	; 0x2b
 80048a2:	2909      	cmp	r1, #9
 80048a4:	7042      	strb	r2, [r0, #1]
 80048a6:	dd2a      	ble.n	80048fe <__exponent+0x70>
 80048a8:	f10d 0207 	add.w	r2, sp, #7
 80048ac:	4617      	mov	r7, r2
 80048ae:	260a      	movs	r6, #10
 80048b0:	4694      	mov	ip, r2
 80048b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80048b6:	fb06 1415 	mls	r4, r6, r5, r1
 80048ba:	3430      	adds	r4, #48	; 0x30
 80048bc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80048c0:	460c      	mov	r4, r1
 80048c2:	2c63      	cmp	r4, #99	; 0x63
 80048c4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80048c8:	4629      	mov	r1, r5
 80048ca:	dcf1      	bgt.n	80048b0 <__exponent+0x22>
 80048cc:	3130      	adds	r1, #48	; 0x30
 80048ce:	f1ac 0402 	sub.w	r4, ip, #2
 80048d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048d6:	1c41      	adds	r1, r0, #1
 80048d8:	4622      	mov	r2, r4
 80048da:	42ba      	cmp	r2, r7
 80048dc:	d30a      	bcc.n	80048f4 <__exponent+0x66>
 80048de:	f10d 0209 	add.w	r2, sp, #9
 80048e2:	eba2 020c 	sub.w	r2, r2, ip
 80048e6:	42bc      	cmp	r4, r7
 80048e8:	bf88      	it	hi
 80048ea:	2200      	movhi	r2, #0
 80048ec:	4413      	add	r3, r2
 80048ee:	1a18      	subs	r0, r3, r0
 80048f0:	b003      	add	sp, #12
 80048f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048f8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048fc:	e7ed      	b.n	80048da <__exponent+0x4c>
 80048fe:	2330      	movs	r3, #48	; 0x30
 8004900:	3130      	adds	r1, #48	; 0x30
 8004902:	7083      	strb	r3, [r0, #2]
 8004904:	70c1      	strb	r1, [r0, #3]
 8004906:	1d03      	adds	r3, r0, #4
 8004908:	e7f1      	b.n	80048ee <__exponent+0x60>
 800490a:	0000      	movs	r0, r0
 800490c:	0000      	movs	r0, r0
	...

08004910 <_printf_float>:
 8004910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	b08b      	sub	sp, #44	; 0x2c
 8004916:	460c      	mov	r4, r1
 8004918:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800491c:	4616      	mov	r6, r2
 800491e:	461f      	mov	r7, r3
 8004920:	4605      	mov	r5, r0
 8004922:	f000 fc57 	bl	80051d4 <_localeconv_r>
 8004926:	f8d0 b000 	ldr.w	fp, [r0]
 800492a:	4658      	mov	r0, fp
 800492c:	f7fb fcd8 	bl	80002e0 <strlen>
 8004930:	2300      	movs	r3, #0
 8004932:	9308      	str	r3, [sp, #32]
 8004934:	f8d8 3000 	ldr.w	r3, [r8]
 8004938:	f894 9018 	ldrb.w	r9, [r4, #24]
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	3307      	adds	r3, #7
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	f103 0108 	add.w	r1, r3, #8
 8004948:	f8c8 1000 	str.w	r1, [r8]
 800494c:	ed93 0b00 	vldr	d0, [r3]
 8004950:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8004bb0 <_printf_float+0x2a0>
 8004954:	eeb0 7bc0 	vabs.f64	d7, d0
 8004958:	eeb4 7b46 	vcmp.f64	d7, d6
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004964:	4682      	mov	sl, r0
 8004966:	dd24      	ble.n	80049b2 <_printf_float+0xa2>
 8004968:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800496c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004970:	d502      	bpl.n	8004978 <_printf_float+0x68>
 8004972:	232d      	movs	r3, #45	; 0x2d
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004978:	498f      	ldr	r1, [pc, #572]	; (8004bb8 <_printf_float+0x2a8>)
 800497a:	4b90      	ldr	r3, [pc, #576]	; (8004bbc <_printf_float+0x2ac>)
 800497c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004980:	bf94      	ite	ls
 8004982:	4688      	movls	r8, r1
 8004984:	4698      	movhi	r8, r3
 8004986:	2303      	movs	r3, #3
 8004988:	6123      	str	r3, [r4, #16]
 800498a:	f022 0204 	bic.w	r2, r2, #4
 800498e:	2300      	movs	r3, #0
 8004990:	6022      	str	r2, [r4, #0]
 8004992:	9304      	str	r3, [sp, #16]
 8004994:	9700      	str	r7, [sp, #0]
 8004996:	4633      	mov	r3, r6
 8004998:	aa09      	add	r2, sp, #36	; 0x24
 800499a:	4621      	mov	r1, r4
 800499c:	4628      	mov	r0, r5
 800499e:	f000 f9d1 	bl	8004d44 <_printf_common>
 80049a2:	3001      	adds	r0, #1
 80049a4:	f040 808a 	bne.w	8004abc <_printf_float+0x1ac>
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ac:	b00b      	add	sp, #44	; 0x2c
 80049ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	d709      	bvc.n	80049d0 <_printf_float+0xc0>
 80049bc:	ee10 3a90 	vmov	r3, s1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfbc      	itt	lt
 80049c4:	232d      	movlt	r3, #45	; 0x2d
 80049c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049ca:	497d      	ldr	r1, [pc, #500]	; (8004bc0 <_printf_float+0x2b0>)
 80049cc:	4b7d      	ldr	r3, [pc, #500]	; (8004bc4 <_printf_float+0x2b4>)
 80049ce:	e7d5      	b.n	800497c <_printf_float+0x6c>
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80049d6:	9104      	str	r1, [sp, #16]
 80049d8:	1c59      	adds	r1, r3, #1
 80049da:	d13c      	bne.n	8004a56 <_printf_float+0x146>
 80049dc:	2306      	movs	r3, #6
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	2300      	movs	r3, #0
 80049e2:	9303      	str	r3, [sp, #12]
 80049e4:	ab08      	add	r3, sp, #32
 80049e6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80049ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ee:	ab07      	add	r3, sp, #28
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	f10d 031b 	add.w	r3, sp, #27
 80049fa:	4628      	mov	r0, r5
 80049fc:	f7ff fef5 	bl	80047ea <__cvt>
 8004a00:	9b04      	ldr	r3, [sp, #16]
 8004a02:	9907      	ldr	r1, [sp, #28]
 8004a04:	2b47      	cmp	r3, #71	; 0x47
 8004a06:	4680      	mov	r8, r0
 8004a08:	d108      	bne.n	8004a1c <_printf_float+0x10c>
 8004a0a:	1cc8      	adds	r0, r1, #3
 8004a0c:	db02      	blt.n	8004a14 <_printf_float+0x104>
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	4299      	cmp	r1, r3
 8004a12:	dd41      	ble.n	8004a98 <_printf_float+0x188>
 8004a14:	f1a9 0902 	sub.w	r9, r9, #2
 8004a18:	fa5f f989 	uxtb.w	r9, r9
 8004a1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a20:	d820      	bhi.n	8004a64 <_printf_float+0x154>
 8004a22:	3901      	subs	r1, #1
 8004a24:	464a      	mov	r2, r9
 8004a26:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a2a:	9107      	str	r1, [sp, #28]
 8004a2c:	f7ff ff2f 	bl	800488e <__exponent>
 8004a30:	9a08      	ldr	r2, [sp, #32]
 8004a32:	9004      	str	r0, [sp, #16]
 8004a34:	1813      	adds	r3, r2, r0
 8004a36:	2a01      	cmp	r2, #1
 8004a38:	6123      	str	r3, [r4, #16]
 8004a3a:	dc02      	bgt.n	8004a42 <_printf_float+0x132>
 8004a3c:	6822      	ldr	r2, [r4, #0]
 8004a3e:	07d2      	lsls	r2, r2, #31
 8004a40:	d501      	bpl.n	8004a46 <_printf_float+0x136>
 8004a42:	3301      	adds	r3, #1
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0a2      	beq.n	8004994 <_printf_float+0x84>
 8004a4e:	232d      	movs	r3, #45	; 0x2d
 8004a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a54:	e79e      	b.n	8004994 <_printf_float+0x84>
 8004a56:	9904      	ldr	r1, [sp, #16]
 8004a58:	2947      	cmp	r1, #71	; 0x47
 8004a5a:	d1c1      	bne.n	80049e0 <_printf_float+0xd0>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1bf      	bne.n	80049e0 <_printf_float+0xd0>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e7bc      	b.n	80049de <_printf_float+0xce>
 8004a64:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a68:	d118      	bne.n	8004a9c <_printf_float+0x18c>
 8004a6a:	2900      	cmp	r1, #0
 8004a6c:	6863      	ldr	r3, [r4, #4]
 8004a6e:	dd0b      	ble.n	8004a88 <_printf_float+0x178>
 8004a70:	6121      	str	r1, [r4, #16]
 8004a72:	b913      	cbnz	r3, 8004a7a <_printf_float+0x16a>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	07d0      	lsls	r0, r2, #31
 8004a78:	d502      	bpl.n	8004a80 <_printf_float+0x170>
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	440b      	add	r3, r1
 8004a7e:	6123      	str	r3, [r4, #16]
 8004a80:	2300      	movs	r3, #0
 8004a82:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a84:	9304      	str	r3, [sp, #16]
 8004a86:	e7de      	b.n	8004a46 <_printf_float+0x136>
 8004a88:	b913      	cbnz	r3, 8004a90 <_printf_float+0x180>
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	07d2      	lsls	r2, r2, #31
 8004a8e:	d501      	bpl.n	8004a94 <_printf_float+0x184>
 8004a90:	3302      	adds	r3, #2
 8004a92:	e7f4      	b.n	8004a7e <_printf_float+0x16e>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e7f2      	b.n	8004a7e <_printf_float+0x16e>
 8004a98:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a9c:	9b08      	ldr	r3, [sp, #32]
 8004a9e:	4299      	cmp	r1, r3
 8004aa0:	db05      	blt.n	8004aae <_printf_float+0x19e>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	6121      	str	r1, [r4, #16]
 8004aa6:	07d8      	lsls	r0, r3, #31
 8004aa8:	d5ea      	bpl.n	8004a80 <_printf_float+0x170>
 8004aaa:	1c4b      	adds	r3, r1, #1
 8004aac:	e7e7      	b.n	8004a7e <_printf_float+0x16e>
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	bfd4      	ite	le
 8004ab2:	f1c1 0202 	rsble	r2, r1, #2
 8004ab6:	2201      	movgt	r2, #1
 8004ab8:	4413      	add	r3, r2
 8004aba:	e7e0      	b.n	8004a7e <_printf_float+0x16e>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	055a      	lsls	r2, r3, #21
 8004ac0:	d407      	bmi.n	8004ad2 <_printf_float+0x1c2>
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	4628      	mov	r0, r5
 8004aca:	47b8      	blx	r7
 8004acc:	3001      	adds	r0, #1
 8004ace:	d12a      	bne.n	8004b26 <_printf_float+0x216>
 8004ad0:	e76a      	b.n	80049a8 <_printf_float+0x98>
 8004ad2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ad6:	f240 80e0 	bls.w	8004c9a <_printf_float+0x38a>
 8004ada:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004ade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	d133      	bne.n	8004b50 <_printf_float+0x240>
 8004ae8:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <_printf_float+0x2b8>)
 8004aea:	2301      	movs	r3, #1
 8004aec:	4631      	mov	r1, r6
 8004aee:	4628      	mov	r0, r5
 8004af0:	47b8      	blx	r7
 8004af2:	3001      	adds	r0, #1
 8004af4:	f43f af58 	beq.w	80049a8 <_printf_float+0x98>
 8004af8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	db02      	blt.n	8004b06 <_printf_float+0x1f6>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	07d8      	lsls	r0, r3, #31
 8004b04:	d50f      	bpl.n	8004b26 <_printf_float+0x216>
 8004b06:	4653      	mov	r3, sl
 8004b08:	465a      	mov	r2, fp
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	f43f af49 	beq.w	80049a8 <_printf_float+0x98>
 8004b16:	f04f 0800 	mov.w	r8, #0
 8004b1a:	f104 091a 	add.w	r9, r4, #26
 8004b1e:	9b08      	ldr	r3, [sp, #32]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4543      	cmp	r3, r8
 8004b24:	dc09      	bgt.n	8004b3a <_printf_float+0x22a>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	079b      	lsls	r3, r3, #30
 8004b2a:	f100 8106 	bmi.w	8004d3a <_printf_float+0x42a>
 8004b2e:	68e0      	ldr	r0, [r4, #12]
 8004b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b32:	4298      	cmp	r0, r3
 8004b34:	bfb8      	it	lt
 8004b36:	4618      	movlt	r0, r3
 8004b38:	e738      	b.n	80049ac <_printf_float+0x9c>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	464a      	mov	r2, r9
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4628      	mov	r0, r5
 8004b42:	47b8      	blx	r7
 8004b44:	3001      	adds	r0, #1
 8004b46:	f43f af2f 	beq.w	80049a8 <_printf_float+0x98>
 8004b4a:	f108 0801 	add.w	r8, r8, #1
 8004b4e:	e7e6      	b.n	8004b1e <_printf_float+0x20e>
 8004b50:	9b07      	ldr	r3, [sp, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	dc3a      	bgt.n	8004bcc <_printf_float+0x2bc>
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <_printf_float+0x2b8>)
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	f43f af21 	beq.w	80049a8 <_printf_float+0x98>
 8004b66:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	d102      	bne.n	8004b74 <_printf_float+0x264>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	07d9      	lsls	r1, r3, #31
 8004b72:	d5d8      	bpl.n	8004b26 <_printf_float+0x216>
 8004b74:	4653      	mov	r3, sl
 8004b76:	465a      	mov	r2, fp
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f af12 	beq.w	80049a8 <_printf_float+0x98>
 8004b84:	f04f 0900 	mov.w	r9, #0
 8004b88:	f104 0a1a 	add.w	sl, r4, #26
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	425b      	negs	r3, r3
 8004b90:	454b      	cmp	r3, r9
 8004b92:	dc01      	bgt.n	8004b98 <_printf_float+0x288>
 8004b94:	9b08      	ldr	r3, [sp, #32]
 8004b96:	e795      	b.n	8004ac4 <_printf_float+0x1b4>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	47b8      	blx	r7
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f43f af00 	beq.w	80049a8 <_printf_float+0x98>
 8004ba8:	f109 0901 	add.w	r9, r9, #1
 8004bac:	e7ee      	b.n	8004b8c <_printf_float+0x27c>
 8004bae:	bf00      	nop
 8004bb0:	ffffffff 	.word	0xffffffff
 8004bb4:	7fefffff 	.word	0x7fefffff
 8004bb8:	08007010 	.word	0x08007010
 8004bbc:	08007014 	.word	0x08007014
 8004bc0:	08007018 	.word	0x08007018
 8004bc4:	0800701c 	.word	0x0800701c
 8004bc8:	08007020 	.word	0x08007020
 8004bcc:	9a08      	ldr	r2, [sp, #32]
 8004bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	bfa8      	it	ge
 8004bd4:	461a      	movge	r2, r3
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	4691      	mov	r9, r2
 8004bda:	dc38      	bgt.n	8004c4e <_printf_float+0x33e>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9305      	str	r3, [sp, #20]
 8004be0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004be4:	f104 021a 	add.w	r2, r4, #26
 8004be8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bea:	9905      	ldr	r1, [sp, #20]
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	eba3 0309 	sub.w	r3, r3, r9
 8004bf2:	428b      	cmp	r3, r1
 8004bf4:	dc33      	bgt.n	8004c5e <_printf_float+0x34e>
 8004bf6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	db3c      	blt.n	8004c78 <_printf_float+0x368>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	07da      	lsls	r2, r3, #31
 8004c02:	d439      	bmi.n	8004c78 <_printf_float+0x368>
 8004c04:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004c08:	eba2 0903 	sub.w	r9, r2, r3
 8004c0c:	9b04      	ldr	r3, [sp, #16]
 8004c0e:	1ad2      	subs	r2, r2, r3
 8004c10:	4591      	cmp	r9, r2
 8004c12:	bfa8      	it	ge
 8004c14:	4691      	movge	r9, r2
 8004c16:	f1b9 0f00 	cmp.w	r9, #0
 8004c1a:	dc35      	bgt.n	8004c88 <_printf_float+0x378>
 8004c1c:	f04f 0800 	mov.w	r8, #0
 8004c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c24:	f104 0a1a 	add.w	sl, r4, #26
 8004c28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	eba3 0309 	sub.w	r3, r3, r9
 8004c32:	4543      	cmp	r3, r8
 8004c34:	f77f af77 	ble.w	8004b26 <_printf_float+0x216>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f aeb0 	beq.w	80049a8 <_printf_float+0x98>
 8004c48:	f108 0801 	add.w	r8, r8, #1
 8004c4c:	e7ec      	b.n	8004c28 <_printf_float+0x318>
 8004c4e:	4613      	mov	r3, r2
 8004c50:	4631      	mov	r1, r6
 8004c52:	4642      	mov	r2, r8
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d1bf      	bne.n	8004bdc <_printf_float+0x2cc>
 8004c5c:	e6a4      	b.n	80049a8 <_printf_float+0x98>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	9204      	str	r2, [sp, #16]
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae9d 	beq.w	80049a8 <_printf_float+0x98>
 8004c6e:	9b05      	ldr	r3, [sp, #20]
 8004c70:	9a04      	ldr	r2, [sp, #16]
 8004c72:	3301      	adds	r3, #1
 8004c74:	9305      	str	r3, [sp, #20]
 8004c76:	e7b7      	b.n	8004be8 <_printf_float+0x2d8>
 8004c78:	4653      	mov	r3, sl
 8004c7a:	465a      	mov	r2, fp
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	d1be      	bne.n	8004c04 <_printf_float+0x2f4>
 8004c86:	e68f      	b.n	80049a8 <_printf_float+0x98>
 8004c88:	9a04      	ldr	r2, [sp, #16]
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	4442      	add	r2, r8
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	d1c1      	bne.n	8004c1c <_printf_float+0x30c>
 8004c98:	e686      	b.n	80049a8 <_printf_float+0x98>
 8004c9a:	9a08      	ldr	r2, [sp, #32]
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	dc01      	bgt.n	8004ca4 <_printf_float+0x394>
 8004ca0:	07db      	lsls	r3, r3, #31
 8004ca2:	d537      	bpl.n	8004d14 <_printf_float+0x404>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4642      	mov	r2, r8
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4628      	mov	r0, r5
 8004cac:	47b8      	blx	r7
 8004cae:	3001      	adds	r0, #1
 8004cb0:	f43f ae7a 	beq.w	80049a8 <_printf_float+0x98>
 8004cb4:	4653      	mov	r3, sl
 8004cb6:	465a      	mov	r2, fp
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f ae72 	beq.w	80049a8 <_printf_float+0x98>
 8004cc4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004cc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	9b08      	ldr	r3, [sp, #32]
 8004cd2:	d01a      	beq.n	8004d0a <_printf_float+0x3fa>
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	f108 0201 	add.w	r2, r8, #1
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	47b8      	blx	r7
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d10e      	bne.n	8004d02 <_printf_float+0x3f2>
 8004ce4:	e660      	b.n	80049a8 <_printf_float+0x98>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	464a      	mov	r2, r9
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b8      	blx	r7
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	f43f ae59 	beq.w	80049a8 <_printf_float+0x98>
 8004cf6:	f108 0801 	add.w	r8, r8, #1
 8004cfa:	9b08      	ldr	r3, [sp, #32]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	4543      	cmp	r3, r8
 8004d00:	dcf1      	bgt.n	8004ce6 <_printf_float+0x3d6>
 8004d02:	9b04      	ldr	r3, [sp, #16]
 8004d04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d08:	e6dd      	b.n	8004ac6 <_printf_float+0x1b6>
 8004d0a:	f04f 0800 	mov.w	r8, #0
 8004d0e:	f104 091a 	add.w	r9, r4, #26
 8004d12:	e7f2      	b.n	8004cfa <_printf_float+0x3ea>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4642      	mov	r2, r8
 8004d18:	e7df      	b.n	8004cda <_printf_float+0x3ca>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	464a      	mov	r2, r9
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f ae3f 	beq.w	80049a8 <_printf_float+0x98>
 8004d2a:	f108 0801 	add.w	r8, r8, #1
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d32:	1a5b      	subs	r3, r3, r1
 8004d34:	4543      	cmp	r3, r8
 8004d36:	dcf0      	bgt.n	8004d1a <_printf_float+0x40a>
 8004d38:	e6f9      	b.n	8004b2e <_printf_float+0x21e>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	f104 0919 	add.w	r9, r4, #25
 8004d42:	e7f4      	b.n	8004d2e <_printf_float+0x41e>

08004d44 <_printf_common>:
 8004d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	4616      	mov	r6, r2
 8004d4a:	4699      	mov	r9, r3
 8004d4c:	688a      	ldr	r2, [r1, #8]
 8004d4e:	690b      	ldr	r3, [r1, #16]
 8004d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d54:	4293      	cmp	r3, r2
 8004d56:	bfb8      	it	lt
 8004d58:	4613      	movlt	r3, r2
 8004d5a:	6033      	str	r3, [r6, #0]
 8004d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d60:	4607      	mov	r7, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	b10a      	cbz	r2, 8004d6a <_printf_common+0x26>
 8004d66:	3301      	adds	r3, #1
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	0699      	lsls	r1, r3, #26
 8004d6e:	bf42      	ittt	mi
 8004d70:	6833      	ldrmi	r3, [r6, #0]
 8004d72:	3302      	addmi	r3, #2
 8004d74:	6033      	strmi	r3, [r6, #0]
 8004d76:	6825      	ldr	r5, [r4, #0]
 8004d78:	f015 0506 	ands.w	r5, r5, #6
 8004d7c:	d106      	bne.n	8004d8c <_printf_common+0x48>
 8004d7e:	f104 0a19 	add.w	sl, r4, #25
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	6832      	ldr	r2, [r6, #0]
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dc26      	bgt.n	8004dda <_printf_common+0x96>
 8004d8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d90:	1e13      	subs	r3, r2, #0
 8004d92:	6822      	ldr	r2, [r4, #0]
 8004d94:	bf18      	it	ne
 8004d96:	2301      	movne	r3, #1
 8004d98:	0692      	lsls	r2, r2, #26
 8004d9a:	d42b      	bmi.n	8004df4 <_printf_common+0xb0>
 8004d9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da0:	4649      	mov	r1, r9
 8004da2:	4638      	mov	r0, r7
 8004da4:	47c0      	blx	r8
 8004da6:	3001      	adds	r0, #1
 8004da8:	d01e      	beq.n	8004de8 <_printf_common+0xa4>
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	6922      	ldr	r2, [r4, #16]
 8004dae:	f003 0306 	and.w	r3, r3, #6
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	bf02      	ittt	eq
 8004db6:	68e5      	ldreq	r5, [r4, #12]
 8004db8:	6833      	ldreq	r3, [r6, #0]
 8004dba:	1aed      	subeq	r5, r5, r3
 8004dbc:	68a3      	ldr	r3, [r4, #8]
 8004dbe:	bf0c      	ite	eq
 8004dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc4:	2500      	movne	r5, #0
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	bfc4      	itt	gt
 8004dca:	1a9b      	subgt	r3, r3, r2
 8004dcc:	18ed      	addgt	r5, r5, r3
 8004dce:	2600      	movs	r6, #0
 8004dd0:	341a      	adds	r4, #26
 8004dd2:	42b5      	cmp	r5, r6
 8004dd4:	d11a      	bne.n	8004e0c <_printf_common+0xc8>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e008      	b.n	8004dec <_printf_common+0xa8>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4652      	mov	r2, sl
 8004dde:	4649      	mov	r1, r9
 8004de0:	4638      	mov	r0, r7
 8004de2:	47c0      	blx	r8
 8004de4:	3001      	adds	r0, #1
 8004de6:	d103      	bne.n	8004df0 <_printf_common+0xac>
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df0:	3501      	adds	r5, #1
 8004df2:	e7c6      	b.n	8004d82 <_printf_common+0x3e>
 8004df4:	18e1      	adds	r1, r4, r3
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	2030      	movs	r0, #48	; 0x30
 8004dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dfe:	4422      	add	r2, r4
 8004e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e08:	3302      	adds	r3, #2
 8004e0a:	e7c7      	b.n	8004d9c <_printf_common+0x58>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4649      	mov	r1, r9
 8004e12:	4638      	mov	r0, r7
 8004e14:	47c0      	blx	r8
 8004e16:	3001      	adds	r0, #1
 8004e18:	d0e6      	beq.n	8004de8 <_printf_common+0xa4>
 8004e1a:	3601      	adds	r6, #1
 8004e1c:	e7d9      	b.n	8004dd2 <_printf_common+0x8e>
	...

08004e20 <_printf_i>:
 8004e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	7e0f      	ldrb	r7, [r1, #24]
 8004e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e28:	2f78      	cmp	r7, #120	; 0x78
 8004e2a:	4691      	mov	r9, r2
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	469a      	mov	sl, r3
 8004e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e36:	d807      	bhi.n	8004e48 <_printf_i+0x28>
 8004e38:	2f62      	cmp	r7, #98	; 0x62
 8004e3a:	d80a      	bhi.n	8004e52 <_printf_i+0x32>
 8004e3c:	2f00      	cmp	r7, #0
 8004e3e:	f000 80d4 	beq.w	8004fea <_printf_i+0x1ca>
 8004e42:	2f58      	cmp	r7, #88	; 0x58
 8004e44:	f000 80c0 	beq.w	8004fc8 <_printf_i+0x1a8>
 8004e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e50:	e03a      	b.n	8004ec8 <_printf_i+0xa8>
 8004e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e56:	2b15      	cmp	r3, #21
 8004e58:	d8f6      	bhi.n	8004e48 <_printf_i+0x28>
 8004e5a:	a101      	add	r1, pc, #4	; (adr r1, 8004e60 <_printf_i+0x40>)
 8004e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e60:	08004eb9 	.word	0x08004eb9
 8004e64:	08004ecd 	.word	0x08004ecd
 8004e68:	08004e49 	.word	0x08004e49
 8004e6c:	08004e49 	.word	0x08004e49
 8004e70:	08004e49 	.word	0x08004e49
 8004e74:	08004e49 	.word	0x08004e49
 8004e78:	08004ecd 	.word	0x08004ecd
 8004e7c:	08004e49 	.word	0x08004e49
 8004e80:	08004e49 	.word	0x08004e49
 8004e84:	08004e49 	.word	0x08004e49
 8004e88:	08004e49 	.word	0x08004e49
 8004e8c:	08004fd1 	.word	0x08004fd1
 8004e90:	08004ef9 	.word	0x08004ef9
 8004e94:	08004f8b 	.word	0x08004f8b
 8004e98:	08004e49 	.word	0x08004e49
 8004e9c:	08004e49 	.word	0x08004e49
 8004ea0:	08004ff3 	.word	0x08004ff3
 8004ea4:	08004e49 	.word	0x08004e49
 8004ea8:	08004ef9 	.word	0x08004ef9
 8004eac:	08004e49 	.word	0x08004e49
 8004eb0:	08004e49 	.word	0x08004e49
 8004eb4:	08004f93 	.word	0x08004f93
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	1d1a      	adds	r2, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	602a      	str	r2, [r5, #0]
 8004ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e09f      	b.n	800500c <_printf_i+0x1ec>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	0607      	lsls	r7, r0, #24
 8004ed2:	f103 0104 	add.w	r1, r3, #4
 8004ed6:	6029      	str	r1, [r5, #0]
 8004ed8:	d501      	bpl.n	8004ede <_printf_i+0xbe>
 8004eda:	681e      	ldr	r6, [r3, #0]
 8004edc:	e003      	b.n	8004ee6 <_printf_i+0xc6>
 8004ede:	0646      	lsls	r6, r0, #25
 8004ee0:	d5fb      	bpl.n	8004eda <_printf_i+0xba>
 8004ee2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	da03      	bge.n	8004ef2 <_printf_i+0xd2>
 8004eea:	232d      	movs	r3, #45	; 0x2d
 8004eec:	4276      	negs	r6, r6
 8004eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef2:	485a      	ldr	r0, [pc, #360]	; (800505c <_printf_i+0x23c>)
 8004ef4:	230a      	movs	r3, #10
 8004ef6:	e012      	b.n	8004f1e <_printf_i+0xfe>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	6029      	str	r1, [r5, #0]
 8004f00:	0605      	lsls	r5, r0, #24
 8004f02:	d501      	bpl.n	8004f08 <_printf_i+0xe8>
 8004f04:	681e      	ldr	r6, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <_printf_i+0xee>
 8004f08:	0641      	lsls	r1, r0, #25
 8004f0a:	d5fb      	bpl.n	8004f04 <_printf_i+0xe4>
 8004f0c:	881e      	ldrh	r6, [r3, #0]
 8004f0e:	4853      	ldr	r0, [pc, #332]	; (800505c <_printf_i+0x23c>)
 8004f10:	2f6f      	cmp	r7, #111	; 0x6f
 8004f12:	bf0c      	ite	eq
 8004f14:	2308      	moveq	r3, #8
 8004f16:	230a      	movne	r3, #10
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1e:	6865      	ldr	r5, [r4, #4]
 8004f20:	60a5      	str	r5, [r4, #8]
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	bfa2      	ittt	ge
 8004f26:	6821      	ldrge	r1, [r4, #0]
 8004f28:	f021 0104 	bicge.w	r1, r1, #4
 8004f2c:	6021      	strge	r1, [r4, #0]
 8004f2e:	b90e      	cbnz	r6, 8004f34 <_printf_i+0x114>
 8004f30:	2d00      	cmp	r5, #0
 8004f32:	d04b      	beq.n	8004fcc <_printf_i+0x1ac>
 8004f34:	4615      	mov	r5, r2
 8004f36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004f3e:	5dc7      	ldrb	r7, [r0, r7]
 8004f40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f44:	4637      	mov	r7, r6
 8004f46:	42bb      	cmp	r3, r7
 8004f48:	460e      	mov	r6, r1
 8004f4a:	d9f4      	bls.n	8004f36 <_printf_i+0x116>
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d10b      	bne.n	8004f68 <_printf_i+0x148>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07de      	lsls	r6, r3, #31
 8004f54:	d508      	bpl.n	8004f68 <_printf_i+0x148>
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	6861      	ldr	r1, [r4, #4]
 8004f5a:	4299      	cmp	r1, r3
 8004f5c:	bfde      	ittt	le
 8004f5e:	2330      	movle	r3, #48	; 0x30
 8004f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f68:	1b52      	subs	r2, r2, r5
 8004f6a:	6122      	str	r2, [r4, #16]
 8004f6c:	f8cd a000 	str.w	sl, [sp]
 8004f70:	464b      	mov	r3, r9
 8004f72:	aa03      	add	r2, sp, #12
 8004f74:	4621      	mov	r1, r4
 8004f76:	4640      	mov	r0, r8
 8004f78:	f7ff fee4 	bl	8004d44 <_printf_common>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d14a      	bne.n	8005016 <_printf_i+0x1f6>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f84:	b004      	add	sp, #16
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	f043 0320 	orr.w	r3, r3, #32
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	4833      	ldr	r0, [pc, #204]	; (8005060 <_printf_i+0x240>)
 8004f94:	2778      	movs	r7, #120	; 0x78
 8004f96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	6829      	ldr	r1, [r5, #0]
 8004f9e:	061f      	lsls	r7, r3, #24
 8004fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fa4:	d402      	bmi.n	8004fac <_printf_i+0x18c>
 8004fa6:	065f      	lsls	r7, r3, #25
 8004fa8:	bf48      	it	mi
 8004faa:	b2b6      	uxthmi	r6, r6
 8004fac:	07df      	lsls	r7, r3, #31
 8004fae:	bf48      	it	mi
 8004fb0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb4:	6029      	str	r1, [r5, #0]
 8004fb6:	bf48      	it	mi
 8004fb8:	6023      	strmi	r3, [r4, #0]
 8004fba:	b91e      	cbnz	r6, 8004fc4 <_printf_i+0x1a4>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	e7a7      	b.n	8004f18 <_printf_i+0xf8>
 8004fc8:	4824      	ldr	r0, [pc, #144]	; (800505c <_printf_i+0x23c>)
 8004fca:	e7e4      	b.n	8004f96 <_printf_i+0x176>
 8004fcc:	4615      	mov	r5, r2
 8004fce:	e7bd      	b.n	8004f4c <_printf_i+0x12c>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	6826      	ldr	r6, [r4, #0]
 8004fd4:	6961      	ldr	r1, [r4, #20]
 8004fd6:	1d18      	adds	r0, r3, #4
 8004fd8:	6028      	str	r0, [r5, #0]
 8004fda:	0635      	lsls	r5, r6, #24
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	d501      	bpl.n	8004fe4 <_printf_i+0x1c4>
 8004fe0:	6019      	str	r1, [r3, #0]
 8004fe2:	e002      	b.n	8004fea <_printf_i+0x1ca>
 8004fe4:	0670      	lsls	r0, r6, #25
 8004fe6:	d5fb      	bpl.n	8004fe0 <_printf_i+0x1c0>
 8004fe8:	8019      	strh	r1, [r3, #0]
 8004fea:	2300      	movs	r3, #0
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	4615      	mov	r5, r2
 8004ff0:	e7bc      	b.n	8004f6c <_printf_i+0x14c>
 8004ff2:	682b      	ldr	r3, [r5, #0]
 8004ff4:	1d1a      	adds	r2, r3, #4
 8004ff6:	602a      	str	r2, [r5, #0]
 8004ff8:	681d      	ldr	r5, [r3, #0]
 8004ffa:	6862      	ldr	r2, [r4, #4]
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4628      	mov	r0, r5
 8005000:	f7fb f91e 	bl	8000240 <memchr>
 8005004:	b108      	cbz	r0, 800500a <_printf_i+0x1ea>
 8005006:	1b40      	subs	r0, r0, r5
 8005008:	6060      	str	r0, [r4, #4]
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	2300      	movs	r3, #0
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005014:	e7aa      	b.n	8004f6c <_printf_i+0x14c>
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	462a      	mov	r2, r5
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	47d0      	blx	sl
 8005020:	3001      	adds	r0, #1
 8005022:	d0ad      	beq.n	8004f80 <_printf_i+0x160>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	079b      	lsls	r3, r3, #30
 8005028:	d413      	bmi.n	8005052 <_printf_i+0x232>
 800502a:	68e0      	ldr	r0, [r4, #12]
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	4298      	cmp	r0, r3
 8005030:	bfb8      	it	lt
 8005032:	4618      	movlt	r0, r3
 8005034:	e7a6      	b.n	8004f84 <_printf_i+0x164>
 8005036:	2301      	movs	r3, #1
 8005038:	4632      	mov	r2, r6
 800503a:	4649      	mov	r1, r9
 800503c:	4640      	mov	r0, r8
 800503e:	47d0      	blx	sl
 8005040:	3001      	adds	r0, #1
 8005042:	d09d      	beq.n	8004f80 <_printf_i+0x160>
 8005044:	3501      	adds	r5, #1
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	9903      	ldr	r1, [sp, #12]
 800504a:	1a5b      	subs	r3, r3, r1
 800504c:	42ab      	cmp	r3, r5
 800504e:	dcf2      	bgt.n	8005036 <_printf_i+0x216>
 8005050:	e7eb      	b.n	800502a <_printf_i+0x20a>
 8005052:	2500      	movs	r5, #0
 8005054:	f104 0619 	add.w	r6, r4, #25
 8005058:	e7f5      	b.n	8005046 <_printf_i+0x226>
 800505a:	bf00      	nop
 800505c:	08007022 	.word	0x08007022
 8005060:	08007033 	.word	0x08007033

08005064 <std>:
 8005064:	2300      	movs	r3, #0
 8005066:	b510      	push	{r4, lr}
 8005068:	4604      	mov	r4, r0
 800506a:	e9c0 3300 	strd	r3, r3, [r0]
 800506e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005072:	6083      	str	r3, [r0, #8]
 8005074:	8181      	strh	r1, [r0, #12]
 8005076:	6643      	str	r3, [r0, #100]	; 0x64
 8005078:	81c2      	strh	r2, [r0, #14]
 800507a:	6183      	str	r3, [r0, #24]
 800507c:	4619      	mov	r1, r3
 800507e:	2208      	movs	r2, #8
 8005080:	305c      	adds	r0, #92	; 0x5c
 8005082:	f000 f89f 	bl	80051c4 <memset>
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <std+0x38>)
 8005088:	6263      	str	r3, [r4, #36]	; 0x24
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <std+0x3c>)
 800508c:	62a3      	str	r3, [r4, #40]	; 0x28
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <std+0x40>)
 8005090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <std+0x44>)
 8005094:	6224      	str	r4, [r4, #32]
 8005096:	6323      	str	r3, [r4, #48]	; 0x30
 8005098:	bd10      	pop	{r4, pc}
 800509a:	bf00      	nop
 800509c:	080067dd 	.word	0x080067dd
 80050a0:	080067ff 	.word	0x080067ff
 80050a4:	08006837 	.word	0x08006837
 80050a8:	0800685b 	.word	0x0800685b

080050ac <stdio_exit_handler>:
 80050ac:	4a02      	ldr	r2, [pc, #8]	; (80050b8 <stdio_exit_handler+0xc>)
 80050ae:	4903      	ldr	r1, [pc, #12]	; (80050bc <stdio_exit_handler+0x10>)
 80050b0:	4803      	ldr	r0, [pc, #12]	; (80050c0 <stdio_exit_handler+0x14>)
 80050b2:	f000 b869 	b.w	8005188 <_fwalk_sglue>
 80050b6:	bf00      	nop
 80050b8:	20000010 	.word	0x20000010
 80050bc:	0800607d 	.word	0x0800607d
 80050c0:	2000001c 	.word	0x2000001c

080050c4 <cleanup_stdio>:
 80050c4:	6841      	ldr	r1, [r0, #4]
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <cleanup_stdio+0x34>)
 80050c8:	4299      	cmp	r1, r3
 80050ca:	b510      	push	{r4, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	d001      	beq.n	80050d4 <cleanup_stdio+0x10>
 80050d0:	f000 ffd4 	bl	800607c <_fflush_r>
 80050d4:	68a1      	ldr	r1, [r4, #8]
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <cleanup_stdio+0x38>)
 80050d8:	4299      	cmp	r1, r3
 80050da:	d002      	beq.n	80050e2 <cleanup_stdio+0x1e>
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 ffcd 	bl	800607c <_fflush_r>
 80050e2:	68e1      	ldr	r1, [r4, #12]
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <cleanup_stdio+0x3c>)
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d004      	beq.n	80050f4 <cleanup_stdio+0x30>
 80050ea:	4620      	mov	r0, r4
 80050ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f0:	f000 bfc4 	b.w	800607c <_fflush_r>
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	20000340 	.word	0x20000340
 80050fc:	200003a8 	.word	0x200003a8
 8005100:	20000410 	.word	0x20000410

08005104 <global_stdio_init.part.0>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <global_stdio_init.part.0+0x30>)
 8005108:	4c0b      	ldr	r4, [pc, #44]	; (8005138 <global_stdio_init.part.0+0x34>)
 800510a:	4a0c      	ldr	r2, [pc, #48]	; (800513c <global_stdio_init.part.0+0x38>)
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	4620      	mov	r0, r4
 8005110:	2200      	movs	r2, #0
 8005112:	2104      	movs	r1, #4
 8005114:	f7ff ffa6 	bl	8005064 <std>
 8005118:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800511c:	2201      	movs	r2, #1
 800511e:	2109      	movs	r1, #9
 8005120:	f7ff ffa0 	bl	8005064 <std>
 8005124:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005128:	2202      	movs	r2, #2
 800512a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512e:	2112      	movs	r1, #18
 8005130:	f7ff bf98 	b.w	8005064 <std>
 8005134:	20000478 	.word	0x20000478
 8005138:	20000340 	.word	0x20000340
 800513c:	080050ad 	.word	0x080050ad

08005140 <__sfp_lock_acquire>:
 8005140:	4801      	ldr	r0, [pc, #4]	; (8005148 <__sfp_lock_acquire+0x8>)
 8005142:	f000 b875 	b.w	8005230 <__retarget_lock_acquire_recursive>
 8005146:	bf00      	nop
 8005148:	2000047d 	.word	0x2000047d

0800514c <__sfp_lock_release>:
 800514c:	4801      	ldr	r0, [pc, #4]	; (8005154 <__sfp_lock_release+0x8>)
 800514e:	f000 b870 	b.w	8005232 <__retarget_lock_release_recursive>
 8005152:	bf00      	nop
 8005154:	2000047d 	.word	0x2000047d

08005158 <__sinit>:
 8005158:	b510      	push	{r4, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	f7ff fff0 	bl	8005140 <__sfp_lock_acquire>
 8005160:	6a23      	ldr	r3, [r4, #32]
 8005162:	b11b      	cbz	r3, 800516c <__sinit+0x14>
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f7ff bff0 	b.w	800514c <__sfp_lock_release>
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <__sinit+0x28>)
 800516e:	6223      	str	r3, [r4, #32]
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <__sinit+0x2c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f5      	bne.n	8005164 <__sinit+0xc>
 8005178:	f7ff ffc4 	bl	8005104 <global_stdio_init.part.0>
 800517c:	e7f2      	b.n	8005164 <__sinit+0xc>
 800517e:	bf00      	nop
 8005180:	080050c5 	.word	0x080050c5
 8005184:	20000478 	.word	0x20000478

08005188 <_fwalk_sglue>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4607      	mov	r7, r0
 800518e:	4688      	mov	r8, r1
 8005190:	4614      	mov	r4, r2
 8005192:	2600      	movs	r6, #0
 8005194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005198:	f1b9 0901 	subs.w	r9, r9, #1
 800519c:	d505      	bpl.n	80051aa <_fwalk_sglue+0x22>
 800519e:	6824      	ldr	r4, [r4, #0]
 80051a0:	2c00      	cmp	r4, #0
 80051a2:	d1f7      	bne.n	8005194 <_fwalk_sglue+0xc>
 80051a4:	4630      	mov	r0, r6
 80051a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d907      	bls.n	80051c0 <_fwalk_sglue+0x38>
 80051b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b4:	3301      	adds	r3, #1
 80051b6:	d003      	beq.n	80051c0 <_fwalk_sglue+0x38>
 80051b8:	4629      	mov	r1, r5
 80051ba:	4638      	mov	r0, r7
 80051bc:	47c0      	blx	r8
 80051be:	4306      	orrs	r6, r0
 80051c0:	3568      	adds	r5, #104	; 0x68
 80051c2:	e7e9      	b.n	8005198 <_fwalk_sglue+0x10>

080051c4 <memset>:
 80051c4:	4402      	add	r2, r0
 80051c6:	4603      	mov	r3, r0
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d100      	bne.n	80051ce <memset+0xa>
 80051cc:	4770      	bx	lr
 80051ce:	f803 1b01 	strb.w	r1, [r3], #1
 80051d2:	e7f9      	b.n	80051c8 <memset+0x4>

080051d4 <_localeconv_r>:
 80051d4:	4800      	ldr	r0, [pc, #0]	; (80051d8 <_localeconv_r+0x4>)
 80051d6:	4770      	bx	lr
 80051d8:	2000015c 	.word	0x2000015c

080051dc <__errno>:
 80051dc:	4b01      	ldr	r3, [pc, #4]	; (80051e4 <__errno+0x8>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000068 	.word	0x20000068

080051e8 <__libc_init_array>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	4d0d      	ldr	r5, [pc, #52]	; (8005220 <__libc_init_array+0x38>)
 80051ec:	4c0d      	ldr	r4, [pc, #52]	; (8005224 <__libc_init_array+0x3c>)
 80051ee:	1b64      	subs	r4, r4, r5
 80051f0:	10a4      	asrs	r4, r4, #2
 80051f2:	2600      	movs	r6, #0
 80051f4:	42a6      	cmp	r6, r4
 80051f6:	d109      	bne.n	800520c <__libc_init_array+0x24>
 80051f8:	4d0b      	ldr	r5, [pc, #44]	; (8005228 <__libc_init_array+0x40>)
 80051fa:	4c0c      	ldr	r4, [pc, #48]	; (800522c <__libc_init_array+0x44>)
 80051fc:	f001 fef0 	bl	8006fe0 <_init>
 8005200:	1b64      	subs	r4, r4, r5
 8005202:	10a4      	asrs	r4, r4, #2
 8005204:	2600      	movs	r6, #0
 8005206:	42a6      	cmp	r6, r4
 8005208:	d105      	bne.n	8005216 <__libc_init_array+0x2e>
 800520a:	bd70      	pop	{r4, r5, r6, pc}
 800520c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005210:	4798      	blx	r3
 8005212:	3601      	adds	r6, #1
 8005214:	e7ee      	b.n	80051f4 <__libc_init_array+0xc>
 8005216:	f855 3b04 	ldr.w	r3, [r5], #4
 800521a:	4798      	blx	r3
 800521c:	3601      	adds	r6, #1
 800521e:	e7f2      	b.n	8005206 <__libc_init_array+0x1e>
 8005220:	0800738c 	.word	0x0800738c
 8005224:	0800738c 	.word	0x0800738c
 8005228:	0800738c 	.word	0x0800738c
 800522c:	08007390 	.word	0x08007390

08005230 <__retarget_lock_acquire_recursive>:
 8005230:	4770      	bx	lr

08005232 <__retarget_lock_release_recursive>:
 8005232:	4770      	bx	lr

08005234 <quorem>:
 8005234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	6903      	ldr	r3, [r0, #16]
 800523a:	690c      	ldr	r4, [r1, #16]
 800523c:	42a3      	cmp	r3, r4
 800523e:	4607      	mov	r7, r0
 8005240:	db7e      	blt.n	8005340 <quorem+0x10c>
 8005242:	3c01      	subs	r4, #1
 8005244:	f101 0814 	add.w	r8, r1, #20
 8005248:	f100 0514 	add.w	r5, r0, #20
 800524c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005250:	9301      	str	r3, [sp, #4]
 8005252:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800525a:	3301      	adds	r3, #1
 800525c:	429a      	cmp	r2, r3
 800525e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005262:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005266:	fbb2 f6f3 	udiv	r6, r2, r3
 800526a:	d331      	bcc.n	80052d0 <quorem+0x9c>
 800526c:	f04f 0e00 	mov.w	lr, #0
 8005270:	4640      	mov	r0, r8
 8005272:	46ac      	mov	ip, r5
 8005274:	46f2      	mov	sl, lr
 8005276:	f850 2b04 	ldr.w	r2, [r0], #4
 800527a:	b293      	uxth	r3, r2
 800527c:	fb06 e303 	mla	r3, r6, r3, lr
 8005280:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005284:	0c1a      	lsrs	r2, r3, #16
 8005286:	b29b      	uxth	r3, r3
 8005288:	ebaa 0303 	sub.w	r3, sl, r3
 800528c:	f8dc a000 	ldr.w	sl, [ip]
 8005290:	fa13 f38a 	uxtah	r3, r3, sl
 8005294:	fb06 220e 	mla	r2, r6, lr, r2
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	9b00      	ldr	r3, [sp, #0]
 800529c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052a0:	b292      	uxth	r2, r2
 80052a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80052ae:	4581      	cmp	r9, r0
 80052b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052b4:	f84c 3b04 	str.w	r3, [ip], #4
 80052b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052bc:	d2db      	bcs.n	8005276 <quorem+0x42>
 80052be:	f855 300b 	ldr.w	r3, [r5, fp]
 80052c2:	b92b      	cbnz	r3, 80052d0 <quorem+0x9c>
 80052c4:	9b01      	ldr	r3, [sp, #4]
 80052c6:	3b04      	subs	r3, #4
 80052c8:	429d      	cmp	r5, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	d32c      	bcc.n	8005328 <quorem+0xf4>
 80052ce:	613c      	str	r4, [r7, #16]
 80052d0:	4638      	mov	r0, r7
 80052d2:	f001 f983 	bl	80065dc <__mcmp>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	db22      	blt.n	8005320 <quorem+0xec>
 80052da:	3601      	adds	r6, #1
 80052dc:	4629      	mov	r1, r5
 80052de:	2000      	movs	r0, #0
 80052e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80052e4:	f8d1 c000 	ldr.w	ip, [r1]
 80052e8:	b293      	uxth	r3, r2
 80052ea:	1ac3      	subs	r3, r0, r3
 80052ec:	0c12      	lsrs	r2, r2, #16
 80052ee:	fa13 f38c 	uxtah	r3, r3, ip
 80052f2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80052f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005300:	45c1      	cmp	r9, r8
 8005302:	f841 3b04 	str.w	r3, [r1], #4
 8005306:	ea4f 4022 	mov.w	r0, r2, asr #16
 800530a:	d2e9      	bcs.n	80052e0 <quorem+0xac>
 800530c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005314:	b922      	cbnz	r2, 8005320 <quorem+0xec>
 8005316:	3b04      	subs	r3, #4
 8005318:	429d      	cmp	r5, r3
 800531a:	461a      	mov	r2, r3
 800531c:	d30a      	bcc.n	8005334 <quorem+0x100>
 800531e:	613c      	str	r4, [r7, #16]
 8005320:	4630      	mov	r0, r6
 8005322:	b003      	add	sp, #12
 8005324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	3b04      	subs	r3, #4
 800532c:	2a00      	cmp	r2, #0
 800532e:	d1ce      	bne.n	80052ce <quorem+0x9a>
 8005330:	3c01      	subs	r4, #1
 8005332:	e7c9      	b.n	80052c8 <quorem+0x94>
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	3b04      	subs	r3, #4
 8005338:	2a00      	cmp	r2, #0
 800533a:	d1f0      	bne.n	800531e <quorem+0xea>
 800533c:	3c01      	subs	r4, #1
 800533e:	e7eb      	b.n	8005318 <quorem+0xe4>
 8005340:	2000      	movs	r0, #0
 8005342:	e7ee      	b.n	8005322 <quorem+0xee>
 8005344:	0000      	movs	r0, r0
	...

08005348 <_dtoa_r>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	ed2d 8b02 	vpush	{d8}
 8005350:	69c5      	ldr	r5, [r0, #28]
 8005352:	b091      	sub	sp, #68	; 0x44
 8005354:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005358:	ec59 8b10 	vmov	r8, r9, d0
 800535c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800535e:	9106      	str	r1, [sp, #24]
 8005360:	4606      	mov	r6, r0
 8005362:	9208      	str	r2, [sp, #32]
 8005364:	930c      	str	r3, [sp, #48]	; 0x30
 8005366:	b975      	cbnz	r5, 8005386 <_dtoa_r+0x3e>
 8005368:	2010      	movs	r0, #16
 800536a:	f000 fd59 	bl	8005e20 <malloc>
 800536e:	4602      	mov	r2, r0
 8005370:	61f0      	str	r0, [r6, #28]
 8005372:	b920      	cbnz	r0, 800537e <_dtoa_r+0x36>
 8005374:	4ba6      	ldr	r3, [pc, #664]	; (8005610 <_dtoa_r+0x2c8>)
 8005376:	21ef      	movs	r1, #239	; 0xef
 8005378:	48a6      	ldr	r0, [pc, #664]	; (8005614 <_dtoa_r+0x2cc>)
 800537a:	f001 fad7 	bl	800692c <__assert_func>
 800537e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005382:	6005      	str	r5, [r0, #0]
 8005384:	60c5      	str	r5, [r0, #12]
 8005386:	69f3      	ldr	r3, [r6, #28]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	b151      	cbz	r1, 80053a2 <_dtoa_r+0x5a>
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	604a      	str	r2, [r1, #4]
 8005390:	2301      	movs	r3, #1
 8005392:	4093      	lsls	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
 8005396:	4630      	mov	r0, r6
 8005398:	f000 fee4 	bl	8006164 <_Bfree>
 800539c:	69f3      	ldr	r3, [r6, #28]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f1b9 0300 	subs.w	r3, r9, #0
 80053a6:	bfbb      	ittet	lt
 80053a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	9303      	strlt	r3, [sp, #12]
 80053ae:	2300      	movge	r3, #0
 80053b0:	2201      	movlt	r2, #1
 80053b2:	bfac      	ite	ge
 80053b4:	6023      	strge	r3, [r4, #0]
 80053b6:	6022      	strlt	r2, [r4, #0]
 80053b8:	4b97      	ldr	r3, [pc, #604]	; (8005618 <_dtoa_r+0x2d0>)
 80053ba:	9c03      	ldr	r4, [sp, #12]
 80053bc:	43a3      	bics	r3, r4
 80053be:	d11c      	bne.n	80053fa <_dtoa_r+0xb2>
 80053c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80053cc:	ea53 0308 	orrs.w	r3, r3, r8
 80053d0:	f000 84fb 	beq.w	8005dca <_dtoa_r+0xa82>
 80053d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80053d6:	b963      	cbnz	r3, 80053f2 <_dtoa_r+0xaa>
 80053d8:	4b90      	ldr	r3, [pc, #576]	; (800561c <_dtoa_r+0x2d4>)
 80053da:	e020      	b.n	800541e <_dtoa_r+0xd6>
 80053dc:	4b90      	ldr	r3, [pc, #576]	; (8005620 <_dtoa_r+0x2d8>)
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	3308      	adds	r3, #8
 80053e2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	9801      	ldr	r0, [sp, #4]
 80053e8:	b011      	add	sp, #68	; 0x44
 80053ea:	ecbd 8b02 	vpop	{d8}
 80053ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f2:	4b8a      	ldr	r3, [pc, #552]	; (800561c <_dtoa_r+0x2d4>)
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	3303      	adds	r3, #3
 80053f8:	e7f3      	b.n	80053e2 <_dtoa_r+0x9a>
 80053fa:	ed9d 8b02 	vldr	d8, [sp, #8]
 80053fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005406:	d10c      	bne.n	8005422 <_dtoa_r+0xda>
 8005408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800540a:	2301      	movs	r3, #1
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 84d7 	beq.w	8005dc4 <_dtoa_r+0xa7c>
 8005416:	4b83      	ldr	r3, [pc, #524]	; (8005624 <_dtoa_r+0x2dc>)
 8005418:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	3b01      	subs	r3, #1
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	e7e1      	b.n	80053e6 <_dtoa_r+0x9e>
 8005422:	aa0e      	add	r2, sp, #56	; 0x38
 8005424:	a90f      	add	r1, sp, #60	; 0x3c
 8005426:	4630      	mov	r0, r6
 8005428:	eeb0 0b48 	vmov.f64	d0, d8
 800542c:	f001 f97c 	bl	8006728 <__d2b>
 8005430:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8005434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005436:	4605      	mov	r5, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d046      	beq.n	80054ca <_dtoa_r+0x182>
 800543c:	eeb0 7b48 	vmov.f64	d7, d8
 8005440:	ee18 1a90 	vmov	r1, s17
 8005444:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005448:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800544c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005450:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005454:	2000      	movs	r0, #0
 8005456:	ee07 1a90 	vmov	s15, r1
 800545a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800545e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80055f8 <_dtoa_r+0x2b0>
 8005462:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005466:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005600 <_dtoa_r+0x2b8>
 800546a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800546e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005608 <_dtoa_r+0x2c0>
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800547a:	eeb0 7b46 	vmov.f64	d7, d6
 800547e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005482:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005486:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	ee16 ba90 	vmov	fp, s13
 8005492:	9009      	str	r0, [sp, #36]	; 0x24
 8005494:	d508      	bpl.n	80054a8 <_dtoa_r+0x160>
 8005496:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800549a:	eeb4 6b47 	vcmp.f64	d6, d7
 800549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a2:	bf18      	it	ne
 80054a4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80054a8:	f1bb 0f16 	cmp.w	fp, #22
 80054ac:	d82b      	bhi.n	8005506 <_dtoa_r+0x1be>
 80054ae:	495e      	ldr	r1, [pc, #376]	; (8005628 <_dtoa_r+0x2e0>)
 80054b0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80054b4:	ed91 7b00 	vldr	d7, [r1]
 80054b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	d501      	bpl.n	80054c6 <_dtoa_r+0x17e>
 80054c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80054c6:	2100      	movs	r1, #0
 80054c8:	e01e      	b.n	8005508 <_dtoa_r+0x1c0>
 80054ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054cc:	4413      	add	r3, r2
 80054ce:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80054d2:	2920      	cmp	r1, #32
 80054d4:	bfc1      	itttt	gt
 80054d6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80054da:	408c      	lslgt	r4, r1
 80054dc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80054e0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80054e4:	bfd6      	itet	le
 80054e6:	f1c1 0120 	rsble	r1, r1, #32
 80054ea:	4321      	orrgt	r1, r4
 80054ec:	fa08 f101 	lslle.w	r1, r8, r1
 80054f0:	ee07 1a90 	vmov	s15, r1
 80054f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80054f8:	3b01      	subs	r3, #1
 80054fa:	ee17 1a90 	vmov	r1, s15
 80054fe:	2001      	movs	r0, #1
 8005500:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005504:	e7a7      	b.n	8005456 <_dtoa_r+0x10e>
 8005506:	2101      	movs	r1, #1
 8005508:	1ad2      	subs	r2, r2, r3
 800550a:	1e53      	subs	r3, r2, #1
 800550c:	9305      	str	r3, [sp, #20]
 800550e:	bf45      	ittet	mi
 8005510:	f1c2 0301 	rsbmi	r3, r2, #1
 8005514:	9304      	strmi	r3, [sp, #16]
 8005516:	2300      	movpl	r3, #0
 8005518:	2300      	movmi	r3, #0
 800551a:	bf4c      	ite	mi
 800551c:	9305      	strmi	r3, [sp, #20]
 800551e:	9304      	strpl	r3, [sp, #16]
 8005520:	f1bb 0f00 	cmp.w	fp, #0
 8005524:	910b      	str	r1, [sp, #44]	; 0x2c
 8005526:	db18      	blt.n	800555a <_dtoa_r+0x212>
 8005528:	9b05      	ldr	r3, [sp, #20]
 800552a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800552e:	445b      	add	r3, fp
 8005530:	9305      	str	r3, [sp, #20]
 8005532:	2300      	movs	r3, #0
 8005534:	9a06      	ldr	r2, [sp, #24]
 8005536:	2a09      	cmp	r2, #9
 8005538:	d848      	bhi.n	80055cc <_dtoa_r+0x284>
 800553a:	2a05      	cmp	r2, #5
 800553c:	bfc4      	itt	gt
 800553e:	3a04      	subgt	r2, #4
 8005540:	9206      	strgt	r2, [sp, #24]
 8005542:	9a06      	ldr	r2, [sp, #24]
 8005544:	f1a2 0202 	sub.w	r2, r2, #2
 8005548:	bfcc      	ite	gt
 800554a:	2400      	movgt	r4, #0
 800554c:	2401      	movle	r4, #1
 800554e:	2a03      	cmp	r2, #3
 8005550:	d847      	bhi.n	80055e2 <_dtoa_r+0x29a>
 8005552:	e8df f002 	tbb	[pc, r2]
 8005556:	2d0b      	.short	0x2d0b
 8005558:	392b      	.short	0x392b
 800555a:	9b04      	ldr	r3, [sp, #16]
 800555c:	2200      	movs	r2, #0
 800555e:	eba3 030b 	sub.w	r3, r3, fp
 8005562:	9304      	str	r3, [sp, #16]
 8005564:	920a      	str	r2, [sp, #40]	; 0x28
 8005566:	f1cb 0300 	rsb	r3, fp, #0
 800556a:	e7e3      	b.n	8005534 <_dtoa_r+0x1ec>
 800556c:	2200      	movs	r2, #0
 800556e:	9207      	str	r2, [sp, #28]
 8005570:	9a08      	ldr	r2, [sp, #32]
 8005572:	2a00      	cmp	r2, #0
 8005574:	dc38      	bgt.n	80055e8 <_dtoa_r+0x2a0>
 8005576:	f04f 0a01 	mov.w	sl, #1
 800557a:	46d1      	mov	r9, sl
 800557c:	4652      	mov	r2, sl
 800557e:	f8cd a020 	str.w	sl, [sp, #32]
 8005582:	69f7      	ldr	r7, [r6, #28]
 8005584:	2100      	movs	r1, #0
 8005586:	2004      	movs	r0, #4
 8005588:	f100 0c14 	add.w	ip, r0, #20
 800558c:	4594      	cmp	ip, r2
 800558e:	d930      	bls.n	80055f2 <_dtoa_r+0x2aa>
 8005590:	6079      	str	r1, [r7, #4]
 8005592:	4630      	mov	r0, r6
 8005594:	930d      	str	r3, [sp, #52]	; 0x34
 8005596:	f000 fda5 	bl	80060e4 <_Balloc>
 800559a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800559c:	9001      	str	r0, [sp, #4]
 800559e:	4602      	mov	r2, r0
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d145      	bne.n	8005630 <_dtoa_r+0x2e8>
 80055a4:	4b21      	ldr	r3, [pc, #132]	; (800562c <_dtoa_r+0x2e4>)
 80055a6:	f240 11af 	movw	r1, #431	; 0x1af
 80055aa:	e6e5      	b.n	8005378 <_dtoa_r+0x30>
 80055ac:	2201      	movs	r2, #1
 80055ae:	e7de      	b.n	800556e <_dtoa_r+0x226>
 80055b0:	2200      	movs	r2, #0
 80055b2:	9207      	str	r2, [sp, #28]
 80055b4:	9a08      	ldr	r2, [sp, #32]
 80055b6:	eb0b 0a02 	add.w	sl, fp, r2
 80055ba:	f10a 0901 	add.w	r9, sl, #1
 80055be:	464a      	mov	r2, r9
 80055c0:	2a01      	cmp	r2, #1
 80055c2:	bfb8      	it	lt
 80055c4:	2201      	movlt	r2, #1
 80055c6:	e7dc      	b.n	8005582 <_dtoa_r+0x23a>
 80055c8:	2201      	movs	r2, #1
 80055ca:	e7f2      	b.n	80055b2 <_dtoa_r+0x26a>
 80055cc:	2401      	movs	r4, #1
 80055ce:	2200      	movs	r2, #0
 80055d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80055d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80055d8:	2100      	movs	r1, #0
 80055da:	46d1      	mov	r9, sl
 80055dc:	2212      	movs	r2, #18
 80055de:	9108      	str	r1, [sp, #32]
 80055e0:	e7cf      	b.n	8005582 <_dtoa_r+0x23a>
 80055e2:	2201      	movs	r2, #1
 80055e4:	9207      	str	r2, [sp, #28]
 80055e6:	e7f5      	b.n	80055d4 <_dtoa_r+0x28c>
 80055e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80055ec:	46d1      	mov	r9, sl
 80055ee:	4652      	mov	r2, sl
 80055f0:	e7c7      	b.n	8005582 <_dtoa_r+0x23a>
 80055f2:	3101      	adds	r1, #1
 80055f4:	0040      	lsls	r0, r0, #1
 80055f6:	e7c7      	b.n	8005588 <_dtoa_r+0x240>
 80055f8:	636f4361 	.word	0x636f4361
 80055fc:	3fd287a7 	.word	0x3fd287a7
 8005600:	8b60c8b3 	.word	0x8b60c8b3
 8005604:	3fc68a28 	.word	0x3fc68a28
 8005608:	509f79fb 	.word	0x509f79fb
 800560c:	3fd34413 	.word	0x3fd34413
 8005610:	08007051 	.word	0x08007051
 8005614:	08007068 	.word	0x08007068
 8005618:	7ff00000 	.word	0x7ff00000
 800561c:	0800704d 	.word	0x0800704d
 8005620:	08007044 	.word	0x08007044
 8005624:	08007021 	.word	0x08007021
 8005628:	08007158 	.word	0x08007158
 800562c:	080070c0 	.word	0x080070c0
 8005630:	69f2      	ldr	r2, [r6, #28]
 8005632:	9901      	ldr	r1, [sp, #4]
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	f1b9 0f0e 	cmp.w	r9, #14
 800563a:	d86c      	bhi.n	8005716 <_dtoa_r+0x3ce>
 800563c:	2c00      	cmp	r4, #0
 800563e:	d06a      	beq.n	8005716 <_dtoa_r+0x3ce>
 8005640:	f1bb 0f00 	cmp.w	fp, #0
 8005644:	f340 80a0 	ble.w	8005788 <_dtoa_r+0x440>
 8005648:	4ac1      	ldr	r2, [pc, #772]	; (8005950 <_dtoa_r+0x608>)
 800564a:	f00b 010f 	and.w	r1, fp, #15
 800564e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005652:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005656:	ed92 7b00 	vldr	d7, [r2]
 800565a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800565e:	f000 8087 	beq.w	8005770 <_dtoa_r+0x428>
 8005662:	49bc      	ldr	r1, [pc, #752]	; (8005954 <_dtoa_r+0x60c>)
 8005664:	ed91 6b08 	vldr	d6, [r1, #32]
 8005668:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800566c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005670:	f002 020f 	and.w	r2, r2, #15
 8005674:	2103      	movs	r1, #3
 8005676:	48b7      	ldr	r0, [pc, #732]	; (8005954 <_dtoa_r+0x60c>)
 8005678:	2a00      	cmp	r2, #0
 800567a:	d17b      	bne.n	8005774 <_dtoa_r+0x42c>
 800567c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005680:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005684:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800568a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800568e:	2a00      	cmp	r2, #0
 8005690:	f000 80a0 	beq.w	80057d4 <_dtoa_r+0x48c>
 8005694:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005698:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800569c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a0:	f140 8098 	bpl.w	80057d4 <_dtoa_r+0x48c>
 80056a4:	f1b9 0f00 	cmp.w	r9, #0
 80056a8:	f000 8094 	beq.w	80057d4 <_dtoa_r+0x48c>
 80056ac:	f1ba 0f00 	cmp.w	sl, #0
 80056b0:	dd2f      	ble.n	8005712 <_dtoa_r+0x3ca>
 80056b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80056b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80056ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056be:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80056c2:	3101      	adds	r1, #1
 80056c4:	4654      	mov	r4, sl
 80056c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80056ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80056ce:	ee07 1a90 	vmov	s15, r1
 80056d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80056d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80056da:	ee15 7a90 	vmov	r7, s11
 80056de:	ec51 0b15 	vmov	r0, r1, d5
 80056e2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80056e6:	2c00      	cmp	r4, #0
 80056e8:	d177      	bne.n	80057da <_dtoa_r+0x492>
 80056ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80056ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80056f2:	ec41 0b17 	vmov	d7, r0, r1
 80056f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80056fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056fe:	f300 826a 	bgt.w	8005bd6 <_dtoa_r+0x88e>
 8005702:	eeb1 7b47 	vneg.f64	d7, d7
 8005706:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	f100 8260 	bmi.w	8005bd2 <_dtoa_r+0x88a>
 8005712:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005718:	2a00      	cmp	r2, #0
 800571a:	f2c0 811d 	blt.w	8005958 <_dtoa_r+0x610>
 800571e:	f1bb 0f0e 	cmp.w	fp, #14
 8005722:	f300 8119 	bgt.w	8005958 <_dtoa_r+0x610>
 8005726:	4b8a      	ldr	r3, [pc, #552]	; (8005950 <_dtoa_r+0x608>)
 8005728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800572c:	ed93 6b00 	vldr	d6, [r3]
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f280 80b7 	bge.w	80058a6 <_dtoa_r+0x55e>
 8005738:	f1b9 0f00 	cmp.w	r9, #0
 800573c:	f300 80b3 	bgt.w	80058a6 <_dtoa_r+0x55e>
 8005740:	f040 8246 	bne.w	8005bd0 <_dtoa_r+0x888>
 8005744:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005748:	ee26 6b07 	vmul.f64	d6, d6, d7
 800574c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005750:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005758:	464c      	mov	r4, r9
 800575a:	464f      	mov	r7, r9
 800575c:	f280 821c 	bge.w	8005b98 <_dtoa_r+0x850>
 8005760:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005764:	2331      	movs	r3, #49	; 0x31
 8005766:	f808 3b01 	strb.w	r3, [r8], #1
 800576a:	f10b 0b01 	add.w	fp, fp, #1
 800576e:	e218      	b.n	8005ba2 <_dtoa_r+0x85a>
 8005770:	2102      	movs	r1, #2
 8005772:	e780      	b.n	8005676 <_dtoa_r+0x32e>
 8005774:	07d4      	lsls	r4, r2, #31
 8005776:	d504      	bpl.n	8005782 <_dtoa_r+0x43a>
 8005778:	ed90 6b00 	vldr	d6, [r0]
 800577c:	3101      	adds	r1, #1
 800577e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005782:	1052      	asrs	r2, r2, #1
 8005784:	3008      	adds	r0, #8
 8005786:	e777      	b.n	8005678 <_dtoa_r+0x330>
 8005788:	d022      	beq.n	80057d0 <_dtoa_r+0x488>
 800578a:	f1cb 0200 	rsb	r2, fp, #0
 800578e:	4970      	ldr	r1, [pc, #448]	; (8005950 <_dtoa_r+0x608>)
 8005790:	f002 000f 	and.w	r0, r2, #15
 8005794:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005798:	ed91 7b00 	vldr	d7, [r1]
 800579c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80057a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057a4:	486b      	ldr	r0, [pc, #428]	; (8005954 <_dtoa_r+0x60c>)
 80057a6:	1112      	asrs	r2, r2, #4
 80057a8:	2400      	movs	r4, #0
 80057aa:	2102      	movs	r1, #2
 80057ac:	b92a      	cbnz	r2, 80057ba <_dtoa_r+0x472>
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	f43f af6a 	beq.w	8005688 <_dtoa_r+0x340>
 80057b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057b8:	e766      	b.n	8005688 <_dtoa_r+0x340>
 80057ba:	07d7      	lsls	r7, r2, #31
 80057bc:	d505      	bpl.n	80057ca <_dtoa_r+0x482>
 80057be:	ed90 6b00 	vldr	d6, [r0]
 80057c2:	3101      	adds	r1, #1
 80057c4:	2401      	movs	r4, #1
 80057c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057ca:	1052      	asrs	r2, r2, #1
 80057cc:	3008      	adds	r0, #8
 80057ce:	e7ed      	b.n	80057ac <_dtoa_r+0x464>
 80057d0:	2102      	movs	r1, #2
 80057d2:	e759      	b.n	8005688 <_dtoa_r+0x340>
 80057d4:	465a      	mov	r2, fp
 80057d6:	464c      	mov	r4, r9
 80057d8:	e775      	b.n	80056c6 <_dtoa_r+0x37e>
 80057da:	ec41 0b17 	vmov	d7, r0, r1
 80057de:	495c      	ldr	r1, [pc, #368]	; (8005950 <_dtoa_r+0x608>)
 80057e0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80057e4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80057e8:	9901      	ldr	r1, [sp, #4]
 80057ea:	440c      	add	r4, r1
 80057ec:	9907      	ldr	r1, [sp, #28]
 80057ee:	b351      	cbz	r1, 8005846 <_dtoa_r+0x4fe>
 80057f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80057f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80057f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005800:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005804:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005808:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800580c:	ee14 1a90 	vmov	r1, s9
 8005810:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005814:	3130      	adds	r1, #48	; 0x30
 8005816:	ee36 6b45 	vsub.f64	d6, d6, d5
 800581a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005822:	f808 1b01 	strb.w	r1, [r8], #1
 8005826:	d439      	bmi.n	800589c <_dtoa_r+0x554>
 8005828:	ee32 5b46 	vsub.f64	d5, d2, d6
 800582c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005834:	d472      	bmi.n	800591c <_dtoa_r+0x5d4>
 8005836:	45a0      	cmp	r8, r4
 8005838:	f43f af6b 	beq.w	8005712 <_dtoa_r+0x3ca>
 800583c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005840:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005844:	e7e0      	b.n	8005808 <_dtoa_r+0x4c0>
 8005846:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800584a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800584e:	4620      	mov	r0, r4
 8005850:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005854:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005858:	ee14 1a90 	vmov	r1, s9
 800585c:	3130      	adds	r1, #48	; 0x30
 800585e:	f808 1b01 	strb.w	r1, [r8], #1
 8005862:	45a0      	cmp	r8, r4
 8005864:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005868:	ee36 6b45 	vsub.f64	d6, d6, d5
 800586c:	d118      	bne.n	80058a0 <_dtoa_r+0x558>
 800586e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005872:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005876:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	dc4d      	bgt.n	800591c <_dtoa_r+0x5d4>
 8005880:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005884:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588c:	f57f af41 	bpl.w	8005712 <_dtoa_r+0x3ca>
 8005890:	4680      	mov	r8, r0
 8005892:	3801      	subs	r0, #1
 8005894:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d0f9      	beq.n	8005890 <_dtoa_r+0x548>
 800589c:	4693      	mov	fp, r2
 800589e:	e02a      	b.n	80058f6 <_dtoa_r+0x5ae>
 80058a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80058a4:	e7d6      	b.n	8005854 <_dtoa_r+0x50c>
 80058a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058aa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80058ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80058b6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80058ba:	ee15 3a10 	vmov	r3, s10
 80058be:	3330      	adds	r3, #48	; 0x30
 80058c0:	f808 3b01 	strb.w	r3, [r8], #1
 80058c4:	9b01      	ldr	r3, [sp, #4]
 80058c6:	eba8 0303 	sub.w	r3, r8, r3
 80058ca:	4599      	cmp	r9, r3
 80058cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80058d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80058d4:	d133      	bne.n	800593e <_dtoa_r+0x5f6>
 80058d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80058de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e2:	dc1a      	bgt.n	800591a <_dtoa_r+0x5d2>
 80058e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80058e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ec:	d103      	bne.n	80058f6 <_dtoa_r+0x5ae>
 80058ee:	ee15 3a10 	vmov	r3, s10
 80058f2:	07d9      	lsls	r1, r3, #31
 80058f4:	d411      	bmi.n	800591a <_dtoa_r+0x5d2>
 80058f6:	4629      	mov	r1, r5
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 fc33 	bl	8006164 <_Bfree>
 80058fe:	2300      	movs	r3, #0
 8005900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005902:	f888 3000 	strb.w	r3, [r8]
 8005906:	f10b 0301 	add.w	r3, fp, #1
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800590e:	2b00      	cmp	r3, #0
 8005910:	f43f ad69 	beq.w	80053e6 <_dtoa_r+0x9e>
 8005914:	f8c3 8000 	str.w	r8, [r3]
 8005918:	e565      	b.n	80053e6 <_dtoa_r+0x9e>
 800591a:	465a      	mov	r2, fp
 800591c:	4643      	mov	r3, r8
 800591e:	4698      	mov	r8, r3
 8005920:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8005924:	2939      	cmp	r1, #57	; 0x39
 8005926:	d106      	bne.n	8005936 <_dtoa_r+0x5ee>
 8005928:	9901      	ldr	r1, [sp, #4]
 800592a:	4299      	cmp	r1, r3
 800592c:	d1f7      	bne.n	800591e <_dtoa_r+0x5d6>
 800592e:	9801      	ldr	r0, [sp, #4]
 8005930:	2130      	movs	r1, #48	; 0x30
 8005932:	3201      	adds	r2, #1
 8005934:	7001      	strb	r1, [r0, #0]
 8005936:	7819      	ldrb	r1, [r3, #0]
 8005938:	3101      	adds	r1, #1
 800593a:	7019      	strb	r1, [r3, #0]
 800593c:	e7ae      	b.n	800589c <_dtoa_r+0x554>
 800593e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005942:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594a:	d1b2      	bne.n	80058b2 <_dtoa_r+0x56a>
 800594c:	e7d3      	b.n	80058f6 <_dtoa_r+0x5ae>
 800594e:	bf00      	nop
 8005950:	08007158 	.word	0x08007158
 8005954:	08007130 	.word	0x08007130
 8005958:	9907      	ldr	r1, [sp, #28]
 800595a:	2900      	cmp	r1, #0
 800595c:	f000 80d0 	beq.w	8005b00 <_dtoa_r+0x7b8>
 8005960:	9906      	ldr	r1, [sp, #24]
 8005962:	2901      	cmp	r1, #1
 8005964:	f300 80b4 	bgt.w	8005ad0 <_dtoa_r+0x788>
 8005968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800596a:	2900      	cmp	r1, #0
 800596c:	f000 80ac 	beq.w	8005ac8 <_dtoa_r+0x780>
 8005970:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005974:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005978:	461c      	mov	r4, r3
 800597a:	9309      	str	r3, [sp, #36]	; 0x24
 800597c:	9b04      	ldr	r3, [sp, #16]
 800597e:	4413      	add	r3, r2
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	9b05      	ldr	r3, [sp, #20]
 8005984:	2101      	movs	r1, #1
 8005986:	4413      	add	r3, r2
 8005988:	4630      	mov	r0, r6
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	f000 fca0 	bl	80062d0 <__i2b>
 8005990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005992:	4607      	mov	r7, r0
 8005994:	f1b8 0f00 	cmp.w	r8, #0
 8005998:	d00d      	beq.n	80059b6 <_dtoa_r+0x66e>
 800599a:	9a05      	ldr	r2, [sp, #20]
 800599c:	2a00      	cmp	r2, #0
 800599e:	dd0a      	ble.n	80059b6 <_dtoa_r+0x66e>
 80059a0:	4542      	cmp	r2, r8
 80059a2:	9904      	ldr	r1, [sp, #16]
 80059a4:	bfa8      	it	ge
 80059a6:	4642      	movge	r2, r8
 80059a8:	1a89      	subs	r1, r1, r2
 80059aa:	9104      	str	r1, [sp, #16]
 80059ac:	9905      	ldr	r1, [sp, #20]
 80059ae:	eba8 0802 	sub.w	r8, r8, r2
 80059b2:	1a8a      	subs	r2, r1, r2
 80059b4:	9205      	str	r2, [sp, #20]
 80059b6:	b303      	cbz	r3, 80059fa <_dtoa_r+0x6b2>
 80059b8:	9a07      	ldr	r2, [sp, #28]
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	f000 80a5 	beq.w	8005b0a <_dtoa_r+0x7c2>
 80059c0:	2c00      	cmp	r4, #0
 80059c2:	dd13      	ble.n	80059ec <_dtoa_r+0x6a4>
 80059c4:	4639      	mov	r1, r7
 80059c6:	4622      	mov	r2, r4
 80059c8:	4630      	mov	r0, r6
 80059ca:	930d      	str	r3, [sp, #52]	; 0x34
 80059cc:	f000 fd40 	bl	8006450 <__pow5mult>
 80059d0:	462a      	mov	r2, r5
 80059d2:	4601      	mov	r1, r0
 80059d4:	4607      	mov	r7, r0
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 fc90 	bl	80062fc <__multiply>
 80059dc:	4629      	mov	r1, r5
 80059de:	9009      	str	r0, [sp, #36]	; 0x24
 80059e0:	4630      	mov	r0, r6
 80059e2:	f000 fbbf 	bl	8006164 <_Bfree>
 80059e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ea:	4615      	mov	r5, r2
 80059ec:	1b1a      	subs	r2, r3, r4
 80059ee:	d004      	beq.n	80059fa <_dtoa_r+0x6b2>
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f000 fd2c 	bl	8006450 <__pow5mult>
 80059f8:	4605      	mov	r5, r0
 80059fa:	2101      	movs	r1, #1
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 fc67 	bl	80062d0 <__i2b>
 8005a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	4604      	mov	r4, r0
 8005a08:	f340 8081 	ble.w	8005b0e <_dtoa_r+0x7c6>
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4601      	mov	r1, r0
 8005a10:	4630      	mov	r0, r6
 8005a12:	f000 fd1d 	bl	8006450 <__pow5mult>
 8005a16:	9b06      	ldr	r3, [sp, #24]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	dd7a      	ble.n	8005b14 <_dtoa_r+0x7cc>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9309      	str	r3, [sp, #36]	; 0x24
 8005a22:	6922      	ldr	r2, [r4, #16]
 8005a24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005a28:	6910      	ldr	r0, [r2, #16]
 8005a2a:	f000 fc03 	bl	8006234 <__hi0bits>
 8005a2e:	f1c0 0020 	rsb	r0, r0, #32
 8005a32:	9b05      	ldr	r3, [sp, #20]
 8005a34:	4418      	add	r0, r3
 8005a36:	f010 001f 	ands.w	r0, r0, #31
 8005a3a:	f000 8093 	beq.w	8005b64 <_dtoa_r+0x81c>
 8005a3e:	f1c0 0220 	rsb	r2, r0, #32
 8005a42:	2a04      	cmp	r2, #4
 8005a44:	f340 8085 	ble.w	8005b52 <_dtoa_r+0x80a>
 8005a48:	9b04      	ldr	r3, [sp, #16]
 8005a4a:	f1c0 001c 	rsb	r0, r0, #28
 8005a4e:	4403      	add	r3, r0
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	9b05      	ldr	r3, [sp, #20]
 8005a54:	4480      	add	r8, r0
 8005a56:	4403      	add	r3, r0
 8005a58:	9305      	str	r3, [sp, #20]
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd05      	ble.n	8005a6c <_dtoa_r+0x724>
 8005a60:	4629      	mov	r1, r5
 8005a62:	461a      	mov	r2, r3
 8005a64:	4630      	mov	r0, r6
 8005a66:	f000 fd4d 	bl	8006504 <__lshift>
 8005a6a:	4605      	mov	r5, r0
 8005a6c:	9b05      	ldr	r3, [sp, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd05      	ble.n	8005a7e <_dtoa_r+0x736>
 8005a72:	4621      	mov	r1, r4
 8005a74:	461a      	mov	r2, r3
 8005a76:	4630      	mov	r0, r6
 8005a78:	f000 fd44 	bl	8006504 <__lshift>
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d071      	beq.n	8005b68 <_dtoa_r+0x820>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fda8 	bl	80065dc <__mcmp>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	da6b      	bge.n	8005b68 <_dtoa_r+0x820>
 8005a90:	2300      	movs	r3, #0
 8005a92:	4629      	mov	r1, r5
 8005a94:	220a      	movs	r2, #10
 8005a96:	4630      	mov	r0, r6
 8005a98:	f000 fb86 	bl	80061a8 <__multadd>
 8005a9c:	9b07      	ldr	r3, [sp, #28]
 8005a9e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8197 	beq.w	8005dd8 <_dtoa_r+0xa90>
 8005aaa:	4639      	mov	r1, r7
 8005aac:	2300      	movs	r3, #0
 8005aae:	220a      	movs	r2, #10
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f000 fb79 	bl	80061a8 <__multadd>
 8005ab6:	f1ba 0f00 	cmp.w	sl, #0
 8005aba:	4607      	mov	r7, r0
 8005abc:	f300 8093 	bgt.w	8005be6 <_dtoa_r+0x89e>
 8005ac0:	9b06      	ldr	r3, [sp, #24]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	dc57      	bgt.n	8005b76 <_dtoa_r+0x82e>
 8005ac6:	e08e      	b.n	8005be6 <_dtoa_r+0x89e>
 8005ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ace:	e751      	b.n	8005974 <_dtoa_r+0x62c>
 8005ad0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	bfbf      	itttt	lt
 8005ad8:	1ae2      	sublt	r2, r4, r3
 8005ada:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005adc:	189b      	addlt	r3, r3, r2
 8005ade:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005ae0:	bfae      	itee	ge
 8005ae2:	1b1c      	subge	r4, r3, r4
 8005ae4:	4623      	movlt	r3, r4
 8005ae6:	2400      	movlt	r4, #0
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	bfb5      	itete	lt
 8005aee:	9a04      	ldrlt	r2, [sp, #16]
 8005af0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005af4:	eba2 0809 	sublt.w	r8, r2, r9
 8005af8:	464a      	movge	r2, r9
 8005afa:	bfb8      	it	lt
 8005afc:	2200      	movlt	r2, #0
 8005afe:	e73c      	b.n	800597a <_dtoa_r+0x632>
 8005b00:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005b04:	9f07      	ldr	r7, [sp, #28]
 8005b06:	461c      	mov	r4, r3
 8005b08:	e744      	b.n	8005994 <_dtoa_r+0x64c>
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	e770      	b.n	80059f0 <_dtoa_r+0x6a8>
 8005b0e:	9b06      	ldr	r3, [sp, #24]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	dc18      	bgt.n	8005b46 <_dtoa_r+0x7fe>
 8005b14:	9b02      	ldr	r3, [sp, #8]
 8005b16:	b9b3      	cbnz	r3, 8005b46 <_dtoa_r+0x7fe>
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8005b1e:	b9a2      	cbnz	r2, 8005b4a <_dtoa_r+0x802>
 8005b20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b24:	0d12      	lsrs	r2, r2, #20
 8005b26:	0512      	lsls	r2, r2, #20
 8005b28:	b18a      	cbz	r2, 8005b4e <_dtoa_r+0x806>
 8005b2a:	9b04      	ldr	r3, [sp, #16]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	9304      	str	r3, [sp, #16]
 8005b30:	9b05      	ldr	r3, [sp, #20]
 8005b32:	3301      	adds	r3, #1
 8005b34:	9305      	str	r3, [sp, #20]
 8005b36:	2301      	movs	r3, #1
 8005b38:	9309      	str	r3, [sp, #36]	; 0x24
 8005b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f47f af70 	bne.w	8005a22 <_dtoa_r+0x6da>
 8005b42:	2001      	movs	r0, #1
 8005b44:	e775      	b.n	8005a32 <_dtoa_r+0x6ea>
 8005b46:	2300      	movs	r3, #0
 8005b48:	e7f6      	b.n	8005b38 <_dtoa_r+0x7f0>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	e7f4      	b.n	8005b38 <_dtoa_r+0x7f0>
 8005b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b50:	e7f3      	b.n	8005b3a <_dtoa_r+0x7f2>
 8005b52:	d082      	beq.n	8005a5a <_dtoa_r+0x712>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	321c      	adds	r2, #28
 8005b58:	4413      	add	r3, r2
 8005b5a:	9304      	str	r3, [sp, #16]
 8005b5c:	9b05      	ldr	r3, [sp, #20]
 8005b5e:	4490      	add	r8, r2
 8005b60:	4413      	add	r3, r2
 8005b62:	e779      	b.n	8005a58 <_dtoa_r+0x710>
 8005b64:	4602      	mov	r2, r0
 8005b66:	e7f5      	b.n	8005b54 <_dtoa_r+0x80c>
 8005b68:	f1b9 0f00 	cmp.w	r9, #0
 8005b6c:	dc36      	bgt.n	8005bdc <_dtoa_r+0x894>
 8005b6e:	9b06      	ldr	r3, [sp, #24]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	dd33      	ble.n	8005bdc <_dtoa_r+0x894>
 8005b74:	46ca      	mov	sl, r9
 8005b76:	f1ba 0f00 	cmp.w	sl, #0
 8005b7a:	d10d      	bne.n	8005b98 <_dtoa_r+0x850>
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4653      	mov	r3, sl
 8005b80:	2205      	movs	r2, #5
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 fb10 	bl	80061a8 <__multadd>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f000 fd25 	bl	80065dc <__mcmp>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	f73f ade4 	bgt.w	8005760 <_dtoa_r+0x418>
 8005b98:	9b08      	ldr	r3, [sp, #32]
 8005b9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005b9e:	ea6f 0b03 	mvn.w	fp, r3
 8005ba2:	f04f 0900 	mov.w	r9, #0
 8005ba6:	4621      	mov	r1, r4
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f000 fadb 	bl	8006164 <_Bfree>
 8005bae:	2f00      	cmp	r7, #0
 8005bb0:	f43f aea1 	beq.w	80058f6 <_dtoa_r+0x5ae>
 8005bb4:	f1b9 0f00 	cmp.w	r9, #0
 8005bb8:	d005      	beq.n	8005bc6 <_dtoa_r+0x87e>
 8005bba:	45b9      	cmp	r9, r7
 8005bbc:	d003      	beq.n	8005bc6 <_dtoa_r+0x87e>
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f000 facf 	bl	8006164 <_Bfree>
 8005bc6:	4639      	mov	r1, r7
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f000 facb 	bl	8006164 <_Bfree>
 8005bce:	e692      	b.n	80058f6 <_dtoa_r+0x5ae>
 8005bd0:	2400      	movs	r4, #0
 8005bd2:	4627      	mov	r7, r4
 8005bd4:	e7e0      	b.n	8005b98 <_dtoa_r+0x850>
 8005bd6:	4693      	mov	fp, r2
 8005bd8:	4627      	mov	r7, r4
 8005bda:	e5c1      	b.n	8005760 <_dtoa_r+0x418>
 8005bdc:	9b07      	ldr	r3, [sp, #28]
 8005bde:	46ca      	mov	sl, r9
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8100 	beq.w	8005de6 <_dtoa_r+0xa9e>
 8005be6:	f1b8 0f00 	cmp.w	r8, #0
 8005bea:	dd05      	ble.n	8005bf8 <_dtoa_r+0x8b0>
 8005bec:	4639      	mov	r1, r7
 8005bee:	4642      	mov	r2, r8
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 fc87 	bl	8006504 <__lshift>
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d05d      	beq.n	8005cba <_dtoa_r+0x972>
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 fa6f 	bl	80060e4 <_Balloc>
 8005c06:	4680      	mov	r8, r0
 8005c08:	b928      	cbnz	r0, 8005c16 <_dtoa_r+0x8ce>
 8005c0a:	4b82      	ldr	r3, [pc, #520]	; (8005e14 <_dtoa_r+0xacc>)
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005c12:	f7ff bbb1 	b.w	8005378 <_dtoa_r+0x30>
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	3202      	adds	r2, #2
 8005c1a:	0092      	lsls	r2, r2, #2
 8005c1c:	f107 010c 	add.w	r1, r7, #12
 8005c20:	300c      	adds	r0, #12
 8005c22:	f000 fe75 	bl	8006910 <memcpy>
 8005c26:	2201      	movs	r2, #1
 8005c28:	4641      	mov	r1, r8
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f000 fc6a 	bl	8006504 <__lshift>
 8005c30:	9b01      	ldr	r3, [sp, #4]
 8005c32:	3301      	adds	r3, #1
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	9b01      	ldr	r3, [sp, #4]
 8005c38:	4453      	add	r3, sl
 8005c3a:	9308      	str	r3, [sp, #32]
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	46b9      	mov	r9, r7
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	4607      	mov	r7, r0
 8005c48:	9b04      	ldr	r3, [sp, #16]
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	4628      	mov	r0, r5
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	f7ff faef 	bl	8005234 <quorem>
 8005c56:	4603      	mov	r3, r0
 8005c58:	3330      	adds	r3, #48	; 0x30
 8005c5a:	9005      	str	r0, [sp, #20]
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	4628      	mov	r0, r5
 8005c60:	9309      	str	r3, [sp, #36]	; 0x24
 8005c62:	f000 fcbb 	bl	80065dc <__mcmp>
 8005c66:	463a      	mov	r2, r7
 8005c68:	4682      	mov	sl, r0
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 fcd1 	bl	8006614 <__mdiff>
 8005c72:	68c2      	ldr	r2, [r0, #12]
 8005c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c76:	4680      	mov	r8, r0
 8005c78:	bb0a      	cbnz	r2, 8005cbe <_dtoa_r+0x976>
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 fcad 	bl	80065dc <__mcmp>
 8005c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c84:	4602      	mov	r2, r0
 8005c86:	4641      	mov	r1, r8
 8005c88:	4630      	mov	r0, r6
 8005c8a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8005c8e:	f000 fa69 	bl	8006164 <_Bfree>
 8005c92:	9b06      	ldr	r3, [sp, #24]
 8005c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c96:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005c9a:	ea43 0102 	orr.w	r1, r3, r2
 8005c9e:	9b07      	ldr	r3, [sp, #28]
 8005ca0:	4319      	orrs	r1, r3
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	d10d      	bne.n	8005cc2 <_dtoa_r+0x97a>
 8005ca6:	2b39      	cmp	r3, #57	; 0x39
 8005ca8:	d029      	beq.n	8005cfe <_dtoa_r+0x9b6>
 8005caa:	f1ba 0f00 	cmp.w	sl, #0
 8005cae:	dd01      	ble.n	8005cb4 <_dtoa_r+0x96c>
 8005cb0:	9b05      	ldr	r3, [sp, #20]
 8005cb2:	3331      	adds	r3, #49	; 0x31
 8005cb4:	9a02      	ldr	r2, [sp, #8]
 8005cb6:	7013      	strb	r3, [r2, #0]
 8005cb8:	e775      	b.n	8005ba6 <_dtoa_r+0x85e>
 8005cba:	4638      	mov	r0, r7
 8005cbc:	e7b8      	b.n	8005c30 <_dtoa_r+0x8e8>
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	e7e1      	b.n	8005c86 <_dtoa_r+0x93e>
 8005cc2:	f1ba 0f00 	cmp.w	sl, #0
 8005cc6:	db06      	blt.n	8005cd6 <_dtoa_r+0x98e>
 8005cc8:	9906      	ldr	r1, [sp, #24]
 8005cca:	ea41 0a0a 	orr.w	sl, r1, sl
 8005cce:	9907      	ldr	r1, [sp, #28]
 8005cd0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005cd4:	d120      	bne.n	8005d18 <_dtoa_r+0x9d0>
 8005cd6:	2a00      	cmp	r2, #0
 8005cd8:	ddec      	ble.n	8005cb4 <_dtoa_r+0x96c>
 8005cda:	4629      	mov	r1, r5
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4630      	mov	r0, r6
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	f000 fc0f 	bl	8006504 <__lshift>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4605      	mov	r5, r0
 8005cea:	f000 fc77 	bl	80065dc <__mcmp>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	9b04      	ldr	r3, [sp, #16]
 8005cf2:	dc02      	bgt.n	8005cfa <_dtoa_r+0x9b2>
 8005cf4:	d1de      	bne.n	8005cb4 <_dtoa_r+0x96c>
 8005cf6:	07da      	lsls	r2, r3, #31
 8005cf8:	d5dc      	bpl.n	8005cb4 <_dtoa_r+0x96c>
 8005cfa:	2b39      	cmp	r3, #57	; 0x39
 8005cfc:	d1d8      	bne.n	8005cb0 <_dtoa_r+0x968>
 8005cfe:	9a02      	ldr	r2, [sp, #8]
 8005d00:	2339      	movs	r3, #57	; 0x39
 8005d02:	7013      	strb	r3, [r2, #0]
 8005d04:	4643      	mov	r3, r8
 8005d06:	4698      	mov	r8, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8005d0e:	2a39      	cmp	r2, #57	; 0x39
 8005d10:	d051      	beq.n	8005db6 <_dtoa_r+0xa6e>
 8005d12:	3201      	adds	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	e746      	b.n	8005ba6 <_dtoa_r+0x85e>
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	dd03      	ble.n	8005d24 <_dtoa_r+0x9dc>
 8005d1c:	2b39      	cmp	r3, #57	; 0x39
 8005d1e:	d0ee      	beq.n	8005cfe <_dtoa_r+0x9b6>
 8005d20:	3301      	adds	r3, #1
 8005d22:	e7c7      	b.n	8005cb4 <_dtoa_r+0x96c>
 8005d24:	9a04      	ldr	r2, [sp, #16]
 8005d26:	9908      	ldr	r1, [sp, #32]
 8005d28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	d02b      	beq.n	8005d88 <_dtoa_r+0xa40>
 8005d30:	4629      	mov	r1, r5
 8005d32:	2300      	movs	r3, #0
 8005d34:	220a      	movs	r2, #10
 8005d36:	4630      	mov	r0, r6
 8005d38:	f000 fa36 	bl	80061a8 <__multadd>
 8005d3c:	45b9      	cmp	r9, r7
 8005d3e:	4605      	mov	r5, r0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	f04f 020a 	mov.w	r2, #10
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	d107      	bne.n	8005d5e <_dtoa_r+0xa16>
 8005d4e:	f000 fa2b 	bl	80061a8 <__multadd>
 8005d52:	4681      	mov	r9, r0
 8005d54:	4607      	mov	r7, r0
 8005d56:	9b04      	ldr	r3, [sp, #16]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	e774      	b.n	8005c48 <_dtoa_r+0x900>
 8005d5e:	f000 fa23 	bl	80061a8 <__multadd>
 8005d62:	4639      	mov	r1, r7
 8005d64:	4681      	mov	r9, r0
 8005d66:	2300      	movs	r3, #0
 8005d68:	220a      	movs	r2, #10
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f000 fa1c 	bl	80061a8 <__multadd>
 8005d70:	4607      	mov	r7, r0
 8005d72:	e7f0      	b.n	8005d56 <_dtoa_r+0xa0e>
 8005d74:	f1ba 0f00 	cmp.w	sl, #0
 8005d78:	9a01      	ldr	r2, [sp, #4]
 8005d7a:	bfcc      	ite	gt
 8005d7c:	46d0      	movgt	r8, sl
 8005d7e:	f04f 0801 	movle.w	r8, #1
 8005d82:	4490      	add	r8, r2
 8005d84:	f04f 0900 	mov.w	r9, #0
 8005d88:	4629      	mov	r1, r5
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	f000 fbb8 	bl	8006504 <__lshift>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4605      	mov	r5, r0
 8005d98:	f000 fc20 	bl	80065dc <__mcmp>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	dcb1      	bgt.n	8005d04 <_dtoa_r+0x9bc>
 8005da0:	d102      	bne.n	8005da8 <_dtoa_r+0xa60>
 8005da2:	9b02      	ldr	r3, [sp, #8]
 8005da4:	07db      	lsls	r3, r3, #31
 8005da6:	d4ad      	bmi.n	8005d04 <_dtoa_r+0x9bc>
 8005da8:	4643      	mov	r3, r8
 8005daa:	4698      	mov	r8, r3
 8005dac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db0:	2a30      	cmp	r2, #48	; 0x30
 8005db2:	d0fa      	beq.n	8005daa <_dtoa_r+0xa62>
 8005db4:	e6f7      	b.n	8005ba6 <_dtoa_r+0x85e>
 8005db6:	9a01      	ldr	r2, [sp, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d1a4      	bne.n	8005d06 <_dtoa_r+0x9be>
 8005dbc:	f10b 0b01 	add.w	fp, fp, #1
 8005dc0:	2331      	movs	r3, #49	; 0x31
 8005dc2:	e778      	b.n	8005cb6 <_dtoa_r+0x96e>
 8005dc4:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <_dtoa_r+0xad0>)
 8005dc6:	f7ff bb2a 	b.w	800541e <_dtoa_r+0xd6>
 8005dca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f47f ab05 	bne.w	80053dc <_dtoa_r+0x94>
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <_dtoa_r+0xad4>)
 8005dd4:	f7ff bb23 	b.w	800541e <_dtoa_r+0xd6>
 8005dd8:	f1ba 0f00 	cmp.w	sl, #0
 8005ddc:	dc03      	bgt.n	8005de6 <_dtoa_r+0xa9e>
 8005dde:	9b06      	ldr	r3, [sp, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f73f aec8 	bgt.w	8005b76 <_dtoa_r+0x82e>
 8005de6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f7ff fa21 	bl	8005234 <quorem>
 8005df2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005df6:	f808 3b01 	strb.w	r3, [r8], #1
 8005dfa:	9a01      	ldr	r2, [sp, #4]
 8005dfc:	eba8 0202 	sub.w	r2, r8, r2
 8005e00:	4592      	cmp	sl, r2
 8005e02:	ddb7      	ble.n	8005d74 <_dtoa_r+0xa2c>
 8005e04:	4629      	mov	r1, r5
 8005e06:	2300      	movs	r3, #0
 8005e08:	220a      	movs	r2, #10
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f000 f9cc 	bl	80061a8 <__multadd>
 8005e10:	4605      	mov	r5, r0
 8005e12:	e7ea      	b.n	8005dea <_dtoa_r+0xaa2>
 8005e14:	080070c0 	.word	0x080070c0
 8005e18:	08007020 	.word	0x08007020
 8005e1c:	08007044 	.word	0x08007044

08005e20 <malloc>:
 8005e20:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <malloc+0xc>)
 8005e22:	4601      	mov	r1, r0
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	f000 b823 	b.w	8005e70 <_malloc_r>
 8005e2a:	bf00      	nop
 8005e2c:	20000068 	.word	0x20000068

08005e30 <sbrk_aligned>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4e0e      	ldr	r6, [pc, #56]	; (8005e6c <sbrk_aligned+0x3c>)
 8005e34:	460c      	mov	r4, r1
 8005e36:	6831      	ldr	r1, [r6, #0]
 8005e38:	4605      	mov	r5, r0
 8005e3a:	b911      	cbnz	r1, 8005e42 <sbrk_aligned+0x12>
 8005e3c:	f000 fd46 	bl	80068cc <_sbrk_r>
 8005e40:	6030      	str	r0, [r6, #0]
 8005e42:	4621      	mov	r1, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 fd41 	bl	80068cc <_sbrk_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	d00a      	beq.n	8005e64 <sbrk_aligned+0x34>
 8005e4e:	1cc4      	adds	r4, r0, #3
 8005e50:	f024 0403 	bic.w	r4, r4, #3
 8005e54:	42a0      	cmp	r0, r4
 8005e56:	d007      	beq.n	8005e68 <sbrk_aligned+0x38>
 8005e58:	1a21      	subs	r1, r4, r0
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f000 fd36 	bl	80068cc <_sbrk_r>
 8005e60:	3001      	adds	r0, #1
 8005e62:	d101      	bne.n	8005e68 <sbrk_aligned+0x38>
 8005e64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e68:	4620      	mov	r0, r4
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	20000484 	.word	0x20000484

08005e70 <_malloc_r>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	1ccd      	adds	r5, r1, #3
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	4607      	mov	r7, r0
 8005e86:	db01      	blt.n	8005e8c <_malloc_r+0x1c>
 8005e88:	42a9      	cmp	r1, r5
 8005e8a:	d905      	bls.n	8005e98 <_malloc_r+0x28>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	2600      	movs	r6, #0
 8005e92:	4630      	mov	r0, r6
 8005e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f6c <_malloc_r+0xfc>
 8005e9c:	f000 f916 	bl	80060cc <__malloc_lock>
 8005ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea4:	461c      	mov	r4, r3
 8005ea6:	bb5c      	cbnz	r4, 8005f00 <_malloc_r+0x90>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f7ff ffc0 	bl	8005e30 <sbrk_aligned>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	d155      	bne.n	8005f62 <_malloc_r+0xf2>
 8005eb6:	f8d8 4000 	ldr.w	r4, [r8]
 8005eba:	4626      	mov	r6, r4
 8005ebc:	2e00      	cmp	r6, #0
 8005ebe:	d145      	bne.n	8005f4c <_malloc_r+0xdc>
 8005ec0:	2c00      	cmp	r4, #0
 8005ec2:	d048      	beq.n	8005f56 <_malloc_r+0xe6>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4638      	mov	r0, r7
 8005eca:	eb04 0903 	add.w	r9, r4, r3
 8005ece:	f000 fcfd 	bl	80068cc <_sbrk_r>
 8005ed2:	4581      	cmp	r9, r0
 8005ed4:	d13f      	bne.n	8005f56 <_malloc_r+0xe6>
 8005ed6:	6821      	ldr	r1, [r4, #0]
 8005ed8:	1a6d      	subs	r5, r5, r1
 8005eda:	4629      	mov	r1, r5
 8005edc:	4638      	mov	r0, r7
 8005ede:	f7ff ffa7 	bl	8005e30 <sbrk_aligned>
 8005ee2:	3001      	adds	r0, #1
 8005ee4:	d037      	beq.n	8005f56 <_malloc_r+0xe6>
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	442b      	add	r3, r5
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d038      	beq.n	8005f66 <_malloc_r+0xf6>
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	42a2      	cmp	r2, r4
 8005ef8:	d12b      	bne.n	8005f52 <_malloc_r+0xe2>
 8005efa:	2200      	movs	r2, #0
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	e00f      	b.n	8005f20 <_malloc_r+0xb0>
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	1b52      	subs	r2, r2, r5
 8005f04:	d41f      	bmi.n	8005f46 <_malloc_r+0xd6>
 8005f06:	2a0b      	cmp	r2, #11
 8005f08:	d917      	bls.n	8005f3a <_malloc_r+0xca>
 8005f0a:	1961      	adds	r1, r4, r5
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	6025      	str	r5, [r4, #0]
 8005f10:	bf18      	it	ne
 8005f12:	6059      	strne	r1, [r3, #4]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	bf08      	it	eq
 8005f18:	f8c8 1000 	streq.w	r1, [r8]
 8005f1c:	5162      	str	r2, [r4, r5]
 8005f1e:	604b      	str	r3, [r1, #4]
 8005f20:	4638      	mov	r0, r7
 8005f22:	f104 060b 	add.w	r6, r4, #11
 8005f26:	f000 f8d7 	bl	80060d8 <__malloc_unlock>
 8005f2a:	f026 0607 	bic.w	r6, r6, #7
 8005f2e:	1d23      	adds	r3, r4, #4
 8005f30:	1af2      	subs	r2, r6, r3
 8005f32:	d0ae      	beq.n	8005e92 <_malloc_r+0x22>
 8005f34:	1b9b      	subs	r3, r3, r6
 8005f36:	50a3      	str	r3, [r4, r2]
 8005f38:	e7ab      	b.n	8005e92 <_malloc_r+0x22>
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	6862      	ldr	r2, [r4, #4]
 8005f3e:	d1dd      	bne.n	8005efc <_malloc_r+0x8c>
 8005f40:	f8c8 2000 	str.w	r2, [r8]
 8005f44:	e7ec      	b.n	8005f20 <_malloc_r+0xb0>
 8005f46:	4623      	mov	r3, r4
 8005f48:	6864      	ldr	r4, [r4, #4]
 8005f4a:	e7ac      	b.n	8005ea6 <_malloc_r+0x36>
 8005f4c:	4634      	mov	r4, r6
 8005f4e:	6876      	ldr	r6, [r6, #4]
 8005f50:	e7b4      	b.n	8005ebc <_malloc_r+0x4c>
 8005f52:	4613      	mov	r3, r2
 8005f54:	e7cc      	b.n	8005ef0 <_malloc_r+0x80>
 8005f56:	230c      	movs	r3, #12
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f000 f8bc 	bl	80060d8 <__malloc_unlock>
 8005f60:	e797      	b.n	8005e92 <_malloc_r+0x22>
 8005f62:	6025      	str	r5, [r4, #0]
 8005f64:	e7dc      	b.n	8005f20 <_malloc_r+0xb0>
 8005f66:	605b      	str	r3, [r3, #4]
 8005f68:	deff      	udf	#255	; 0xff
 8005f6a:	bf00      	nop
 8005f6c:	20000480 	.word	0x20000480

08005f70 <__sflush_r>:
 8005f70:	898a      	ldrh	r2, [r1, #12]
 8005f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f76:	4605      	mov	r5, r0
 8005f78:	0710      	lsls	r0, r2, #28
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	d458      	bmi.n	8006030 <__sflush_r+0xc0>
 8005f7e:	684b      	ldr	r3, [r1, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dc05      	bgt.n	8005f90 <__sflush_r+0x20>
 8005f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	dc02      	bgt.n	8005f90 <__sflush_r+0x20>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	d0f9      	beq.n	8005f8a <__sflush_r+0x1a>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f9c:	682f      	ldr	r7, [r5, #0]
 8005f9e:	6a21      	ldr	r1, [r4, #32]
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	d032      	beq.n	800600a <__sflush_r+0x9a>
 8005fa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fa6:	89a3      	ldrh	r3, [r4, #12]
 8005fa8:	075a      	lsls	r2, r3, #29
 8005faa:	d505      	bpl.n	8005fb8 <__sflush_r+0x48>
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	1ac0      	subs	r0, r0, r3
 8005fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fb2:	b10b      	cbz	r3, 8005fb8 <__sflush_r+0x48>
 8005fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fb6:	1ac0      	subs	r0, r0, r3
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4602      	mov	r2, r0
 8005fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fbe:	6a21      	ldr	r1, [r4, #32]
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b0      	blx	r6
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	d106      	bne.n	8005fd8 <__sflush_r+0x68>
 8005fca:	6829      	ldr	r1, [r5, #0]
 8005fcc:	291d      	cmp	r1, #29
 8005fce:	d82b      	bhi.n	8006028 <__sflush_r+0xb8>
 8005fd0:	4a29      	ldr	r2, [pc, #164]	; (8006078 <__sflush_r+0x108>)
 8005fd2:	410a      	asrs	r2, r1
 8005fd4:	07d6      	lsls	r6, r2, #31
 8005fd6:	d427      	bmi.n	8006028 <__sflush_r+0xb8>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	6062      	str	r2, [r4, #4]
 8005fdc:	04d9      	lsls	r1, r3, #19
 8005fde:	6922      	ldr	r2, [r4, #16]
 8005fe0:	6022      	str	r2, [r4, #0]
 8005fe2:	d504      	bpl.n	8005fee <__sflush_r+0x7e>
 8005fe4:	1c42      	adds	r2, r0, #1
 8005fe6:	d101      	bne.n	8005fec <__sflush_r+0x7c>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b903      	cbnz	r3, 8005fee <__sflush_r+0x7e>
 8005fec:	6560      	str	r0, [r4, #84]	; 0x54
 8005fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff0:	602f      	str	r7, [r5, #0]
 8005ff2:	2900      	cmp	r1, #0
 8005ff4:	d0c9      	beq.n	8005f8a <__sflush_r+0x1a>
 8005ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	d002      	beq.n	8006004 <__sflush_r+0x94>
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fcc8 	bl	8006994 <_free_r>
 8006004:	2000      	movs	r0, #0
 8006006:	6360      	str	r0, [r4, #52]	; 0x34
 8006008:	e7c0      	b.n	8005f8c <__sflush_r+0x1c>
 800600a:	2301      	movs	r3, #1
 800600c:	4628      	mov	r0, r5
 800600e:	47b0      	blx	r6
 8006010:	1c41      	adds	r1, r0, #1
 8006012:	d1c8      	bne.n	8005fa6 <__sflush_r+0x36>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0c5      	beq.n	8005fa6 <__sflush_r+0x36>
 800601a:	2b1d      	cmp	r3, #29
 800601c:	d001      	beq.n	8006022 <__sflush_r+0xb2>
 800601e:	2b16      	cmp	r3, #22
 8006020:	d101      	bne.n	8006026 <__sflush_r+0xb6>
 8006022:	602f      	str	r7, [r5, #0]
 8006024:	e7b1      	b.n	8005f8a <__sflush_r+0x1a>
 8006026:	89a3      	ldrh	r3, [r4, #12]
 8006028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	e7ad      	b.n	8005f8c <__sflush_r+0x1c>
 8006030:	690f      	ldr	r7, [r1, #16]
 8006032:	2f00      	cmp	r7, #0
 8006034:	d0a9      	beq.n	8005f8a <__sflush_r+0x1a>
 8006036:	0793      	lsls	r3, r2, #30
 8006038:	680e      	ldr	r6, [r1, #0]
 800603a:	bf08      	it	eq
 800603c:	694b      	ldreq	r3, [r1, #20]
 800603e:	600f      	str	r7, [r1, #0]
 8006040:	bf18      	it	ne
 8006042:	2300      	movne	r3, #0
 8006044:	eba6 0807 	sub.w	r8, r6, r7
 8006048:	608b      	str	r3, [r1, #8]
 800604a:	f1b8 0f00 	cmp.w	r8, #0
 800604e:	dd9c      	ble.n	8005f8a <__sflush_r+0x1a>
 8006050:	6a21      	ldr	r1, [r4, #32]
 8006052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006054:	4643      	mov	r3, r8
 8006056:	463a      	mov	r2, r7
 8006058:	4628      	mov	r0, r5
 800605a:	47b0      	blx	r6
 800605c:	2800      	cmp	r0, #0
 800605e:	dc06      	bgt.n	800606e <__sflush_r+0xfe>
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800606c:	e78e      	b.n	8005f8c <__sflush_r+0x1c>
 800606e:	4407      	add	r7, r0
 8006070:	eba8 0800 	sub.w	r8, r8, r0
 8006074:	e7e9      	b.n	800604a <__sflush_r+0xda>
 8006076:	bf00      	nop
 8006078:	dfbffffe 	.word	0xdfbffffe

0800607c <_fflush_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	690b      	ldr	r3, [r1, #16]
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	b913      	cbnz	r3, 800608c <_fflush_r+0x10>
 8006086:	2500      	movs	r5, #0
 8006088:	4628      	mov	r0, r5
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	b118      	cbz	r0, 8006096 <_fflush_r+0x1a>
 800608e:	6a03      	ldr	r3, [r0, #32]
 8006090:	b90b      	cbnz	r3, 8006096 <_fflush_r+0x1a>
 8006092:	f7ff f861 	bl	8005158 <__sinit>
 8006096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f3      	beq.n	8006086 <_fflush_r+0xa>
 800609e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060a0:	07d0      	lsls	r0, r2, #31
 80060a2:	d404      	bmi.n	80060ae <_fflush_r+0x32>
 80060a4:	0599      	lsls	r1, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_fflush_r+0x32>
 80060a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060aa:	f7ff f8c1 	bl	8005230 <__retarget_lock_acquire_recursive>
 80060ae:	4628      	mov	r0, r5
 80060b0:	4621      	mov	r1, r4
 80060b2:	f7ff ff5d 	bl	8005f70 <__sflush_r>
 80060b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060b8:	07da      	lsls	r2, r3, #31
 80060ba:	4605      	mov	r5, r0
 80060bc:	d4e4      	bmi.n	8006088 <_fflush_r+0xc>
 80060be:	89a3      	ldrh	r3, [r4, #12]
 80060c0:	059b      	lsls	r3, r3, #22
 80060c2:	d4e1      	bmi.n	8006088 <_fflush_r+0xc>
 80060c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060c6:	f7ff f8b4 	bl	8005232 <__retarget_lock_release_recursive>
 80060ca:	e7dd      	b.n	8006088 <_fflush_r+0xc>

080060cc <__malloc_lock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	; (80060d4 <__malloc_lock+0x8>)
 80060ce:	f7ff b8af 	b.w	8005230 <__retarget_lock_acquire_recursive>
 80060d2:	bf00      	nop
 80060d4:	2000047c 	.word	0x2000047c

080060d8 <__malloc_unlock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_unlock+0x8>)
 80060da:	f7ff b8aa 	b.w	8005232 <__retarget_lock_release_recursive>
 80060de:	bf00      	nop
 80060e0:	2000047c 	.word	0x2000047c

080060e4 <_Balloc>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	69c6      	ldr	r6, [r0, #28]
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	b976      	cbnz	r6, 800610c <_Balloc+0x28>
 80060ee:	2010      	movs	r0, #16
 80060f0:	f7ff fe96 	bl	8005e20 <malloc>
 80060f4:	4602      	mov	r2, r0
 80060f6:	61e0      	str	r0, [r4, #28]
 80060f8:	b920      	cbnz	r0, 8006104 <_Balloc+0x20>
 80060fa:	4b18      	ldr	r3, [pc, #96]	; (800615c <_Balloc+0x78>)
 80060fc:	4818      	ldr	r0, [pc, #96]	; (8006160 <_Balloc+0x7c>)
 80060fe:	216b      	movs	r1, #107	; 0x6b
 8006100:	f000 fc14 	bl	800692c <__assert_func>
 8006104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006108:	6006      	str	r6, [r0, #0]
 800610a:	60c6      	str	r6, [r0, #12]
 800610c:	69e6      	ldr	r6, [r4, #28]
 800610e:	68f3      	ldr	r3, [r6, #12]
 8006110:	b183      	cbz	r3, 8006134 <_Balloc+0x50>
 8006112:	69e3      	ldr	r3, [r4, #28]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800611a:	b9b8      	cbnz	r0, 800614c <_Balloc+0x68>
 800611c:	2101      	movs	r1, #1
 800611e:	fa01 f605 	lsl.w	r6, r1, r5
 8006122:	1d72      	adds	r2, r6, #5
 8006124:	0092      	lsls	r2, r2, #2
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fc1e 	bl	8006968 <_calloc_r>
 800612c:	b160      	cbz	r0, 8006148 <_Balloc+0x64>
 800612e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006132:	e00e      	b.n	8006152 <_Balloc+0x6e>
 8006134:	2221      	movs	r2, #33	; 0x21
 8006136:	2104      	movs	r1, #4
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fc15 	bl	8006968 <_calloc_r>
 800613e:	69e3      	ldr	r3, [r4, #28]
 8006140:	60f0      	str	r0, [r6, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e4      	bne.n	8006112 <_Balloc+0x2e>
 8006148:	2000      	movs	r0, #0
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	6802      	ldr	r2, [r0, #0]
 800614e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006152:	2300      	movs	r3, #0
 8006154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006158:	e7f7      	b.n	800614a <_Balloc+0x66>
 800615a:	bf00      	nop
 800615c:	08007051 	.word	0x08007051
 8006160:	080070d1 	.word	0x080070d1

08006164 <_Bfree>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	69c6      	ldr	r6, [r0, #28]
 8006168:	4605      	mov	r5, r0
 800616a:	460c      	mov	r4, r1
 800616c:	b976      	cbnz	r6, 800618c <_Bfree+0x28>
 800616e:	2010      	movs	r0, #16
 8006170:	f7ff fe56 	bl	8005e20 <malloc>
 8006174:	4602      	mov	r2, r0
 8006176:	61e8      	str	r0, [r5, #28]
 8006178:	b920      	cbnz	r0, 8006184 <_Bfree+0x20>
 800617a:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <_Bfree+0x3c>)
 800617c:	4809      	ldr	r0, [pc, #36]	; (80061a4 <_Bfree+0x40>)
 800617e:	218f      	movs	r1, #143	; 0x8f
 8006180:	f000 fbd4 	bl	800692c <__assert_func>
 8006184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006188:	6006      	str	r6, [r0, #0]
 800618a:	60c6      	str	r6, [r0, #12]
 800618c:	b13c      	cbz	r4, 800619e <_Bfree+0x3a>
 800618e:	69eb      	ldr	r3, [r5, #28]
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006198:	6021      	str	r1, [r4, #0]
 800619a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	08007051 	.word	0x08007051
 80061a4:	080070d1 	.word	0x080070d1

080061a8 <__multadd>:
 80061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	690d      	ldr	r5, [r1, #16]
 80061ae:	4607      	mov	r7, r0
 80061b0:	460c      	mov	r4, r1
 80061b2:	461e      	mov	r6, r3
 80061b4:	f101 0c14 	add.w	ip, r1, #20
 80061b8:	2000      	movs	r0, #0
 80061ba:	f8dc 3000 	ldr.w	r3, [ip]
 80061be:	b299      	uxth	r1, r3
 80061c0:	fb02 6101 	mla	r1, r2, r1, r6
 80061c4:	0c1e      	lsrs	r6, r3, #16
 80061c6:	0c0b      	lsrs	r3, r1, #16
 80061c8:	fb02 3306 	mla	r3, r2, r6, r3
 80061cc:	b289      	uxth	r1, r1
 80061ce:	3001      	adds	r0, #1
 80061d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061d4:	4285      	cmp	r5, r0
 80061d6:	f84c 1b04 	str.w	r1, [ip], #4
 80061da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061de:	dcec      	bgt.n	80061ba <__multadd+0x12>
 80061e0:	b30e      	cbz	r6, 8006226 <__multadd+0x7e>
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	42ab      	cmp	r3, r5
 80061e6:	dc19      	bgt.n	800621c <__multadd+0x74>
 80061e8:	6861      	ldr	r1, [r4, #4]
 80061ea:	4638      	mov	r0, r7
 80061ec:	3101      	adds	r1, #1
 80061ee:	f7ff ff79 	bl	80060e4 <_Balloc>
 80061f2:	4680      	mov	r8, r0
 80061f4:	b928      	cbnz	r0, 8006202 <__multadd+0x5a>
 80061f6:	4602      	mov	r2, r0
 80061f8:	4b0c      	ldr	r3, [pc, #48]	; (800622c <__multadd+0x84>)
 80061fa:	480d      	ldr	r0, [pc, #52]	; (8006230 <__multadd+0x88>)
 80061fc:	21ba      	movs	r1, #186	; 0xba
 80061fe:	f000 fb95 	bl	800692c <__assert_func>
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	3202      	adds	r2, #2
 8006206:	f104 010c 	add.w	r1, r4, #12
 800620a:	0092      	lsls	r2, r2, #2
 800620c:	300c      	adds	r0, #12
 800620e:	f000 fb7f 	bl	8006910 <memcpy>
 8006212:	4621      	mov	r1, r4
 8006214:	4638      	mov	r0, r7
 8006216:	f7ff ffa5 	bl	8006164 <_Bfree>
 800621a:	4644      	mov	r4, r8
 800621c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006220:	3501      	adds	r5, #1
 8006222:	615e      	str	r6, [r3, #20]
 8006224:	6125      	str	r5, [r4, #16]
 8006226:	4620      	mov	r0, r4
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	080070c0 	.word	0x080070c0
 8006230:	080070d1 	.word	0x080070d1

08006234 <__hi0bits>:
 8006234:	0c03      	lsrs	r3, r0, #16
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	b9d3      	cbnz	r3, 8006270 <__hi0bits+0x3c>
 800623a:	0400      	lsls	r0, r0, #16
 800623c:	2310      	movs	r3, #16
 800623e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006242:	bf04      	itt	eq
 8006244:	0200      	lsleq	r0, r0, #8
 8006246:	3308      	addeq	r3, #8
 8006248:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800624c:	bf04      	itt	eq
 800624e:	0100      	lsleq	r0, r0, #4
 8006250:	3304      	addeq	r3, #4
 8006252:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006256:	bf04      	itt	eq
 8006258:	0080      	lsleq	r0, r0, #2
 800625a:	3302      	addeq	r3, #2
 800625c:	2800      	cmp	r0, #0
 800625e:	db05      	blt.n	800626c <__hi0bits+0x38>
 8006260:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006264:	f103 0301 	add.w	r3, r3, #1
 8006268:	bf08      	it	eq
 800626a:	2320      	moveq	r3, #32
 800626c:	4618      	mov	r0, r3
 800626e:	4770      	bx	lr
 8006270:	2300      	movs	r3, #0
 8006272:	e7e4      	b.n	800623e <__hi0bits+0xa>

08006274 <__lo0bits>:
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	f013 0207 	ands.w	r2, r3, #7
 800627a:	d00c      	beq.n	8006296 <__lo0bits+0x22>
 800627c:	07d9      	lsls	r1, r3, #31
 800627e:	d422      	bmi.n	80062c6 <__lo0bits+0x52>
 8006280:	079a      	lsls	r2, r3, #30
 8006282:	bf49      	itett	mi
 8006284:	085b      	lsrmi	r3, r3, #1
 8006286:	089b      	lsrpl	r3, r3, #2
 8006288:	6003      	strmi	r3, [r0, #0]
 800628a:	2201      	movmi	r2, #1
 800628c:	bf5c      	itt	pl
 800628e:	6003      	strpl	r3, [r0, #0]
 8006290:	2202      	movpl	r2, #2
 8006292:	4610      	mov	r0, r2
 8006294:	4770      	bx	lr
 8006296:	b299      	uxth	r1, r3
 8006298:	b909      	cbnz	r1, 800629e <__lo0bits+0x2a>
 800629a:	0c1b      	lsrs	r3, r3, #16
 800629c:	2210      	movs	r2, #16
 800629e:	b2d9      	uxtb	r1, r3
 80062a0:	b909      	cbnz	r1, 80062a6 <__lo0bits+0x32>
 80062a2:	3208      	adds	r2, #8
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	0719      	lsls	r1, r3, #28
 80062a8:	bf04      	itt	eq
 80062aa:	091b      	lsreq	r3, r3, #4
 80062ac:	3204      	addeq	r2, #4
 80062ae:	0799      	lsls	r1, r3, #30
 80062b0:	bf04      	itt	eq
 80062b2:	089b      	lsreq	r3, r3, #2
 80062b4:	3202      	addeq	r2, #2
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	d403      	bmi.n	80062c2 <__lo0bits+0x4e>
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	f102 0201 	add.w	r2, r2, #1
 80062c0:	d003      	beq.n	80062ca <__lo0bits+0x56>
 80062c2:	6003      	str	r3, [r0, #0]
 80062c4:	e7e5      	b.n	8006292 <__lo0bits+0x1e>
 80062c6:	2200      	movs	r2, #0
 80062c8:	e7e3      	b.n	8006292 <__lo0bits+0x1e>
 80062ca:	2220      	movs	r2, #32
 80062cc:	e7e1      	b.n	8006292 <__lo0bits+0x1e>
	...

080062d0 <__i2b>:
 80062d0:	b510      	push	{r4, lr}
 80062d2:	460c      	mov	r4, r1
 80062d4:	2101      	movs	r1, #1
 80062d6:	f7ff ff05 	bl	80060e4 <_Balloc>
 80062da:	4602      	mov	r2, r0
 80062dc:	b928      	cbnz	r0, 80062ea <__i2b+0x1a>
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <__i2b+0x24>)
 80062e0:	4805      	ldr	r0, [pc, #20]	; (80062f8 <__i2b+0x28>)
 80062e2:	f240 1145 	movw	r1, #325	; 0x145
 80062e6:	f000 fb21 	bl	800692c <__assert_func>
 80062ea:	2301      	movs	r3, #1
 80062ec:	6144      	str	r4, [r0, #20]
 80062ee:	6103      	str	r3, [r0, #16]
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	bf00      	nop
 80062f4:	080070c0 	.word	0x080070c0
 80062f8:	080070d1 	.word	0x080070d1

080062fc <__multiply>:
 80062fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	4691      	mov	r9, r2
 8006302:	690a      	ldr	r2, [r1, #16]
 8006304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	bfb8      	it	lt
 800630c:	460b      	movlt	r3, r1
 800630e:	460c      	mov	r4, r1
 8006310:	bfbc      	itt	lt
 8006312:	464c      	movlt	r4, r9
 8006314:	4699      	movlt	r9, r3
 8006316:	6927      	ldr	r7, [r4, #16]
 8006318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	6861      	ldr	r1, [r4, #4]
 8006320:	eb07 060a 	add.w	r6, r7, sl
 8006324:	42b3      	cmp	r3, r6
 8006326:	b085      	sub	sp, #20
 8006328:	bfb8      	it	lt
 800632a:	3101      	addlt	r1, #1
 800632c:	f7ff feda 	bl	80060e4 <_Balloc>
 8006330:	b930      	cbnz	r0, 8006340 <__multiply+0x44>
 8006332:	4602      	mov	r2, r0
 8006334:	4b44      	ldr	r3, [pc, #272]	; (8006448 <__multiply+0x14c>)
 8006336:	4845      	ldr	r0, [pc, #276]	; (800644c <__multiply+0x150>)
 8006338:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800633c:	f000 faf6 	bl	800692c <__assert_func>
 8006340:	f100 0514 	add.w	r5, r0, #20
 8006344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006348:	462b      	mov	r3, r5
 800634a:	2200      	movs	r2, #0
 800634c:	4543      	cmp	r3, r8
 800634e:	d321      	bcc.n	8006394 <__multiply+0x98>
 8006350:	f104 0314 	add.w	r3, r4, #20
 8006354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006358:	f109 0314 	add.w	r3, r9, #20
 800635c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006360:	9202      	str	r2, [sp, #8]
 8006362:	1b3a      	subs	r2, r7, r4
 8006364:	3a15      	subs	r2, #21
 8006366:	f022 0203 	bic.w	r2, r2, #3
 800636a:	3204      	adds	r2, #4
 800636c:	f104 0115 	add.w	r1, r4, #21
 8006370:	428f      	cmp	r7, r1
 8006372:	bf38      	it	cc
 8006374:	2204      	movcc	r2, #4
 8006376:	9201      	str	r2, [sp, #4]
 8006378:	9a02      	ldr	r2, [sp, #8]
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d80c      	bhi.n	800639a <__multiply+0x9e>
 8006380:	2e00      	cmp	r6, #0
 8006382:	dd03      	ble.n	800638c <__multiply+0x90>
 8006384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006388:	2b00      	cmp	r3, #0
 800638a:	d05b      	beq.n	8006444 <__multiply+0x148>
 800638c:	6106      	str	r6, [r0, #16]
 800638e:	b005      	add	sp, #20
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	f843 2b04 	str.w	r2, [r3], #4
 8006398:	e7d8      	b.n	800634c <__multiply+0x50>
 800639a:	f8b3 a000 	ldrh.w	sl, [r3]
 800639e:	f1ba 0f00 	cmp.w	sl, #0
 80063a2:	d024      	beq.n	80063ee <__multiply+0xf2>
 80063a4:	f104 0e14 	add.w	lr, r4, #20
 80063a8:	46a9      	mov	r9, r5
 80063aa:	f04f 0c00 	mov.w	ip, #0
 80063ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063b2:	f8d9 1000 	ldr.w	r1, [r9]
 80063b6:	fa1f fb82 	uxth.w	fp, r2
 80063ba:	b289      	uxth	r1, r1
 80063bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80063c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063c4:	f8d9 2000 	ldr.w	r2, [r9]
 80063c8:	4461      	add	r1, ip
 80063ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80063d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063d6:	b289      	uxth	r1, r1
 80063d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063dc:	4577      	cmp	r7, lr
 80063de:	f849 1b04 	str.w	r1, [r9], #4
 80063e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063e6:	d8e2      	bhi.n	80063ae <__multiply+0xb2>
 80063e8:	9a01      	ldr	r2, [sp, #4]
 80063ea:	f845 c002 	str.w	ip, [r5, r2]
 80063ee:	9a03      	ldr	r2, [sp, #12]
 80063f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063f4:	3304      	adds	r3, #4
 80063f6:	f1b9 0f00 	cmp.w	r9, #0
 80063fa:	d021      	beq.n	8006440 <__multiply+0x144>
 80063fc:	6829      	ldr	r1, [r5, #0]
 80063fe:	f104 0c14 	add.w	ip, r4, #20
 8006402:	46ae      	mov	lr, r5
 8006404:	f04f 0a00 	mov.w	sl, #0
 8006408:	f8bc b000 	ldrh.w	fp, [ip]
 800640c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006410:	fb09 220b 	mla	r2, r9, fp, r2
 8006414:	4452      	add	r2, sl
 8006416:	b289      	uxth	r1, r1
 8006418:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800641c:	f84e 1b04 	str.w	r1, [lr], #4
 8006420:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006424:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006428:	f8be 1000 	ldrh.w	r1, [lr]
 800642c:	fb09 110a 	mla	r1, r9, sl, r1
 8006430:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006434:	4567      	cmp	r7, ip
 8006436:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800643a:	d8e5      	bhi.n	8006408 <__multiply+0x10c>
 800643c:	9a01      	ldr	r2, [sp, #4]
 800643e:	50a9      	str	r1, [r5, r2]
 8006440:	3504      	adds	r5, #4
 8006442:	e799      	b.n	8006378 <__multiply+0x7c>
 8006444:	3e01      	subs	r6, #1
 8006446:	e79b      	b.n	8006380 <__multiply+0x84>
 8006448:	080070c0 	.word	0x080070c0
 800644c:	080070d1 	.word	0x080070d1

08006450 <__pow5mult>:
 8006450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006454:	4615      	mov	r5, r2
 8006456:	f012 0203 	ands.w	r2, r2, #3
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	d007      	beq.n	8006470 <__pow5mult+0x20>
 8006460:	4c25      	ldr	r4, [pc, #148]	; (80064f8 <__pow5mult+0xa8>)
 8006462:	3a01      	subs	r2, #1
 8006464:	2300      	movs	r3, #0
 8006466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800646a:	f7ff fe9d 	bl	80061a8 <__multadd>
 800646e:	4607      	mov	r7, r0
 8006470:	10ad      	asrs	r5, r5, #2
 8006472:	d03d      	beq.n	80064f0 <__pow5mult+0xa0>
 8006474:	69f4      	ldr	r4, [r6, #28]
 8006476:	b97c      	cbnz	r4, 8006498 <__pow5mult+0x48>
 8006478:	2010      	movs	r0, #16
 800647a:	f7ff fcd1 	bl	8005e20 <malloc>
 800647e:	4602      	mov	r2, r0
 8006480:	61f0      	str	r0, [r6, #28]
 8006482:	b928      	cbnz	r0, 8006490 <__pow5mult+0x40>
 8006484:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <__pow5mult+0xac>)
 8006486:	481e      	ldr	r0, [pc, #120]	; (8006500 <__pow5mult+0xb0>)
 8006488:	f240 11b3 	movw	r1, #435	; 0x1b3
 800648c:	f000 fa4e 	bl	800692c <__assert_func>
 8006490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006494:	6004      	str	r4, [r0, #0]
 8006496:	60c4      	str	r4, [r0, #12]
 8006498:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800649c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064a0:	b94c      	cbnz	r4, 80064b6 <__pow5mult+0x66>
 80064a2:	f240 2171 	movw	r1, #625	; 0x271
 80064a6:	4630      	mov	r0, r6
 80064a8:	f7ff ff12 	bl	80062d0 <__i2b>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80064b2:	4604      	mov	r4, r0
 80064b4:	6003      	str	r3, [r0, #0]
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	07eb      	lsls	r3, r5, #31
 80064bc:	d50a      	bpl.n	80064d4 <__pow5mult+0x84>
 80064be:	4639      	mov	r1, r7
 80064c0:	4622      	mov	r2, r4
 80064c2:	4630      	mov	r0, r6
 80064c4:	f7ff ff1a 	bl	80062fc <__multiply>
 80064c8:	4639      	mov	r1, r7
 80064ca:	4680      	mov	r8, r0
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7ff fe49 	bl	8006164 <_Bfree>
 80064d2:	4647      	mov	r7, r8
 80064d4:	106d      	asrs	r5, r5, #1
 80064d6:	d00b      	beq.n	80064f0 <__pow5mult+0xa0>
 80064d8:	6820      	ldr	r0, [r4, #0]
 80064da:	b938      	cbnz	r0, 80064ec <__pow5mult+0x9c>
 80064dc:	4622      	mov	r2, r4
 80064de:	4621      	mov	r1, r4
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff ff0b 	bl	80062fc <__multiply>
 80064e6:	6020      	str	r0, [r4, #0]
 80064e8:	f8c0 9000 	str.w	r9, [r0]
 80064ec:	4604      	mov	r4, r0
 80064ee:	e7e4      	b.n	80064ba <__pow5mult+0x6a>
 80064f0:	4638      	mov	r0, r7
 80064f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f6:	bf00      	nop
 80064f8:	08007220 	.word	0x08007220
 80064fc:	08007051 	.word	0x08007051
 8006500:	080070d1 	.word	0x080070d1

08006504 <__lshift>:
 8006504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	460c      	mov	r4, r1
 800650a:	6849      	ldr	r1, [r1, #4]
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	4607      	mov	r7, r0
 8006516:	4691      	mov	r9, r2
 8006518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800651c:	f108 0601 	add.w	r6, r8, #1
 8006520:	42b3      	cmp	r3, r6
 8006522:	db0b      	blt.n	800653c <__lshift+0x38>
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff fddd 	bl	80060e4 <_Balloc>
 800652a:	4605      	mov	r5, r0
 800652c:	b948      	cbnz	r0, 8006542 <__lshift+0x3e>
 800652e:	4602      	mov	r2, r0
 8006530:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <__lshift+0xd0>)
 8006532:	4829      	ldr	r0, [pc, #164]	; (80065d8 <__lshift+0xd4>)
 8006534:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006538:	f000 f9f8 	bl	800692c <__assert_func>
 800653c:	3101      	adds	r1, #1
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	e7ee      	b.n	8006520 <__lshift+0x1c>
 8006542:	2300      	movs	r3, #0
 8006544:	f100 0114 	add.w	r1, r0, #20
 8006548:	f100 0210 	add.w	r2, r0, #16
 800654c:	4618      	mov	r0, r3
 800654e:	4553      	cmp	r3, sl
 8006550:	db33      	blt.n	80065ba <__lshift+0xb6>
 8006552:	6920      	ldr	r0, [r4, #16]
 8006554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006558:	f104 0314 	add.w	r3, r4, #20
 800655c:	f019 091f 	ands.w	r9, r9, #31
 8006560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006564:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006568:	d02b      	beq.n	80065c2 <__lshift+0xbe>
 800656a:	f1c9 0e20 	rsb	lr, r9, #32
 800656e:	468a      	mov	sl, r1
 8006570:	2200      	movs	r2, #0
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	fa00 f009 	lsl.w	r0, r0, r9
 8006578:	4310      	orrs	r0, r2
 800657a:	f84a 0b04 	str.w	r0, [sl], #4
 800657e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006582:	459c      	cmp	ip, r3
 8006584:	fa22 f20e 	lsr.w	r2, r2, lr
 8006588:	d8f3      	bhi.n	8006572 <__lshift+0x6e>
 800658a:	ebac 0304 	sub.w	r3, ip, r4
 800658e:	3b15      	subs	r3, #21
 8006590:	f023 0303 	bic.w	r3, r3, #3
 8006594:	3304      	adds	r3, #4
 8006596:	f104 0015 	add.w	r0, r4, #21
 800659a:	4584      	cmp	ip, r0
 800659c:	bf38      	it	cc
 800659e:	2304      	movcc	r3, #4
 80065a0:	50ca      	str	r2, [r1, r3]
 80065a2:	b10a      	cbz	r2, 80065a8 <__lshift+0xa4>
 80065a4:	f108 0602 	add.w	r6, r8, #2
 80065a8:	3e01      	subs	r6, #1
 80065aa:	4638      	mov	r0, r7
 80065ac:	612e      	str	r6, [r5, #16]
 80065ae:	4621      	mov	r1, r4
 80065b0:	f7ff fdd8 	bl	8006164 <_Bfree>
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80065be:	3301      	adds	r3, #1
 80065c0:	e7c5      	b.n	800654e <__lshift+0x4a>
 80065c2:	3904      	subs	r1, #4
 80065c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065cc:	459c      	cmp	ip, r3
 80065ce:	d8f9      	bhi.n	80065c4 <__lshift+0xc0>
 80065d0:	e7ea      	b.n	80065a8 <__lshift+0xa4>
 80065d2:	bf00      	nop
 80065d4:	080070c0 	.word	0x080070c0
 80065d8:	080070d1 	.word	0x080070d1

080065dc <__mcmp>:
 80065dc:	b530      	push	{r4, r5, lr}
 80065de:	6902      	ldr	r2, [r0, #16]
 80065e0:	690c      	ldr	r4, [r1, #16]
 80065e2:	1b12      	subs	r2, r2, r4
 80065e4:	d10e      	bne.n	8006604 <__mcmp+0x28>
 80065e6:	f100 0314 	add.w	r3, r0, #20
 80065ea:	3114      	adds	r1, #20
 80065ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80065f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065fc:	42a5      	cmp	r5, r4
 80065fe:	d003      	beq.n	8006608 <__mcmp+0x2c>
 8006600:	d305      	bcc.n	800660e <__mcmp+0x32>
 8006602:	2201      	movs	r2, #1
 8006604:	4610      	mov	r0, r2
 8006606:	bd30      	pop	{r4, r5, pc}
 8006608:	4283      	cmp	r3, r0
 800660a:	d3f3      	bcc.n	80065f4 <__mcmp+0x18>
 800660c:	e7fa      	b.n	8006604 <__mcmp+0x28>
 800660e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006612:	e7f7      	b.n	8006604 <__mcmp+0x28>

08006614 <__mdiff>:
 8006614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	460c      	mov	r4, r1
 800661a:	4606      	mov	r6, r0
 800661c:	4611      	mov	r1, r2
 800661e:	4620      	mov	r0, r4
 8006620:	4690      	mov	r8, r2
 8006622:	f7ff ffdb 	bl	80065dc <__mcmp>
 8006626:	1e05      	subs	r5, r0, #0
 8006628:	d110      	bne.n	800664c <__mdiff+0x38>
 800662a:	4629      	mov	r1, r5
 800662c:	4630      	mov	r0, r6
 800662e:	f7ff fd59 	bl	80060e4 <_Balloc>
 8006632:	b930      	cbnz	r0, 8006642 <__mdiff+0x2e>
 8006634:	4b3a      	ldr	r3, [pc, #232]	; (8006720 <__mdiff+0x10c>)
 8006636:	4602      	mov	r2, r0
 8006638:	f240 2137 	movw	r1, #567	; 0x237
 800663c:	4839      	ldr	r0, [pc, #228]	; (8006724 <__mdiff+0x110>)
 800663e:	f000 f975 	bl	800692c <__assert_func>
 8006642:	2301      	movs	r3, #1
 8006644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664c:	bfa4      	itt	ge
 800664e:	4643      	movge	r3, r8
 8006650:	46a0      	movge	r8, r4
 8006652:	4630      	mov	r0, r6
 8006654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006658:	bfa6      	itte	ge
 800665a:	461c      	movge	r4, r3
 800665c:	2500      	movge	r5, #0
 800665e:	2501      	movlt	r5, #1
 8006660:	f7ff fd40 	bl	80060e4 <_Balloc>
 8006664:	b920      	cbnz	r0, 8006670 <__mdiff+0x5c>
 8006666:	4b2e      	ldr	r3, [pc, #184]	; (8006720 <__mdiff+0x10c>)
 8006668:	4602      	mov	r2, r0
 800666a:	f240 2145 	movw	r1, #581	; 0x245
 800666e:	e7e5      	b.n	800663c <__mdiff+0x28>
 8006670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006674:	6926      	ldr	r6, [r4, #16]
 8006676:	60c5      	str	r5, [r0, #12]
 8006678:	f104 0914 	add.w	r9, r4, #20
 800667c:	f108 0514 	add.w	r5, r8, #20
 8006680:	f100 0e14 	add.w	lr, r0, #20
 8006684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800668c:	f108 0210 	add.w	r2, r8, #16
 8006690:	46f2      	mov	sl, lr
 8006692:	2100      	movs	r1, #0
 8006694:	f859 3b04 	ldr.w	r3, [r9], #4
 8006698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800669c:	fa11 f88b 	uxtah	r8, r1, fp
 80066a0:	b299      	uxth	r1, r3
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	eba8 0801 	sub.w	r8, r8, r1
 80066a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066b0:	fa1f f888 	uxth.w	r8, r8
 80066b4:	1419      	asrs	r1, r3, #16
 80066b6:	454e      	cmp	r6, r9
 80066b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066bc:	f84a 3b04 	str.w	r3, [sl], #4
 80066c0:	d8e8      	bhi.n	8006694 <__mdiff+0x80>
 80066c2:	1b33      	subs	r3, r6, r4
 80066c4:	3b15      	subs	r3, #21
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	3304      	adds	r3, #4
 80066cc:	3415      	adds	r4, #21
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	bf38      	it	cc
 80066d2:	2304      	movcc	r3, #4
 80066d4:	441d      	add	r5, r3
 80066d6:	4473      	add	r3, lr
 80066d8:	469e      	mov	lr, r3
 80066da:	462e      	mov	r6, r5
 80066dc:	4566      	cmp	r6, ip
 80066de:	d30e      	bcc.n	80066fe <__mdiff+0xea>
 80066e0:	f10c 0203 	add.w	r2, ip, #3
 80066e4:	1b52      	subs	r2, r2, r5
 80066e6:	f022 0203 	bic.w	r2, r2, #3
 80066ea:	3d03      	subs	r5, #3
 80066ec:	45ac      	cmp	ip, r5
 80066ee:	bf38      	it	cc
 80066f0:	2200      	movcc	r2, #0
 80066f2:	4413      	add	r3, r2
 80066f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80066f8:	b17a      	cbz	r2, 800671a <__mdiff+0x106>
 80066fa:	6107      	str	r7, [r0, #16]
 80066fc:	e7a4      	b.n	8006648 <__mdiff+0x34>
 80066fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8006702:	fa11 f288 	uxtah	r2, r1, r8
 8006706:	1414      	asrs	r4, r2, #16
 8006708:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800670c:	b292      	uxth	r2, r2
 800670e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006712:	f84e 2b04 	str.w	r2, [lr], #4
 8006716:	1421      	asrs	r1, r4, #16
 8006718:	e7e0      	b.n	80066dc <__mdiff+0xc8>
 800671a:	3f01      	subs	r7, #1
 800671c:	e7ea      	b.n	80066f4 <__mdiff+0xe0>
 800671e:	bf00      	nop
 8006720:	080070c0 	.word	0x080070c0
 8006724:	080070d1 	.word	0x080070d1

08006728 <__d2b>:
 8006728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800672c:	460f      	mov	r7, r1
 800672e:	2101      	movs	r1, #1
 8006730:	ec59 8b10 	vmov	r8, r9, d0
 8006734:	4616      	mov	r6, r2
 8006736:	f7ff fcd5 	bl	80060e4 <_Balloc>
 800673a:	4604      	mov	r4, r0
 800673c:	b930      	cbnz	r0, 800674c <__d2b+0x24>
 800673e:	4602      	mov	r2, r0
 8006740:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <__d2b+0xac>)
 8006742:	4825      	ldr	r0, [pc, #148]	; (80067d8 <__d2b+0xb0>)
 8006744:	f240 310f 	movw	r1, #783	; 0x30f
 8006748:	f000 f8f0 	bl	800692c <__assert_func>
 800674c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006754:	bb2d      	cbnz	r5, 80067a2 <__d2b+0x7a>
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	f1b8 0300 	subs.w	r3, r8, #0
 800675c:	d026      	beq.n	80067ac <__d2b+0x84>
 800675e:	4668      	mov	r0, sp
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	f7ff fd87 	bl	8006274 <__lo0bits>
 8006766:	e9dd 1200 	ldrd	r1, r2, [sp]
 800676a:	b1e8      	cbz	r0, 80067a8 <__d2b+0x80>
 800676c:	f1c0 0320 	rsb	r3, r0, #32
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	430b      	orrs	r3, r1
 8006776:	40c2      	lsrs	r2, r0
 8006778:	6163      	str	r3, [r4, #20]
 800677a:	9201      	str	r2, [sp, #4]
 800677c:	9b01      	ldr	r3, [sp, #4]
 800677e:	61a3      	str	r3, [r4, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	bf14      	ite	ne
 8006784:	2202      	movne	r2, #2
 8006786:	2201      	moveq	r2, #1
 8006788:	6122      	str	r2, [r4, #16]
 800678a:	b1bd      	cbz	r5, 80067bc <__d2b+0x94>
 800678c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006790:	4405      	add	r5, r0
 8006792:	603d      	str	r5, [r7, #0]
 8006794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006798:	6030      	str	r0, [r6, #0]
 800679a:	4620      	mov	r0, r4
 800679c:	b003      	add	sp, #12
 800679e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067a6:	e7d6      	b.n	8006756 <__d2b+0x2e>
 80067a8:	6161      	str	r1, [r4, #20]
 80067aa:	e7e7      	b.n	800677c <__d2b+0x54>
 80067ac:	a801      	add	r0, sp, #4
 80067ae:	f7ff fd61 	bl	8006274 <__lo0bits>
 80067b2:	9b01      	ldr	r3, [sp, #4]
 80067b4:	6163      	str	r3, [r4, #20]
 80067b6:	3020      	adds	r0, #32
 80067b8:	2201      	movs	r2, #1
 80067ba:	e7e5      	b.n	8006788 <__d2b+0x60>
 80067bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067c4:	6038      	str	r0, [r7, #0]
 80067c6:	6918      	ldr	r0, [r3, #16]
 80067c8:	f7ff fd34 	bl	8006234 <__hi0bits>
 80067cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067d0:	e7e2      	b.n	8006798 <__d2b+0x70>
 80067d2:	bf00      	nop
 80067d4:	080070c0 	.word	0x080070c0
 80067d8:	080070d1 	.word	0x080070d1

080067dc <__sread>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	460c      	mov	r4, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	f000 f860 	bl	80068a8 <_read_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	bfab      	itete	ge
 80067ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ee:	89a3      	ldrhlt	r3, [r4, #12]
 80067f0:	181b      	addge	r3, r3, r0
 80067f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067f6:	bfac      	ite	ge
 80067f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067fa:	81a3      	strhlt	r3, [r4, #12]
 80067fc:	bd10      	pop	{r4, pc}

080067fe <__swrite>:
 80067fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	461f      	mov	r7, r3
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	05db      	lsls	r3, r3, #23
 8006808:	4605      	mov	r5, r0
 800680a:	460c      	mov	r4, r1
 800680c:	4616      	mov	r6, r2
 800680e:	d505      	bpl.n	800681c <__swrite+0x1e>
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	2302      	movs	r3, #2
 8006816:	2200      	movs	r2, #0
 8006818:	f000 f834 	bl	8006884 <_lseek_r>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	4632      	mov	r2, r6
 800682a:	463b      	mov	r3, r7
 800682c:	4628      	mov	r0, r5
 800682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	f000 b85b 	b.w	80068ec <_write_r>

08006836 <__sseek>:
 8006836:	b510      	push	{r4, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 f821 	bl	8006884 <_lseek_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	bf15      	itete	ne
 8006848:	6560      	strne	r0, [r4, #84]	; 0x54
 800684a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800684e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006852:	81a3      	strheq	r3, [r4, #12]
 8006854:	bf18      	it	ne
 8006856:	81a3      	strhne	r3, [r4, #12]
 8006858:	bd10      	pop	{r4, pc}

0800685a <__sclose>:
 800685a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685e:	f000 b801 	b.w	8006864 <_close_r>
	...

08006864 <_close_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	; (8006880 <_close_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa fa6b 	bl	8000d4a <_close>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_close_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_close_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20000488 	.word	0x20000488

08006884 <_lseek_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d07      	ldr	r5, [pc, #28]	; (80068a4 <_lseek_r+0x20>)
 8006888:	4604      	mov	r4, r0
 800688a:	4608      	mov	r0, r1
 800688c:	4611      	mov	r1, r2
 800688e:	2200      	movs	r2, #0
 8006890:	602a      	str	r2, [r5, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	f7fa fa80 	bl	8000d98 <_lseek>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d102      	bne.n	80068a2 <_lseek_r+0x1e>
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	b103      	cbz	r3, 80068a2 <_lseek_r+0x1e>
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	bd38      	pop	{r3, r4, r5, pc}
 80068a4:	20000488 	.word	0x20000488

080068a8 <_read_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	; (80068c8 <_read_r+0x20>)
 80068ac:	4604      	mov	r4, r0
 80068ae:	4608      	mov	r0, r1
 80068b0:	4611      	mov	r1, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	602a      	str	r2, [r5, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f7fa fa0e 	bl	8000cd8 <_read>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_read_r+0x1e>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_read_r+0x1e>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20000488 	.word	0x20000488

080068cc <_sbrk_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d06      	ldr	r5, [pc, #24]	; (80068e8 <_sbrk_r+0x1c>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	602b      	str	r3, [r5, #0]
 80068d8:	f7fa fa6c 	bl	8000db4 <_sbrk>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_sbrk_r+0x1a>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_sbrk_r+0x1a>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	20000488 	.word	0x20000488

080068ec <_write_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d07      	ldr	r5, [pc, #28]	; (800690c <_write_r+0x20>)
 80068f0:	4604      	mov	r4, r0
 80068f2:	4608      	mov	r0, r1
 80068f4:	4611      	mov	r1, r2
 80068f6:	2200      	movs	r2, #0
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f7fa fa09 	bl	8000d12 <_write>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <_write_r+0x1e>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	b103      	cbz	r3, 800690a <_write_r+0x1e>
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	bd38      	pop	{r3, r4, r5, pc}
 800690c:	20000488 	.word	0x20000488

08006910 <memcpy>:
 8006910:	440a      	add	r2, r1
 8006912:	4291      	cmp	r1, r2
 8006914:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006918:	d100      	bne.n	800691c <memcpy+0xc>
 800691a:	4770      	bx	lr
 800691c:	b510      	push	{r4, lr}
 800691e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006926:	4291      	cmp	r1, r2
 8006928:	d1f9      	bne.n	800691e <memcpy+0xe>
 800692a:	bd10      	pop	{r4, pc}

0800692c <__assert_func>:
 800692c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800692e:	4614      	mov	r4, r2
 8006930:	461a      	mov	r2, r3
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <__assert_func+0x2c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4605      	mov	r5, r0
 8006938:	68d8      	ldr	r0, [r3, #12]
 800693a:	b14c      	cbz	r4, 8006950 <__assert_func+0x24>
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <__assert_func+0x30>)
 800693e:	9100      	str	r1, [sp, #0]
 8006940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006944:	4906      	ldr	r1, [pc, #24]	; (8006960 <__assert_func+0x34>)
 8006946:	462b      	mov	r3, r5
 8006948:	f000 f882 	bl	8006a50 <fiprintf>
 800694c:	f000 f89f 	bl	8006a8e <abort>
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <__assert_func+0x38>)
 8006952:	461c      	mov	r4, r3
 8006954:	e7f3      	b.n	800693e <__assert_func+0x12>
 8006956:	bf00      	nop
 8006958:	20000068 	.word	0x20000068
 800695c:	08007337 	.word	0x08007337
 8006960:	08007344 	.word	0x08007344
 8006964:	08007372 	.word	0x08007372

08006968 <_calloc_r>:
 8006968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800696a:	fba1 2402 	umull	r2, r4, r1, r2
 800696e:	b94c      	cbnz	r4, 8006984 <_calloc_r+0x1c>
 8006970:	4611      	mov	r1, r2
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	f7ff fa7c 	bl	8005e70 <_malloc_r>
 8006978:	9a01      	ldr	r2, [sp, #4]
 800697a:	4605      	mov	r5, r0
 800697c:	b930      	cbnz	r0, 800698c <_calloc_r+0x24>
 800697e:	4628      	mov	r0, r5
 8006980:	b003      	add	sp, #12
 8006982:	bd30      	pop	{r4, r5, pc}
 8006984:	220c      	movs	r2, #12
 8006986:	6002      	str	r2, [r0, #0]
 8006988:	2500      	movs	r5, #0
 800698a:	e7f8      	b.n	800697e <_calloc_r+0x16>
 800698c:	4621      	mov	r1, r4
 800698e:	f7fe fc19 	bl	80051c4 <memset>
 8006992:	e7f4      	b.n	800697e <_calloc_r+0x16>

08006994 <_free_r>:
 8006994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006996:	2900      	cmp	r1, #0
 8006998:	d044      	beq.n	8006a24 <_free_r+0x90>
 800699a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699e:	9001      	str	r0, [sp, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f1a1 0404 	sub.w	r4, r1, #4
 80069a6:	bfb8      	it	lt
 80069a8:	18e4      	addlt	r4, r4, r3
 80069aa:	f7ff fb8f 	bl	80060cc <__malloc_lock>
 80069ae:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <_free_r+0x94>)
 80069b0:	9801      	ldr	r0, [sp, #4]
 80069b2:	6813      	ldr	r3, [r2, #0]
 80069b4:	b933      	cbnz	r3, 80069c4 <_free_r+0x30>
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	6014      	str	r4, [r2, #0]
 80069ba:	b003      	add	sp, #12
 80069bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069c0:	f7ff bb8a 	b.w	80060d8 <__malloc_unlock>
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	d908      	bls.n	80069da <_free_r+0x46>
 80069c8:	6825      	ldr	r5, [r4, #0]
 80069ca:	1961      	adds	r1, r4, r5
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf01      	itttt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	1949      	addeq	r1, r1, r5
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	e7ed      	b.n	80069b6 <_free_r+0x22>
 80069da:	461a      	mov	r2, r3
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	b10b      	cbz	r3, 80069e4 <_free_r+0x50>
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d9fa      	bls.n	80069da <_free_r+0x46>
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	1855      	adds	r5, r2, r1
 80069e8:	42a5      	cmp	r5, r4
 80069ea:	d10b      	bne.n	8006a04 <_free_r+0x70>
 80069ec:	6824      	ldr	r4, [r4, #0]
 80069ee:	4421      	add	r1, r4
 80069f0:	1854      	adds	r4, r2, r1
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	6011      	str	r1, [r2, #0]
 80069f6:	d1e0      	bne.n	80069ba <_free_r+0x26>
 80069f8:	681c      	ldr	r4, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	6053      	str	r3, [r2, #4]
 80069fe:	440c      	add	r4, r1
 8006a00:	6014      	str	r4, [r2, #0]
 8006a02:	e7da      	b.n	80069ba <_free_r+0x26>
 8006a04:	d902      	bls.n	8006a0c <_free_r+0x78>
 8006a06:	230c      	movs	r3, #12
 8006a08:	6003      	str	r3, [r0, #0]
 8006a0a:	e7d6      	b.n	80069ba <_free_r+0x26>
 8006a0c:	6825      	ldr	r5, [r4, #0]
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	428b      	cmp	r3, r1
 8006a12:	bf04      	itt	eq
 8006a14:	6819      	ldreq	r1, [r3, #0]
 8006a16:	685b      	ldreq	r3, [r3, #4]
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	bf04      	itt	eq
 8006a1c:	1949      	addeq	r1, r1, r5
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	6054      	str	r4, [r2, #4]
 8006a22:	e7ca      	b.n	80069ba <_free_r+0x26>
 8006a24:	b003      	add	sp, #12
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	20000480 	.word	0x20000480

08006a2c <__ascii_mbtowc>:
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	b901      	cbnz	r1, 8006a32 <__ascii_mbtowc+0x6>
 8006a30:	a901      	add	r1, sp, #4
 8006a32:	b142      	cbz	r2, 8006a46 <__ascii_mbtowc+0x1a>
 8006a34:	b14b      	cbz	r3, 8006a4a <__ascii_mbtowc+0x1e>
 8006a36:	7813      	ldrb	r3, [r2, #0]
 8006a38:	600b      	str	r3, [r1, #0]
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	1e10      	subs	r0, r2, #0
 8006a3e:	bf18      	it	ne
 8006a40:	2001      	movne	r0, #1
 8006a42:	b002      	add	sp, #8
 8006a44:	4770      	bx	lr
 8006a46:	4610      	mov	r0, r2
 8006a48:	e7fb      	b.n	8006a42 <__ascii_mbtowc+0x16>
 8006a4a:	f06f 0001 	mvn.w	r0, #1
 8006a4e:	e7f8      	b.n	8006a42 <__ascii_mbtowc+0x16>

08006a50 <fiprintf>:
 8006a50:	b40e      	push	{r1, r2, r3}
 8006a52:	b503      	push	{r0, r1, lr}
 8006a54:	4601      	mov	r1, r0
 8006a56:	ab03      	add	r3, sp, #12
 8006a58:	4805      	ldr	r0, [pc, #20]	; (8006a70 <fiprintf+0x20>)
 8006a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a5e:	6800      	ldr	r0, [r0, #0]
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	f000 f845 	bl	8006af0 <_vfiprintf_r>
 8006a66:	b002      	add	sp, #8
 8006a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	4770      	bx	lr
 8006a70:	20000068 	.word	0x20000068

08006a74 <__ascii_wctomb>:
 8006a74:	b149      	cbz	r1, 8006a8a <__ascii_wctomb+0x16>
 8006a76:	2aff      	cmp	r2, #255	; 0xff
 8006a78:	bf85      	ittet	hi
 8006a7a:	238a      	movhi	r3, #138	; 0x8a
 8006a7c:	6003      	strhi	r3, [r0, #0]
 8006a7e:	700a      	strbls	r2, [r1, #0]
 8006a80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006a84:	bf98      	it	ls
 8006a86:	2001      	movls	r0, #1
 8006a88:	4770      	bx	lr
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4770      	bx	lr

08006a8e <abort>:
 8006a8e:	b508      	push	{r3, lr}
 8006a90:	2006      	movs	r0, #6
 8006a92:	f000 fa89 	bl	8006fa8 <raise>
 8006a96:	2001      	movs	r0, #1
 8006a98:	f7fa f914 	bl	8000cc4 <_exit>

08006a9c <__sfputc_r>:
 8006a9c:	6893      	ldr	r3, [r2, #8]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	b410      	push	{r4}
 8006aa4:	6093      	str	r3, [r2, #8]
 8006aa6:	da08      	bge.n	8006aba <__sfputc_r+0x1e>
 8006aa8:	6994      	ldr	r4, [r2, #24]
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	db01      	blt.n	8006ab2 <__sfputc_r+0x16>
 8006aae:	290a      	cmp	r1, #10
 8006ab0:	d103      	bne.n	8006aba <__sfputc_r+0x1e>
 8006ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab6:	f000 b935 	b.w	8006d24 <__swbuf_r>
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	1c58      	adds	r0, r3, #1
 8006abe:	6010      	str	r0, [r2, #0]
 8006ac0:	7019      	strb	r1, [r3, #0]
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <__sfputs_r>:
 8006aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006acc:	4606      	mov	r6, r0
 8006ace:	460f      	mov	r7, r1
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	18d5      	adds	r5, r2, r3
 8006ad4:	42ac      	cmp	r4, r5
 8006ad6:	d101      	bne.n	8006adc <__sfputs_r+0x12>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	e007      	b.n	8006aec <__sfputs_r+0x22>
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	463a      	mov	r2, r7
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ffda 	bl	8006a9c <__sfputc_r>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d1f3      	bne.n	8006ad4 <__sfputs_r+0xa>
 8006aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006af0 <_vfiprintf_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	460d      	mov	r5, r1
 8006af6:	b09d      	sub	sp, #116	; 0x74
 8006af8:	4614      	mov	r4, r2
 8006afa:	4698      	mov	r8, r3
 8006afc:	4606      	mov	r6, r0
 8006afe:	b118      	cbz	r0, 8006b08 <_vfiprintf_r+0x18>
 8006b00:	6a03      	ldr	r3, [r0, #32]
 8006b02:	b90b      	cbnz	r3, 8006b08 <_vfiprintf_r+0x18>
 8006b04:	f7fe fb28 	bl	8005158 <__sinit>
 8006b08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b0a:	07d9      	lsls	r1, r3, #31
 8006b0c:	d405      	bmi.n	8006b1a <_vfiprintf_r+0x2a>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	059a      	lsls	r2, r3, #22
 8006b12:	d402      	bmi.n	8006b1a <_vfiprintf_r+0x2a>
 8006b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b16:	f7fe fb8b 	bl	8005230 <__retarget_lock_acquire_recursive>
 8006b1a:	89ab      	ldrh	r3, [r5, #12]
 8006b1c:	071b      	lsls	r3, r3, #28
 8006b1e:	d501      	bpl.n	8006b24 <_vfiprintf_r+0x34>
 8006b20:	692b      	ldr	r3, [r5, #16]
 8006b22:	b99b      	cbnz	r3, 8006b4c <_vfiprintf_r+0x5c>
 8006b24:	4629      	mov	r1, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	f000 f93a 	bl	8006da0 <__swsetup_r>
 8006b2c:	b170      	cbz	r0, 8006b4c <_vfiprintf_r+0x5c>
 8006b2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b30:	07dc      	lsls	r4, r3, #31
 8006b32:	d504      	bpl.n	8006b3e <_vfiprintf_r+0x4e>
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b38:	b01d      	add	sp, #116	; 0x74
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	0598      	lsls	r0, r3, #22
 8006b42:	d4f7      	bmi.n	8006b34 <_vfiprintf_r+0x44>
 8006b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b46:	f7fe fb74 	bl	8005232 <__retarget_lock_release_recursive>
 8006b4a:	e7f3      	b.n	8006b34 <_vfiprintf_r+0x44>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b50:	2320      	movs	r3, #32
 8006b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5a:	2330      	movs	r3, #48	; 0x30
 8006b5c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d10 <_vfiprintf_r+0x220>
 8006b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b64:	f04f 0901 	mov.w	r9, #1
 8006b68:	4623      	mov	r3, r4
 8006b6a:	469a      	mov	sl, r3
 8006b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b70:	b10a      	cbz	r2, 8006b76 <_vfiprintf_r+0x86>
 8006b72:	2a25      	cmp	r2, #37	; 0x25
 8006b74:	d1f9      	bne.n	8006b6a <_vfiprintf_r+0x7a>
 8006b76:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7a:	d00b      	beq.n	8006b94 <_vfiprintf_r+0xa4>
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	4630      	mov	r0, r6
 8006b84:	f7ff ffa1 	bl	8006aca <__sfputs_r>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f000 80a9 	beq.w	8006ce0 <_vfiprintf_r+0x1f0>
 8006b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b90:	445a      	add	r2, fp
 8006b92:	9209      	str	r2, [sp, #36]	; 0x24
 8006b94:	f89a 3000 	ldrb.w	r3, [sl]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80a1 	beq.w	8006ce0 <_vfiprintf_r+0x1f0>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ba8:	f10a 0a01 	add.w	sl, sl, #1
 8006bac:	9304      	str	r3, [sp, #16]
 8006bae:	9307      	str	r3, [sp, #28]
 8006bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8006bb6:	4654      	mov	r4, sl
 8006bb8:	2205      	movs	r2, #5
 8006bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bbe:	4854      	ldr	r0, [pc, #336]	; (8006d10 <_vfiprintf_r+0x220>)
 8006bc0:	f7f9 fb3e 	bl	8000240 <memchr>
 8006bc4:	9a04      	ldr	r2, [sp, #16]
 8006bc6:	b9d8      	cbnz	r0, 8006c00 <_vfiprintf_r+0x110>
 8006bc8:	06d1      	lsls	r1, r2, #27
 8006bca:	bf44      	itt	mi
 8006bcc:	2320      	movmi	r3, #32
 8006bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd2:	0713      	lsls	r3, r2, #28
 8006bd4:	bf44      	itt	mi
 8006bd6:	232b      	movmi	r3, #43	; 0x2b
 8006bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006be0:	2b2a      	cmp	r3, #42	; 0x2a
 8006be2:	d015      	beq.n	8006c10 <_vfiprintf_r+0x120>
 8006be4:	9a07      	ldr	r2, [sp, #28]
 8006be6:	4654      	mov	r4, sl
 8006be8:	2000      	movs	r0, #0
 8006bea:	f04f 0c0a 	mov.w	ip, #10
 8006bee:	4621      	mov	r1, r4
 8006bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf4:	3b30      	subs	r3, #48	; 0x30
 8006bf6:	2b09      	cmp	r3, #9
 8006bf8:	d94d      	bls.n	8006c96 <_vfiprintf_r+0x1a6>
 8006bfa:	b1b0      	cbz	r0, 8006c2a <_vfiprintf_r+0x13a>
 8006bfc:	9207      	str	r2, [sp, #28]
 8006bfe:	e014      	b.n	8006c2a <_vfiprintf_r+0x13a>
 8006c00:	eba0 0308 	sub.w	r3, r0, r8
 8006c04:	fa09 f303 	lsl.w	r3, r9, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	46a2      	mov	sl, r4
 8006c0e:	e7d2      	b.n	8006bb6 <_vfiprintf_r+0xc6>
 8006c10:	9b03      	ldr	r3, [sp, #12]
 8006c12:	1d19      	adds	r1, r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	9103      	str	r1, [sp, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	bfbb      	ittet	lt
 8006c1c:	425b      	neglt	r3, r3
 8006c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c22:	9307      	strge	r3, [sp, #28]
 8006c24:	9307      	strlt	r3, [sp, #28]
 8006c26:	bfb8      	it	lt
 8006c28:	9204      	strlt	r2, [sp, #16]
 8006c2a:	7823      	ldrb	r3, [r4, #0]
 8006c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006c2e:	d10c      	bne.n	8006c4a <_vfiprintf_r+0x15a>
 8006c30:	7863      	ldrb	r3, [r4, #1]
 8006c32:	2b2a      	cmp	r3, #42	; 0x2a
 8006c34:	d134      	bne.n	8006ca0 <_vfiprintf_r+0x1b0>
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	1d1a      	adds	r2, r3, #4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	9203      	str	r2, [sp, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bfb8      	it	lt
 8006c42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c46:	3402      	adds	r4, #2
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d20 <_vfiprintf_r+0x230>
 8006c4e:	7821      	ldrb	r1, [r4, #0]
 8006c50:	2203      	movs	r2, #3
 8006c52:	4650      	mov	r0, sl
 8006c54:	f7f9 faf4 	bl	8000240 <memchr>
 8006c58:	b138      	cbz	r0, 8006c6a <_vfiprintf_r+0x17a>
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	eba0 000a 	sub.w	r0, r0, sl
 8006c60:	2240      	movs	r2, #64	; 0x40
 8006c62:	4082      	lsls	r2, r0
 8006c64:	4313      	orrs	r3, r2
 8006c66:	3401      	adds	r4, #1
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c6e:	4829      	ldr	r0, [pc, #164]	; (8006d14 <_vfiprintf_r+0x224>)
 8006c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c74:	2206      	movs	r2, #6
 8006c76:	f7f9 fae3 	bl	8000240 <memchr>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d03f      	beq.n	8006cfe <_vfiprintf_r+0x20e>
 8006c7e:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <_vfiprintf_r+0x228>)
 8006c80:	bb1b      	cbnz	r3, 8006cca <_vfiprintf_r+0x1da>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	3307      	adds	r3, #7
 8006c86:	f023 0307 	bic.w	r3, r3, #7
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	9303      	str	r3, [sp, #12]
 8006c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c90:	443b      	add	r3, r7
 8006c92:	9309      	str	r3, [sp, #36]	; 0x24
 8006c94:	e768      	b.n	8006b68 <_vfiprintf_r+0x78>
 8006c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	2001      	movs	r0, #1
 8006c9e:	e7a6      	b.n	8006bee <_vfiprintf_r+0xfe>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	9305      	str	r3, [sp, #20]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f04f 0c0a 	mov.w	ip, #10
 8006cac:	4620      	mov	r0, r4
 8006cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb2:	3a30      	subs	r2, #48	; 0x30
 8006cb4:	2a09      	cmp	r2, #9
 8006cb6:	d903      	bls.n	8006cc0 <_vfiprintf_r+0x1d0>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0c6      	beq.n	8006c4a <_vfiprintf_r+0x15a>
 8006cbc:	9105      	str	r1, [sp, #20]
 8006cbe:	e7c4      	b.n	8006c4a <_vfiprintf_r+0x15a>
 8006cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7f0      	b.n	8006cac <_vfiprintf_r+0x1bc>
 8006cca:	ab03      	add	r3, sp, #12
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <_vfiprintf_r+0x22c>)
 8006cd2:	a904      	add	r1, sp, #16
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7fd fe1b 	bl	8004910 <_printf_float>
 8006cda:	4607      	mov	r7, r0
 8006cdc:	1c78      	adds	r0, r7, #1
 8006cde:	d1d6      	bne.n	8006c8e <_vfiprintf_r+0x19e>
 8006ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce2:	07d9      	lsls	r1, r3, #31
 8006ce4:	d405      	bmi.n	8006cf2 <_vfiprintf_r+0x202>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	059a      	lsls	r2, r3, #22
 8006cea:	d402      	bmi.n	8006cf2 <_vfiprintf_r+0x202>
 8006cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cee:	f7fe faa0 	bl	8005232 <__retarget_lock_release_recursive>
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	065b      	lsls	r3, r3, #25
 8006cf6:	f53f af1d 	bmi.w	8006b34 <_vfiprintf_r+0x44>
 8006cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfc:	e71c      	b.n	8006b38 <_vfiprintf_r+0x48>
 8006cfe:	ab03      	add	r3, sp, #12
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	462a      	mov	r2, r5
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <_vfiprintf_r+0x22c>)
 8006d06:	a904      	add	r1, sp, #16
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7fe f889 	bl	8004e20 <_printf_i>
 8006d0e:	e7e4      	b.n	8006cda <_vfiprintf_r+0x1ea>
 8006d10:	08007373 	.word	0x08007373
 8006d14:	0800737d 	.word	0x0800737d
 8006d18:	08004911 	.word	0x08004911
 8006d1c:	08006acb 	.word	0x08006acb
 8006d20:	08007379 	.word	0x08007379

08006d24 <__swbuf_r>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	460e      	mov	r6, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	b118      	cbz	r0, 8006d36 <__swbuf_r+0x12>
 8006d2e:	6a03      	ldr	r3, [r0, #32]
 8006d30:	b90b      	cbnz	r3, 8006d36 <__swbuf_r+0x12>
 8006d32:	f7fe fa11 	bl	8005158 <__sinit>
 8006d36:	69a3      	ldr	r3, [r4, #24]
 8006d38:	60a3      	str	r3, [r4, #8]
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	071a      	lsls	r2, r3, #28
 8006d3e:	d525      	bpl.n	8006d8c <__swbuf_r+0x68>
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	b31b      	cbz	r3, 8006d8c <__swbuf_r+0x68>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	6922      	ldr	r2, [r4, #16]
 8006d48:	1a98      	subs	r0, r3, r2
 8006d4a:	6963      	ldr	r3, [r4, #20]
 8006d4c:	b2f6      	uxtb	r6, r6
 8006d4e:	4283      	cmp	r3, r0
 8006d50:	4637      	mov	r7, r6
 8006d52:	dc04      	bgt.n	8006d5e <__swbuf_r+0x3a>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff f990 	bl	800607c <_fflush_r>
 8006d5c:	b9e0      	cbnz	r0, 8006d98 <__swbuf_r+0x74>
 8006d5e:	68a3      	ldr	r3, [r4, #8]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	60a3      	str	r3, [r4, #8]
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	701e      	strb	r6, [r3, #0]
 8006d6c:	6962      	ldr	r2, [r4, #20]
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d004      	beq.n	8006d7e <__swbuf_r+0x5a>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	07db      	lsls	r3, r3, #31
 8006d78:	d506      	bpl.n	8006d88 <__swbuf_r+0x64>
 8006d7a:	2e0a      	cmp	r6, #10
 8006d7c:	d104      	bne.n	8006d88 <__swbuf_r+0x64>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4628      	mov	r0, r5
 8006d82:	f7ff f97b 	bl	800607c <_fflush_r>
 8006d86:	b938      	cbnz	r0, 8006d98 <__swbuf_r+0x74>
 8006d88:	4638      	mov	r0, r7
 8006d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4628      	mov	r0, r5
 8006d90:	f000 f806 	bl	8006da0 <__swsetup_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d0d5      	beq.n	8006d44 <__swbuf_r+0x20>
 8006d98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d9c:	e7f4      	b.n	8006d88 <__swbuf_r+0x64>
	...

08006da0 <__swsetup_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4b2a      	ldr	r3, [pc, #168]	; (8006e4c <__swsetup_r+0xac>)
 8006da4:	4605      	mov	r5, r0
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	460c      	mov	r4, r1
 8006daa:	b118      	cbz	r0, 8006db4 <__swsetup_r+0x14>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <__swsetup_r+0x14>
 8006db0:	f7fe f9d2 	bl	8005158 <__sinit>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dba:	0718      	lsls	r0, r3, #28
 8006dbc:	d422      	bmi.n	8006e04 <__swsetup_r+0x64>
 8006dbe:	06d9      	lsls	r1, r3, #27
 8006dc0:	d407      	bmi.n	8006dd2 <__swsetup_r+0x32>
 8006dc2:	2309      	movs	r3, #9
 8006dc4:	602b      	str	r3, [r5, #0]
 8006dc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dd0:	e034      	b.n	8006e3c <__swsetup_r+0x9c>
 8006dd2:	0758      	lsls	r0, r3, #29
 8006dd4:	d512      	bpl.n	8006dfc <__swsetup_r+0x5c>
 8006dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dd8:	b141      	cbz	r1, 8006dec <__swsetup_r+0x4c>
 8006dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d002      	beq.n	8006de8 <__swsetup_r+0x48>
 8006de2:	4628      	mov	r0, r5
 8006de4:	f7ff fdd6 	bl	8006994 <_free_r>
 8006de8:	2300      	movs	r3, #0
 8006dea:	6363      	str	r3, [r4, #52]	; 0x34
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006df2:	81a3      	strh	r3, [r4, #12]
 8006df4:	2300      	movs	r3, #0
 8006df6:	6063      	str	r3, [r4, #4]
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f043 0308 	orr.w	r3, r3, #8
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	b94b      	cbnz	r3, 8006e1c <__swsetup_r+0x7c>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e12:	d003      	beq.n	8006e1c <__swsetup_r+0x7c>
 8006e14:	4621      	mov	r1, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f840 	bl	8006e9c <__smakebuf_r>
 8006e1c:	89a0      	ldrh	r0, [r4, #12]
 8006e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e22:	f010 0301 	ands.w	r3, r0, #1
 8006e26:	d00a      	beq.n	8006e3e <__swsetup_r+0x9e>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60a3      	str	r3, [r4, #8]
 8006e2c:	6963      	ldr	r3, [r4, #20]
 8006e2e:	425b      	negs	r3, r3
 8006e30:	61a3      	str	r3, [r4, #24]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	b943      	cbnz	r3, 8006e48 <__swsetup_r+0xa8>
 8006e36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e3a:	d1c4      	bne.n	8006dc6 <__swsetup_r+0x26>
 8006e3c:	bd38      	pop	{r3, r4, r5, pc}
 8006e3e:	0781      	lsls	r1, r0, #30
 8006e40:	bf58      	it	pl
 8006e42:	6963      	ldrpl	r3, [r4, #20]
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	e7f4      	b.n	8006e32 <__swsetup_r+0x92>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	e7f7      	b.n	8006e3c <__swsetup_r+0x9c>
 8006e4c:	20000068 	.word	0x20000068

08006e50 <__swhatbuf_r>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	460c      	mov	r4, r1
 8006e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	b096      	sub	sp, #88	; 0x58
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	461e      	mov	r6, r3
 8006e60:	da0d      	bge.n	8006e7e <__swhatbuf_r+0x2e>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	bf0c      	ite	eq
 8006e6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e72:	2340      	movne	r3, #64	; 0x40
 8006e74:	2000      	movs	r0, #0
 8006e76:	6031      	str	r1, [r6, #0]
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	b016      	add	sp, #88	; 0x58
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	466a      	mov	r2, sp
 8006e80:	f000 f848 	bl	8006f14 <_fstat_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	dbec      	blt.n	8006e62 <__swhatbuf_r+0x12>
 8006e88:	9901      	ldr	r1, [sp, #4]
 8006e8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e92:	4259      	negs	r1, r3
 8006e94:	4159      	adcs	r1, r3
 8006e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e9a:	e7eb      	b.n	8006e74 <__swhatbuf_r+0x24>

08006e9c <__smakebuf_r>:
 8006e9c:	898b      	ldrh	r3, [r1, #12]
 8006e9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ea0:	079d      	lsls	r5, r3, #30
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460c      	mov	r4, r1
 8006ea6:	d507      	bpl.n	8006eb8 <__smakebuf_r+0x1c>
 8006ea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	6123      	str	r3, [r4, #16]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	6163      	str	r3, [r4, #20]
 8006eb4:	b002      	add	sp, #8
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	ab01      	add	r3, sp, #4
 8006eba:	466a      	mov	r2, sp
 8006ebc:	f7ff ffc8 	bl	8006e50 <__swhatbuf_r>
 8006ec0:	9900      	ldr	r1, [sp, #0]
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f7fe ffd3 	bl	8005e70 <_malloc_r>
 8006eca:	b948      	cbnz	r0, 8006ee0 <__smakebuf_r+0x44>
 8006ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ed0:	059a      	lsls	r2, r3, #22
 8006ed2:	d4ef      	bmi.n	8006eb4 <__smakebuf_r+0x18>
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	f043 0302 	orr.w	r3, r3, #2
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	e7e3      	b.n	8006ea8 <__smakebuf_r+0xc>
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	6020      	str	r0, [r4, #0]
 8006ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	9b00      	ldr	r3, [sp, #0]
 8006eec:	6163      	str	r3, [r4, #20]
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	6120      	str	r0, [r4, #16]
 8006ef2:	b15b      	cbz	r3, 8006f0c <__smakebuf_r+0x70>
 8006ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 f81d 	bl	8006f38 <_isatty_r>
 8006efe:	b128      	cbz	r0, 8006f0c <__smakebuf_r+0x70>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	f043 0301 	orr.w	r3, r3, #1
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	431d      	orrs	r5, r3
 8006f10:	81a5      	strh	r5, [r4, #12]
 8006f12:	e7cf      	b.n	8006eb4 <__smakebuf_r+0x18>

08006f14 <_fstat_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d07      	ldr	r5, [pc, #28]	; (8006f34 <_fstat_r+0x20>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7f9 ff1e 	bl	8000d62 <_fstat>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_fstat_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_fstat_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	20000488 	.word	0x20000488

08006f38 <_isatty_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4d06      	ldr	r5, [pc, #24]	; (8006f54 <_isatty_r+0x1c>)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7f9 ff1d 	bl	8000d82 <_isatty>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_isatty_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_isatty_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	20000488 	.word	0x20000488

08006f58 <_raise_r>:
 8006f58:	291f      	cmp	r1, #31
 8006f5a:	b538      	push	{r3, r4, r5, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	d904      	bls.n	8006f6c <_raise_r+0x14>
 8006f62:	2316      	movs	r3, #22
 8006f64:	6003      	str	r3, [r0, #0]
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f6e:	b112      	cbz	r2, 8006f76 <_raise_r+0x1e>
 8006f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f74:	b94b      	cbnz	r3, 8006f8a <_raise_r+0x32>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f830 	bl	8006fdc <_getpid_r>
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4601      	mov	r1, r0
 8006f80:	4620      	mov	r0, r4
 8006f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f86:	f000 b817 	b.w	8006fb8 <_kill_r>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d00a      	beq.n	8006fa4 <_raise_r+0x4c>
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	d103      	bne.n	8006f9a <_raise_r+0x42>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7e7      	b.n	8006f6a <_raise_r+0x12>
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	4798      	blx	r3
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7e0      	b.n	8006f6a <_raise_r+0x12>

08006fa8 <raise>:
 8006fa8:	4b02      	ldr	r3, [pc, #8]	; (8006fb4 <raise+0xc>)
 8006faa:	4601      	mov	r1, r0
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	f7ff bfd3 	b.w	8006f58 <_raise_r>
 8006fb2:	bf00      	nop
 8006fb4:	20000068 	.word	0x20000068

08006fb8 <_kill_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	; (8006fd8 <_kill_r+0x20>)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	f7f9 fe6d 	bl	8000ca4 <_kill>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d102      	bne.n	8006fd4 <_kill_r+0x1c>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	b103      	cbz	r3, 8006fd4 <_kill_r+0x1c>
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20000488 	.word	0x20000488

08006fdc <_getpid_r>:
 8006fdc:	f7f9 be5a 	b.w	8000c94 <_getpid>

08006fe0 <_init>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr

08006fec <_fini>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr
